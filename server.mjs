import express from 'express';
import multer from 'multer';
import cors from 'cors';
import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';
import { analyzeImageForPhoto } from './src/imageAnalyzer.mjs';
import { generatePhotoFromSketch } from './src/scribbleDiffusionGenerator.mjs';

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
import dotenv from 'dotenv';
dotenv.config();

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const app = express();
const PORT = process.env.PORT || 3001;

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ API –∫–ª—é—á–∞
console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ API –∫–ª—é—á–∞:');
console.log('SCRIBBLE_DIFFUSION_API_KEY —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω:', !!process.env.SCRIBBLE_DIFFUSION_API_KEY);

if (!process.env.SCRIBBLE_DIFFUSION_API_KEY || 
    process.env.SCRIBBLE_DIFFUSION_API_KEY === 'YOUR_SCRIBBLE_DIFFUSION_API_KEY_HERE' || 
    process.env.SCRIBBLE_DIFFUSION_API_KEY === 'your_scribble_diffusion_api_key_here') {
  console.error('‚ùå –û–®–ò–ë–ö–ê: Scribble Diffusion API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!');
  console.error('üìù –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env –≤ –ø–∞–ø–∫–µ backend/ –∏ –¥–æ–±–∞–≤—å—Ç–µ:');
  console.error('   SCRIBBLE_DIFFUSION_API_KEY=–≤–∞—à_–∫–ª—é—á_–∑–¥–µ—Å—å');
  console.error('üîó –ü–æ–ª—É—á–∏—Ç–µ –∫–ª—é—á –Ω–∞ –≤–∞—à–µ–º API –ø—Ä–æ–≤–∞–π–¥–µ—Ä–µ');
  console.error('‚ö†Ô∏è  –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ API –∫–ª—é—á–∞!');
  process.exit(1);
} else {
  console.log('‚úÖ Scribble Diffusion API –∫–ª—é—á –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
}

// Middleware
app.use(cors({
  origin: ['https://acqu1red.github.io'],
  credentials: true
}));
app.use(express.json());
app.use(express.static('public'));

// –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
app.use('/temp-images', express.static(path.join(__dirname, 'uploads')));

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ multer –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤
const storage = multer.diskStorage({
  destination: (req, file, cb) => {
    const uploadDir = path.join(__dirname, 'uploads');
    if (!fs.existsSync(uploadDir)) {
      fs.mkdirSync(uploadDir, { recursive: true });
    }
    cb(null, uploadDir);
  },
  filename: (req, file, cb) => {
    const uniqueSuffix = Date.now() + '-' + Math.round(Math.random() * 1E9);
    cb(null, file.fieldname + '-' + uniqueSuffix + path.extname(file.originalname));
  }
});

const upload = multer({ 
  storage: storage,
  limits: {
    fileSize: 10 * 1024 * 1024 // 10MB limit
  },
  fileFilter: (req, file, cb) => {
    if (file.mimetype.startsWith('image/')) {
      cb(null, true);
    } else {
      cb(new Error('–¢–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–∞–∑—Ä–µ—à–µ–Ω—ã!'), false);
    }
  }
});


// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
app.post('/api/generate-photo', upload.single('image'), async (req, res) => {
  try {
    if (!req.file) {
      return res.status(400).json({ error: '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ' });
    }

    // Scribble Diffusion API –∫–ª—é—á –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω
    if (!process.env.SCRIBBLE_DIFFUSION_API_KEY) {
      return res.status(500).json({ error: 'API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.' });
    }

    const imagePath = req.file.path;
    
    console.log('–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏:', imagePath);

    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ —Å–æ–∑–¥–∞–µ–º —ç—Å–∫–∏–∑
    const analysisData = await analyzeImageForPhoto(imagePath);
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –ø–ª–∞–Ω–∞
    const prompt = analysisData.prompt;
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∏–∑ —ç—Å–∫–∏–∑–∞
    const photoBuffer = await generatePhotoFromSketch(analysisData.sketchPath, prompt);
    
    // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
    fs.unlinkSync(imagePath);
    if (fs.existsSync(analysisData.sketchPath)) {
      fs.unlinkSync(analysisData.sketchPath);
    }

    res.setHeader('Content-Type', 'image/png');
    res.send(photoBuffer);

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏: ' + error.message });
  }
});

// Health check endpoint
app.get('/healthz', (req, res) => {
  res.status(200).json({ status: 'ok', timestamp: new Date().toISOString() });
});

// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ–±–µ–ª–∏
app.get('/api/furniture', (req, res) => {
  try {
    const furnitureData = JSON.parse(fs.readFileSync(path.join(__dirname, 'furniture.json'), 'utf8'));
    res.json(furnitureData);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ–±–µ–ª–∏:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –º–µ–±–µ–ª–∏' });
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ multer
app.use((error, req, res, next) => {
  if (error instanceof multer.MulterError) {
    if (error.code === 'LIMIT_FILE_SIZE') {
      return res.status(400).json({ error: '–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 10MB' });
    }
  }
  res.status(500).json({ error: error.message });
});

app.listen(PORT, () => {
  console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
  console.log(`üåê Health check –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: http://localhost:${PORT}/healthz`);
  console.log(`üìä API endpoints:`);
  console.log(`   POST /api/generate-photo - –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏`);
  console.log(`   GET  /api/furniture - –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –º–µ–±–µ–ª–∏`);
  console.log(`   GET  /healthz - –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–µ—Ä–∞`);
  console.log(`‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ –∫ —Ä–∞–±–æ—Ç–µ!`);
});
