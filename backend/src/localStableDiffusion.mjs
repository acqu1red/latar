import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';
import sharp from 'sharp';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

/**
 * –õ–æ–∫–∞–ª—å–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å –ø–æ–º–æ—â—å—é Stable Diffusion + ControlNet
 * –¢–æ—á–Ω–æ–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –ø–ª–∞–Ω–æ–≤ –±–µ–∑ —Ç–≤–æ—Ä—á–µ—Å–∫–∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π
 */
export class LocalStableDiffusion {
  constructor() {
    this.webuiPath = path.join(__dirname, '..', '..', '..', 'stable-diffusion-webui');
    this.isAvailable = this.checkAvailability();
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Stable Diffusion WebUI
   */
  checkAvailability() {
    try {
      return fs.existsSync(this.webuiPath) && 
             fs.existsSync(path.join(this.webuiPath, 'webui.py'));
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ Stable Diffusion:', error);
      return false;
    }
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–ª–∞–Ω —Å –ø–æ–º–æ—â—å—é –ª–æ–∫–∞–ª—å–Ω–æ–π Stable Diffusion
   * @param {string} imagePath - –ü—É—Ç—å –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
   * @param {string} prompt - –ü—Ä–æ–º–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
   * @returns {Promise<Buffer>} –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
   */
  async generatePlan(imagePath, prompt) {
    try {
      console.log('üé® –ó–∞–ø—É—Å–∫–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Å Stable Diffusion');
      
      if (!this.isAvailable) {
        throw new Error('Stable Diffusion WebUI –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
      }

      // –°–æ–∑–¥–∞–µ–º —ç—Å–∫–∏–∑ –¥–ª—è ControlNet
      const sketchPath = await this.createSketchForControlNet(imagePath);
      
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ API WebUI
      const resultPath = await this.generateViaAPI(sketchPath, prompt);
      
      // –ß–∏—Ç–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
      const resultBuffer = fs.readFileSync(resultPath);
      
      // –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
      if (fs.existsSync(sketchPath)) {
        fs.unlinkSync(sketchPath);
      }
      if (fs.existsSync(resultPath)) {
        fs.unlinkSync(resultPath);
      }
      
      console.log('‚úÖ –õ–æ–∫–∞–ª—å–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
      return resultBuffer;
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:', error);
      throw error;
    }
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç —ç—Å–∫–∏–∑ –¥–ª—è ControlNet
   * @param {string} imagePath - –ü—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
   * @returns {Promise<string>} –ü—É—Ç—å –∫ —ç—Å–∫–∏–∑—É
   */
  async createSketchForControlNet(imagePath) {
    const outputPath = imagePath.replace(/\.[^/.]+$/, '_controlnet_sketch.png');
    
    // –°–æ–∑–¥–∞–µ–º —ç—Å–∫–∏–∑ —Å –≤—ã—Å–æ–∫–æ–π –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–æ—Å—Ç—å—é –¥–ª—è ControlNet
    await sharp(imagePath)
      .greyscale()
      .normalize()
      .sharpen({ sigma: 1.0, m1: 0.5, m2: 3.0, x1: 2, y2: 10 })
      .threshold(128)
      .png()
      .toFile(outputPath);
    
    return outputPath;
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ API WebUI
   * @param {string} sketchPath - –ü—É—Ç—å –∫ —ç—Å–∫–∏–∑—É
   * @param {string} prompt - –ü—Ä–æ–º–ø—Ç
   * @returns {Promise<string>} –ü—É—Ç—å –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
   */
  async generateViaAPI(sketchPath, prompt) {
    // –ó–∞–ø—É—Å–∫–∞–µ–º WebUI –µ—Å–ª–∏ –Ω–µ –∑–∞–ø—É—â–µ–Ω
    await this.ensureWebUIRunning();
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ API
    const response = await fetch('http://127.0.0.1:7860/sdapi/v1/txt2img', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        prompt: prompt,
        negative_prompt: "blurry, low quality, distorted, ugly, bad anatomy, deformed, artistic, creative, colorful",
        steps: 20,
        cfg_scale: 7.5,
        width: 512,
        height: 512,
        sampler_name: "DPM++ 2M Karras",
        batch_size: 1,
        n_iter: 1,
        seed: -1,
        controlnet_units: [{
          input_image: this.imageToBase64(sketchPath),
          module: "scribble",
          model: "control_v11p_sd15_scribble [ca1f5f75]",
          weight: 1.0,
          resize_mode: 1,
          lowvram: false,
          processor_res: 512,
          threshold_a: 64,
          threshold_b: 64,
          guidance_start: 0.0,
          guidance_end: 1.0,
          pixel_perfect: true
        }]
      })
    });

    if (!response.ok) {
      throw new Error(`–û—à–∏–±–∫–∞ API WebUI: ${response.status}`);
    }

    const result = await response.json();
    const imageData = result.images[0];
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    const outputPath = path.join(__dirname, '..', 'uploads', `generated_${Date.now()}.png`);
    const imageBuffer = Buffer.from(imageData, 'base64');
    fs.writeFileSync(outputPath, imageBuffer);
    
    return outputPath;
  }

  /**
   * –ó–∞–ø—É—Å–∫–∞–µ—Ç WebUI –µ—Å–ª–∏ –æ–Ω –Ω–µ –∑–∞–ø—É—â–µ–Ω
   */
  async ensureWebUIRunning() {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—É—â–µ–Ω –ª–∏ WebUI
      const response = await fetch('http://127.0.0.1:7860/sdapi/v1/options', {
        method: 'GET',
        timeout: 5000
      });
      
      if (response.ok) {
        console.log('‚úÖ WebUI —É–∂–µ –∑–∞–ø—É—â–µ–Ω');
        return;
      }
    } catch (error) {
      console.log('üîÑ –ó–∞–ø—É—Å–∫–∞–µ–º WebUI...');
    }

    // –ó–∞–ø—É—Å–∫–∞–µ–º WebUI
    const { spawn } = await import('child_process');
    const webuiProcess = spawn('python', ['webui.py', '--api', '--listen'], {
      cwd: this.webuiPath,
      detached: true,
      stdio: 'ignore'
    });

    // –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞
    await this.waitForWebUI();
  }

  /**
   * –ñ–¥–µ—Ç –∑–∞–ø—É—Å–∫–∞ WebUI
   */
  async waitForWebUI() {
    const maxAttempts = 60; // 5 –º–∏–Ω—É—Ç
    let attempts = 0;

    while (attempts < maxAttempts) {
      try {
        const response = await fetch('http://127.0.0.1:7860/sdapi/v1/options', {
          method: 'GET',
          timeout: 5000
        });
        
        if (response.ok) {
          console.log('‚úÖ WebUI –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤');
          return;
        }
      } catch (error) {
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
      }
      
      await new Promise(resolve => setTimeout(resolve, 5000));
      attempts++;
    }
    
    throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å WebUI');
  }

  /**
   * –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ base64
   * @param {string} imagePath - –ü—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
   * @returns {string} Base64 —Å—Ç—Ä–æ–∫–∞
   */
  imageToBase64(imagePath) {
    const imageBuffer = fs.readFileSync(imagePath);
    return imageBuffer.toString('base64');
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
export const localStableDiffusion = new LocalStableDiffusion();
