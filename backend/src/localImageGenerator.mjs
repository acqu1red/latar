import sharp from 'sharp';
import fs from 'fs';

/**
 * –õ–æ–∫–∞–ª—å–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ —ç—Å–∫–∏–∑–æ–≤
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –ø—Ä–æ—Å—Ç—ã–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
 * @param {string} sketchPath - –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —ç—Å–∫–∏–∑–∞
 * @param {string} prompt - –¢–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∂–µ–ª–∞–µ–º–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
 * @returns {Promise<Buffer>} –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
 */
export async function generateLocalImage(sketchPath, prompt) {
  try {
    console.log('üé® –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ:', sketchPath);
    console.log('–ü—Ä–æ–º–ø—Ç:', prompt);

    // –ß–∏—Ç–∞–µ–º —ç—Å–∫–∏–∑
    const sketchBuffer = fs.readFileSync(sketchPath);
    const sketchImage = sharp(sketchBuffer);
    const metadata = await sketchImage.metadata();

    // –°–æ–∑–¥–∞–µ–º —Ü–≤–µ—Ç–Ω—É—é –≤–µ—Ä—Å–∏—é –Ω–∞ –æ—Å–Ω–æ–≤–µ —ç—Å–∫–∏–∑–∞
    const coloredImage = await createColoredImage(sketchImage, metadata, prompt);
    
    console.log('‚úÖ –õ–æ–∫–∞–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ');
    return coloredImage;

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:', error);
    throw error;
  }
}

/**
 * –°–æ–∑–¥–∞–µ—Ç —Ü–≤–µ—Ç–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ —ç—Å–∫–∏–∑–∞
 * @param {Object} sketchImage - Sharp –æ–±—ä–µ–∫—Ç —ç—Å–∫–∏–∑–∞
 * @param {Object} metadata - –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
 * @param {string} prompt - –ü—Ä–æ–º–ø—Ç –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å—Ç–∏–ª—è
 * @returns {Promise<Buffer>} –¶–≤–µ—Ç–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
 */
async function createColoredImage(sketchImage, metadata, prompt) {
  const { width, height } = metadata;
  
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç–æ–≤—É—é —Å—Ö–µ–º—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ–º–ø—Ç–∞
  const colorScheme = getColorSchemeFromPrompt(prompt);
  
  // –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–º
  const baseImage = await createBaseGradient(width, height, colorScheme);
  
  // –ü—Ä–∏–º–µ–Ω—è–µ–º —ç—Å–∫–∏–∑ –∫–∞–∫ –º–∞—Å–∫—É
  const result = await applySketchAsMask(baseImage, sketchImage, colorScheme);
  
  return result;
}

/**
 * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ü–≤–µ—Ç–æ–≤—É—é —Å—Ö–µ–º—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ–º–ø—Ç–∞
 * @param {string} prompt - –ü—Ä–æ–º–ø—Ç
 * @returns {Object} –¶–≤–µ—Ç–æ–≤–∞—è —Å—Ö–µ–º–∞
 */
function getColorSchemeFromPrompt(prompt) {
  const lowerPrompt = prompt.toLowerCase();
  
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ü–≤–µ—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
  if (lowerPrompt.includes('sunset') || lowerPrompt.includes('sunrise')) {
    return {
      primary: '#FF6B35',
      secondary: '#F7931E',
      accent: '#FFD23F',
      background: '#FFE5B4'
    };
  } else if (lowerPrompt.includes('ocean') || lowerPrompt.includes('sea') || lowerPrompt.includes('water')) {
    return {
      primary: '#0066CC',
      secondary: '#00BFFF',
      accent: '#87CEEB',
      background: '#E6F3FF'
    };
  } else if (lowerPrompt.includes('forest') || lowerPrompt.includes('nature') || lowerPrompt.includes('green')) {
    return {
      primary: '#228B22',
      secondary: '#32CD32',
      accent: '#90EE90',
      background: '#F0FFF0'
    };
  } else if (lowerPrompt.includes('room') || lowerPrompt.includes('interior') || lowerPrompt.includes('home')) {
    return {
      primary: '#8B4513',
      secondary: '#D2691E',
      accent: '#F4A460',
      background: '#FFF8DC'
    };
  } else {
    // –î–µ—Ñ–æ–ª—Ç–Ω–∞—è —Å—Ö–µ–º–∞
    return {
      primary: '#4169E1',
      secondary: '#87CEEB',
      accent: '#FFB6C1',
      background: '#F0F8FF'
    };
  }
}

/**
 * –°–æ–∑–¥–∞–µ—Ç –±–∞–∑–æ–≤—ã–π –≥—Ä–∞–¥–∏–µ–Ω—Ç
 * @param {number} width - –®–∏—Ä–∏–Ω–∞
 * @param {number} height - –í—ã—Å–æ—Ç–∞
 * @param {Object} colorScheme - –¶–≤–µ—Ç–æ–≤–∞—è —Å—Ö–µ–º–∞
 * @returns {Promise<Buffer>} –ì—Ä–∞–¥–∏–µ–Ω—Ç–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
 */
async function createBaseGradient(width, height, colorScheme) {
  // –°–æ–∑–¥–∞–µ–º SVG —Å –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–º
  const svg = `
    <svg width="${width}" height="${height}" xmlns="http://www.w3.org/2000/svg">
      <defs>
        <linearGradient id="grad1" x1="0%" y1="0%" x2="100%" y2="100%">
          <stop offset="0%" style="stop-color:${colorScheme.background};stop-opacity:1" />
          <stop offset="50%" style="stop-color:${colorScheme.accent};stop-opacity:1" />
          <stop offset="100%" style="stop-color:${colorScheme.secondary};stop-opacity:1" />
        </linearGradient>
      </defs>
      <rect width="100%" height="100%" fill="url(#grad1)" />
    </svg>
  `;
  
  return await sharp(Buffer.from(svg))
    .png()
    .toBuffer();
}

/**
 * –ü—Ä–∏–º–µ–Ω—è–µ—Ç —ç—Å–∫–∏–∑ –∫–∞–∫ –º–∞—Å–∫—É –∫ –±–∞–∑–æ–≤–æ–º—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
 * @param {Buffer} baseImage - –ë–∞–∑–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
 * @param {Object} sketchImage - –≠—Å–∫–∏–∑
 * @param {Object} colorScheme - –¶–≤–µ—Ç–æ–≤–∞—è —Å—Ö–µ–º–∞
 * @returns {Promise<Buffer>} –†–µ–∑—É–ª—å—Ç–∞—Ç
 */
async function applySketchAsMask(baseImage, sketchImage, colorScheme) {
  // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —ç—Å–∫–∏–∑ –≤ –º–∞—Å–∫—É
  const mask = await sketchImage
    .greyscale()
    .normalize()
    .threshold(128)
    .png()
    .toBuffer();
  
  // –°–æ–∑–¥–∞–µ–º —Ü–≤–µ—Ç–Ω—É—é –≤–µ—Ä—Å–∏—é —ç—Å–∫–∏–∑–∞
  const coloredSketch = await sketchImage
    .greyscale()
    .normalize()
    .png()
    .toBuffer();
  
  // –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∞—Å–∫—É –∫ –±–∞–∑–æ–≤–æ–º—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
  const result = await sharp(baseImage)
    .composite([
      {
        input: coloredSketch,
        blend: 'multiply',
        opacity: 0.7
      },
      {
        input: mask,
        blend: 'overlay',
        opacity: 0.5
      }
    ])
    .png()
    .toBuffer();
  
  return result;
}

/**
 * –°–æ–∑–¥–∞–µ—Ç —ç—Å–∫–∏–∑ –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –∞–ª–≥–æ—Ä–∏—Ç–º–æ–º
 * @param {string} imagePath - –ü—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
 * @returns {Promise<string>} –ü—É—Ç—å –∫ —ç—Å–∫–∏–∑—É
 */
export async function createEnhancedSketch(imagePath) {
  try {
    console.log('‚úèÔ∏è –°–æ–∑–¥–∞–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–π —ç—Å–∫–∏–∑:', imagePath);
    
    const outputPath = imagePath.replace(/\.[^/.]+$/, '_enhanced_sketch.png');
    
    await sharp(imagePath)
      .greyscale() // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —á–µ—Ä–Ω–æ-–±–µ–ª–æ–µ
      .normalize() // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∫–æ–Ω—Ç—Ä–∞—Å—Ç
      .sharpen({ sigma: 1.5, m1: 0.5, m2: 3.0, x1: 2, y2: 10 }) // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–µ–∑–∫–æ—Å—Ç—å
      .threshold(140) // –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–æ—Ä–æ–≥–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
      .morphology({
        operation: 'erode',
        kernel: sharp.kernel.circle(1)
      }) // –£—Ç–æ–Ω—á–∞–µ–º –ª–∏–Ω–∏–∏
      .png()
      .toFile(outputPath);
    
    console.log('‚úÖ –£–ª—É—á—à–µ–Ω–Ω—ã–π —ç—Å–∫–∏–∑ —Å–æ–∑–¥–∞–Ω:', outputPath);
    return outputPath;
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ —ç—Å–∫–∏–∑–∞:', error);
    throw error;
  }
}
