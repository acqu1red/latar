import sharp from 'sharp';
import fs from 'fs';

/**
 * –õ–æ–∫–∞–ª—å–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ —ç—Å–∫–∏–∑–æ–≤
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –ø—Ä–æ—Å—Ç—ã–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
 * @param {string} sketchPath - –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —ç—Å–∫–∏–∑–∞
 * @param {string} prompt - –¢–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∂–µ–ª–∞–µ–º–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
 * @returns {Promise<Buffer>} –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
 */
export async function generateLocalImage(sketchPath, prompt) {
  try {
    console.log('üé® –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ:', sketchPath);
    console.log('–ü—Ä–æ–º–ø—Ç:', prompt);

    // –ß–∏—Ç–∞–µ–º —ç—Å–∫–∏–∑
    const sketchBuffer = fs.readFileSync(sketchPath);
    const sketchImage = sharp(sketchBuffer);
    const metadata = await sketchImage.metadata();

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–µ–Ω –ª–∏ –ø–ª–∞–Ω —Å –º–µ–±–µ–ª—å—é
    const isFurniturePlan = prompt.toLowerCase().includes('furniture') || 
                           prompt.toLowerCase().includes('with furniture');

    if (isFurniturePlan) {
      // –°–æ–∑–¥–∞–µ–º –ø–ª–∞–Ω —Å –º–µ–±–µ–ª—å—é
      const furnitureImage = await createFurniturePlan(sketchImage, metadata, prompt);
      console.log('‚úÖ –õ–æ–∫–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω —Å –º–µ–±–µ–ª—å—é —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω');
      return furnitureImage;
    } else {
      // –°–æ–∑–¥–∞–µ–º –æ–±—ã—á–Ω—ã–π –ø–ª–∞–Ω
      const coloredImage = await createColoredImage(sketchImage, metadata, prompt);
      console.log('‚úÖ –õ–æ–∫–∞–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ');
      return coloredImage;
    }

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:', error);
    console.log('üîÑ –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...');
    
    // Fallback - —Å–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    try {
      const sketchBuffer = fs.readFileSync(sketchPath);
      const sketchImage = sharp(sketchBuffer);
      const metadata = await sketchImage.metadata();
      
      // –ü—Ä–æ—Å—Ç–æ–µ —Ü–≤–µ—Ç–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
      const simpleImage = await sketchImage
        .greyscale()
        .normalize()
        .png()
        .toBuffer();
      
      return simpleImage;
    } catch (fallbackError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ fallback –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:', fallbackError);
      throw error; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é –æ—à–∏–±–∫—É
    }
  }
}

/**
 * –°–æ–∑–¥–∞–µ—Ç —Ü–≤–µ—Ç–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ —ç—Å–∫–∏–∑–∞
 * @param {Object} sketchImage - Sharp –æ–±—ä–µ–∫—Ç —ç—Å–∫–∏–∑–∞
 * @param {Object} metadata - –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
 * @param {string} prompt - –ü—Ä–æ–º–ø—Ç –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å—Ç–∏–ª—è
 * @returns {Promise<Buffer>} –¶–≤–µ—Ç–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
 */
async function createColoredImage(sketchImage, metadata, prompt) {
  const { width, height } = metadata;
  
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç–æ–≤—É—é —Å—Ö–µ–º—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ–º–ø—Ç–∞
  const colorScheme = getColorSchemeFromPrompt(prompt);
  
  // –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–º
  const baseImage = await createBaseGradient(width, height, colorScheme);
  
  // –ü—Ä–∏–º–µ–Ω—è–µ–º —ç—Å–∫–∏–∑ –∫–∞–∫ –º–∞—Å–∫—É
  const result = await applySketchAsMask(baseImage, sketchImage, colorScheme);
  
  return result;
}

/**
 * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ü–≤–µ—Ç–æ–≤—É—é —Å—Ö–µ–º—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ–º–ø—Ç–∞
 * @param {string} prompt - –ü—Ä–æ–º–ø—Ç
 * @returns {Object} –¶–≤–µ—Ç–æ–≤–∞—è —Å—Ö–µ–º–∞
 */
function getColorSchemeFromPrompt(prompt) {
  const lowerPrompt = prompt.toLowerCase();
  
  // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è —Å—Ö–µ–º–∞ –¥–ª—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤
  if (lowerPrompt.includes('architectural') || lowerPrompt.includes('floor plan') || 
      lowerPrompt.includes('blueprint') || lowerPrompt.includes('technical drawing')) {
    return {
      primary: '#000000',      // –ß–µ—Ä–Ω—ã–µ –ª–∏–Ω–∏–∏ –ø–ª–∞–Ω–∞
      secondary: '#333333',    // –¢–µ–º–Ω–æ-—Å–µ—Ä—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
      accent: '#666666',       // –°–µ—Ä—ã–µ –¥–µ—Ç–∞–ª–∏
      background: '#FFFFFF',   // –ë–µ–ª—ã–π —Ñ–æ–Ω
      furniture: '#2C3E50',    // –¢–µ–º–Ω–æ-—Å–∏–Ω–∏–π –¥–ª—è –º–µ–±–µ–ª–∏
      walls: '#000000'         // –ß–µ—Ä–Ω—ã–µ —Å—Ç–µ–Ω—ã
    };
  } else if (lowerPrompt.includes('furniture') || lowerPrompt.includes('with furniture')) {
    return {
      primary: '#000000',      // –ß–µ—Ä–Ω—ã–µ –ª–∏–Ω–∏–∏ –ø–ª–∞–Ω–∞
      secondary: '#2C3E50',    // –¢–µ–º–Ω–æ-—Å–∏–Ω–∏–π –¥–ª—è –º–µ–±–µ–ª–∏
      accent: '#34495E',       // –°–µ—Ä–æ-—Å–∏–Ω–∏–π –¥–ª—è –¥–µ—Ç–∞–ª–µ–π
      background: '#FFFFFF',   // –ë–µ–ª—ã–π —Ñ–æ–Ω
      furniture: '#2C3E50',    // –¢–µ–º–Ω–æ-—Å–∏–Ω–∏–π –¥–ª—è –º–µ–±–µ–ª–∏
      walls: '#000000'         // –ß–µ—Ä–Ω—ã–µ —Å—Ç–µ–Ω—ã
    };
  } else if (lowerPrompt.includes('sunset') || lowerPrompt.includes('sunrise')) {
    return {
      primary: '#FF6B35',
      secondary: '#F7931E',
      accent: '#FFD23F',
      background: '#FFE5B4'
    };
  } else if (lowerPrompt.includes('ocean') || lowerPrompt.includes('sea') || lowerPrompt.includes('water')) {
    return {
      primary: '#0066CC',
      secondary: '#00BFFF',
      accent: '#87CEEB',
      background: '#E6F3FF'
    };
  } else if (lowerPrompt.includes('forest') || lowerPrompt.includes('nature') || lowerPrompt.includes('green')) {
    return {
      primary: '#228B22',
      secondary: '#32CD32',
      accent: '#90EE90',
      background: '#F0FFF0'
    };
  } else if (lowerPrompt.includes('room') || lowerPrompt.includes('interior') || lowerPrompt.includes('home')) {
    return {
      primary: '#8B4513',
      secondary: '#D2691E',
      accent: '#F4A460',
      background: '#FFF8DC'
    };
  } else {
    // –î–µ—Ñ–æ–ª—Ç–Ω–∞—è —Å—Ö–µ–º–∞
    return {
      primary: '#4169E1',
      secondary: '#87CEEB',
      accent: '#FFB6C1',
      background: '#F0F8FF'
    };
  }
}

/**
 * –°–æ–∑–¥–∞–µ—Ç –±–∞–∑–æ–≤—ã–π –≥—Ä–∞–¥–∏–µ–Ω—Ç
 * @param {number} width - –®–∏—Ä–∏–Ω–∞
 * @param {number} height - –í—ã—Å–æ—Ç–∞
 * @param {Object} colorScheme - –¶–≤–µ—Ç–æ–≤–∞—è —Å—Ö–µ–º–∞
 * @returns {Promise<Buffer>} –ì—Ä–∞–¥–∏–µ–Ω—Ç–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
 */
async function createBaseGradient(width, height, colorScheme) {
  // –î–ª—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤ —Å–æ–∑–¥–∞–µ–º —á–∏—Å—Ç—ã–π –±–µ–ª—ã–π —Ñ–æ–Ω
  if (colorScheme.background === '#FFFFFF') {
    // –°–æ–∑–¥–∞–µ–º —á–∏—Å—Ç–æ –±–µ–ª–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    return await sharp({
      create: {
        width: width,
        height: height,
        channels: 3,
        background: { r: 255, g: 255, b: 255 }
      }
    })
    .png()
    .toBuffer();
  }
  
  // –î–ª—è –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å–æ–∑–¥–∞–µ–º –≥—Ä–∞–¥–∏–µ–Ω—Ç
  const svg = `
    <svg width="${width}" height="${height}" xmlns="http://www.w3.org/2000/svg">
      <defs>
        <linearGradient id="grad1" x1="0%" y1="0%" x2="100%" y2="100%">
          <stop offset="0%" style="stop-color:${colorScheme.background};stop-opacity:1" />
          <stop offset="50%" style="stop-color:${colorScheme.accent};stop-opacity:1" />
          <stop offset="100%" style="stop-color:${colorScheme.secondary};stop-opacity:1" />
        </linearGradient>
      </defs>
      <rect width="100%" height="100%" fill="url(#grad1)" />
    </svg>
  `;
  
  return await sharp(Buffer.from(svg))
    .png()
    .toBuffer();
}

/**
 * –ü—Ä–∏–º–µ–Ω—è–µ—Ç —ç—Å–∫–∏–∑ –∫–∞–∫ –º–∞—Å–∫—É –∫ –±–∞–∑–æ–≤–æ–º—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
 * @param {Buffer} baseImage - –ë–∞–∑–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
 * @param {Object} sketchImage - –≠—Å–∫–∏–∑
 * @param {Object} colorScheme - –¶–≤–µ—Ç–æ–≤–∞—è —Å—Ö–µ–º–∞
 * @returns {Promise<Buffer>} –†–µ–∑—É–ª—å—Ç–∞—Ç
 */
async function applySketchAsMask(baseImage, sketchImage, colorScheme) {
  // –î–ª—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
  if (colorScheme.background === '#FFFFFF') {
    // –°–æ–∑–¥–∞–µ–º —á–µ—Ä–Ω—ã–µ –ª–∏–Ω–∏–∏ –Ω–∞ –±–µ–ª–æ–º —Ñ–æ–Ω–µ
    const blackLines = await sketchImage
      .greyscale()
      .normalize()
      .threshold(140) // –ë–æ–ª–µ–µ —á–µ—Ç–∫–∏–µ –ª–∏–Ω–∏–∏
      .png()
      .toBuffer();
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º —á–µ—Ä–Ω—ã–µ –ª–∏–Ω–∏–∏ –∫ –±–µ–ª–æ–º—É —Ñ–æ–Ω—É
    const result = await sharp(baseImage)
      .composite([
        {
          input: blackLines,
          blend: 'multiply',
          opacity: 1.0 // –ü–æ–ª–Ω–∞—è –Ω–µ–ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å –¥–ª—è —á–µ—Ç–∫–∏—Ö –ª–∏–Ω–∏–π
        }
      ])
      .png()
      .toBuffer();
    
    return result;
  }
  
  // –î–ª—è –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
  const mask = await sketchImage
    .greyscale()
    .normalize()
    .threshold(128)
    .png()
    .toBuffer();
  
  // –°–æ–∑–¥–∞–µ–º —Ü–≤–µ—Ç–Ω—É—é –≤–µ—Ä—Å–∏—é —ç—Å–∫–∏–∑–∞
  const coloredSketch = await sketchImage
    .greyscale()
    .normalize()
    .png()
    .toBuffer();
  
  // –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∞—Å–∫—É –∫ –±–∞–∑–æ–≤–æ–º—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
  const result = await sharp(baseImage)
    .composite([
      {
        input: coloredSketch,
        blend: 'multiply',
        opacity: 0.7
      },
      {
        input: mask,
        blend: 'overlay',
        opacity: 0.5
      }
    ])
    .png()
    .toBuffer();
  
  return result;
}

/**
 * –°–æ–∑–¥–∞–µ—Ç –ø–ª–∞–Ω —Å –º–µ–±–µ–ª—å—é
 * @param {Object} sketchImage - Sharp –æ–±—ä–µ–∫—Ç —ç—Å–∫–∏–∑–∞
 * @param {Object} metadata - –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
 * @param {string} prompt - –ü—Ä–æ–º–ø—Ç
 * @returns {Promise<Buffer>} –ü–ª–∞–Ω —Å –º–µ–±–µ–ª—å—é
 */
async function createFurniturePlan(sketchImage, metadata, prompt) {
  const { width, height } = metadata;
  
  // –°–æ–∑–¥–∞–µ–º –±–µ–ª—ã–π —Ñ–æ–Ω
  const whiteBackground = await sharp({
    create: {
      width: width,
      height: height,
      channels: 3,
      background: { r: 255, g: 255, b: 255 }
    }
  })
  .png()
  .toBuffer();
  
  // –°–æ–∑–¥–∞–µ–º —á–µ—Ä–Ω—ã–µ –ª–∏–Ω–∏–∏ –ø–ª–∞–Ω–∞
  const planLines = await sketchImage
    .greyscale()
    .normalize()
    .threshold(140)
    .png()
    .toBuffer();
  
  // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—ã–µ —Å–∏–º–≤–æ–ª—ã –º–µ–±–µ–ª–∏
  const furnitureSymbols = await createFurnitureSymbols(width, height);
  
  // –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã
  const result = await sharp(whiteBackground)
    .composite([
      {
        input: planLines,
        blend: 'multiply',
        opacity: 1.0
      },
      {
        input: furnitureSymbols,
        blend: 'multiply',
        opacity: 0.8
      }
    ])
    .png()
    .toBuffer();
  
  return result;
}

/**
 * –°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ—Å—Ç—ã–µ —Å–∏–º–≤–æ–ª—ã –º–µ–±–µ–ª–∏
 * @param {number} width - –®–∏—Ä–∏–Ω–∞
 * @param {number} height - –í—ã—Å–æ—Ç–∞
 * @returns {Promise<Buffer>} –°–∏–º–≤–æ–ª—ã –º–µ–±–µ–ª–∏
 */
async function createFurnitureSymbols(width, height) {
  // –°–æ–∑–¥–∞–µ–º SVG —Å –ø—Ä–æ—Å—Ç—ã–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏ –º–µ–±–µ–ª–∏
  const svg = `
    <svg width="${width}" height="${height}" xmlns="http://www.w3.org/2000/svg">
      <defs>
        <pattern id="furniture" patternUnits="userSpaceOnUse" width="50" height="50">
          <rect width="50" height="50" fill="white"/>
          <!-- –ü—Ä–æ—Å—Ç—ã–µ —Å–∏–º–≤–æ–ª—ã –º–µ–±–µ–ª–∏ -->
          <rect x="10" y="10" width="30" height="20" fill="none" stroke="#2C3E50" stroke-width="2"/>
          <rect x="15" y="15" width="20" height="10" fill="none" stroke="#2C3E50" stroke-width="1"/>
          <circle cx="25" cy="25" r="3" fill="#2C3E50"/>
        </pattern>
      </defs>
      <rect width="100%" height="100%" fill="url(#furniture)" opacity="0.3"/>
    </svg>
  `;
  
  return await sharp(Buffer.from(svg))
    .png()
    .toBuffer();
}

/**
 * –°–æ–∑–¥–∞–µ—Ç —ç—Å–∫–∏–∑ –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –∞–ª–≥–æ—Ä–∏—Ç–º–æ–º
 * @param {string} imagePath - –ü—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
 * @returns {Promise<string>} –ü—É—Ç—å –∫ —ç—Å–∫–∏–∑—É
 */
export async function createEnhancedSketch(imagePath) {
  try {
    console.log('‚úèÔ∏è –°–æ–∑–¥–∞–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–π —ç—Å–∫–∏–∑:', imagePath);
    
    const outputPath = imagePath.replace(/\.[^/.]+$/, '_enhanced_sketch.png');
    
    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º —Å –º–æ—Ä—Ñ–æ–ª–æ–≥–∏–µ–π
    try {
      await sharp(imagePath)
        .greyscale() // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —á–µ—Ä–Ω–æ-–±–µ–ª–æ–µ
        .normalize() // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∫–æ–Ω—Ç—Ä–∞—Å—Ç
        .sharpen({ sigma: 1.5, m1: 0.5, m2: 3.0, x1: 2, y2: 10 }) // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–µ–∑–∫–æ—Å—Ç—å
        .threshold(140) // –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–æ—Ä–æ–≥–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        .morphology({
          operation: 'erode',
          kernel: {
            name: 'circle',
            size: 1
          }
        }) // –£—Ç–æ–Ω—á–∞–µ–º –ª–∏–Ω–∏–∏
        .png()
        .toFile(outputPath);
    } catch (morphologyError) {
      console.log('‚ö†Ô∏è –ú–æ—Ä—Ñ–æ–ª–æ–≥–∏—è –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º');
      // Fallback –±–µ–∑ –º–æ—Ä—Ñ–æ–ª–æ–≥–∏–∏
      await sharp(imagePath)
        .greyscale() // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —á–µ—Ä–Ω–æ-–±–µ–ª–æ–µ
        .normalize() // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∫–æ–Ω—Ç—Ä–∞—Å—Ç
        .sharpen({ sigma: 1.5, m1: 0.5, m2: 3.0, x1: 2, y2: 10 }) // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–µ–∑–∫–æ—Å—Ç—å
        .threshold(140) // –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–æ—Ä–æ–≥–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        .png()
        .toFile(outputPath);
    }
    
    console.log('‚úÖ –£–ª—É—á—à–µ–Ω–Ω—ã–π —ç—Å–∫–∏–∑ —Å–æ–∑–¥–∞–Ω:', outputPath);
    return outputPath;
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ —ç—Å–∫–∏–∑–∞:', error);
    throw error;
  }
}
