import fs from 'fs';
import sharp from 'sharp';
import path from 'path';

/**
 * –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ SVG —Å –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–º base64 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
 * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—Å–µ –¥–µ—Ç–∞–ª–∏ –∏—Å—Ö–æ–¥–Ω–æ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
 * @param {string} imagePath - –ü—É—Ç—å –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
 * @returns {string} SVG –∫–æ–Ω—Ç–µ–Ω—Ç —Å –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
 */
export async function convertImageToSvg(imagePath) {
  try {
    console.log('üñºÔ∏è –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ SVG:', imagePath);
    
    // –ß–∏—Ç–∞–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    const imageBuffer = fs.readFileSync(imagePath);
    console.log('–†–∞–∑–º–µ—Ä –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', imageBuffer.length, '–±–∞–π—Ç');
    
    // –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    const metadata = await sharp(imageBuffer).metadata();
    console.log('–ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', {
      width: metadata.width,
      height: metadata.height,
      format: metadata.format,
      channels: metadata.channels
    });
    
    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ base64
    const base64Image = imageBuffer.toString('base64');
    console.log('Base64 –¥–ª–∏–Ω–∞:', base64Image.length);
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º MIME —Ç–∏–ø
    const mimeType = getMimeType(metadata.format);
    console.log('MIME —Ç–∏–ø:', mimeType);
    
    // –°–æ–∑–¥–∞–µ–º SVG —Å –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
    const svgContent = createSvgWithEmbeddedImage(
      base64Image, 
      mimeType, 
      metadata.width, 
      metadata.height
    );
    
    console.log('‚úÖ SVG —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ, —Ä–∞–∑–º–µ—Ä:', svgContent.length, '—Å–∏–º–≤–æ–ª–æ–≤');
    return svgContent;
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ SVG:', error);
    throw error;
  }
}

/**
 * –°–æ–∑–¥–∞–µ—Ç SVG —Å –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
 * @param {string} base64Data - Base64 –¥–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
 * @param {string} mimeType - MIME —Ç–∏–ø –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
 * @param {number} width - –®–∏—Ä–∏–Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
 * @param {number} height - –í—ã—Å–æ—Ç–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
 * @returns {string} SVG –∫–æ–Ω—Ç–µ–Ω—Ç
 */
function createSvgWithEmbeddedImage(base64Data, mimeType, width, height) {
  const dataUrl = `data:${mimeType};base64,${base64Data}`;
  
  return `<?xml version="1.0" encoding="UTF-8"?>
<svg width="${width}" height="${height}" viewBox="0 0 ${width} ${height}" 
     xmlns="http://www.w3.org/2000/svg" 
     xmlns:xlink="http://www.w3.org/1999/xlink">
  <defs>
    <image id="originalImage" 
           x="0" y="0" 
           width="${width}" height="${height}" 
           xlink:href="${dataUrl}"/>
  </defs>
  
  <!-- –í—Å—Ç—Ä–æ–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ - —Ç–æ—á–Ω–∞—è –∫–æ–ø–∏—è –æ—Ä–∏–≥–∏–Ω–∞–ª–∞ -->
  <use xlink:href="#originalImage"/>
  
  <!-- –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Å–ª–æ–π –¥–ª—è –≤–æ–∑–º–æ–∂–Ω—ã—Ö –≤–µ–∫—Ç–æ—Ä–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ -->
  <g id="vectorLayer" opacity="0">
    <!-- –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤–µ–∫—Ç–æ—Ä–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –ø–æ–≤–µ—Ä—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è -->
  </g>
</svg>`;
}

/**
 * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç MIME —Ç–∏–ø –ø–æ —Ñ–æ—Ä–º–∞—Ç—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
 * @param {string} format - –§–æ—Ä–º–∞—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—Ç Sharp
 * @returns {string} MIME —Ç–∏–ø
 */
function getMimeType(format) {
  const mimeTypes = {
    'jpeg': 'image/jpeg',
    'jpg': 'image/jpeg',
    'png': 'image/png',
    'gif': 'image/gif',
    'webp': 'image/webp',
    'tiff': 'image/tiff',
    'bmp': 'image/bmp',
    'svg': 'image/svg+xml'
  };
  
  return mimeTypes[format] || 'image/jpeg';
}

/**
 * –°–æ–∑–¥–∞–µ—Ç –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π SVG —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è
 * @param {string} base64Data - Base64 –¥–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
 * @param {string} mimeType - MIME —Ç–∏–ø –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
 * @param {number} width - –®–∏—Ä–∏–Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
 * @param {number} height - –í—ã—Å–æ—Ç–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
 * @param {Object} options - –û–ø—Ü–∏–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
 * @returns {string} –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π SVG –∫–æ–Ω—Ç–µ–Ω—Ç
 */
export function createOptimizedSvg(base64Data, mimeType, width, height, options = {}) {
  const {
    maxWidth = 1200,
    maxHeight = 800,
    preserveAspectRatio = true,
    addGrid = false,
    addMeasurements = false
  } = options;
  
  // –í—ã—á–∏—Å–ª—è–µ–º –º–∞—Å—à—Ç–∞–± –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Ä–∞–∑–º–µ—Ä–∞
  let scaleX = 1;
  let scaleY = 1;
  let viewBoxWidth = width;
  let viewBoxHeight = height;
  
  if (preserveAspectRatio) {
    const scale = Math.min(maxWidth / width, maxHeight / height);
    scaleX = scaleY = scale;
    viewBoxWidth = width * scale;
    viewBoxHeight = height * scale;
  } else {
    scaleX = maxWidth / width;
    scaleY = maxHeight / height;
    viewBoxWidth = maxWidth;
    viewBoxHeight = maxHeight;
  }
  
  const dataUrl = `data:${mimeType};base64,${base64Data}`;
  
  let svgContent = `<?xml version="1.0" encoding="UTF-8"?>
<svg width="${viewBoxWidth}" height="${viewBoxHeight}" 
     viewBox="0 0 ${width} ${height}" 
     xmlns="http://www.w3.org/2000/svg" 
     xmlns:xlink="http://www.w3.org/1999/xlink">
  <defs>
    <image id="originalImage" 
           x="0" y="0" 
           width="${width}" height="${height}" 
           xlink:href="${dataUrl}"/>
  </defs>
  
  <!-- –í—Å—Ç—Ä–æ–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ - —Ç–æ—á–Ω–∞—è –∫–æ–ø–∏—è –æ—Ä–∏–≥–∏–Ω–∞–ª–∞ -->
  <use xlink:href="#originalImage"/>`;
  
  // –î–æ–±–∞–≤–ª—è–µ–º —Å–µ—Ç–∫—É –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
  if (addGrid) {
    svgContent += `
  
  <!-- –°–µ—Ç–∫–∞ –¥–ª—è –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è -->
  <defs>
    <pattern id="grid" width="50" height="50" patternUnits="userSpaceOnUse">
      <path d="M 50 0 L 0 0 0 50" fill="none" stroke="#ccc" stroke-width="0.5" opacity="0.3"/>
    </pattern>
  </defs>
  <rect width="${width}" height="${height}" fill="url(#grid)" opacity="0.1"/>`;
  }
  
  // –î–æ–±–∞–≤–ª—è–µ–º –∏–∑–º–µ—Ä–µ–Ω–∏—è –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
  if (addMeasurements) {
    svgContent += `
  
  <!-- –ò–∑–º–µ—Ä–µ–Ω–∏—è -->
  <g id="measurements" font-family="Arial, sans-serif" font-size="12" fill="#333">
    <text x="10" y="20">${width}px √ó ${height}px</text>
    <text x="10" y="35">–ú–∞—Å—à—Ç–∞–±: ${(scaleX * 100).toFixed(1)}%</text>
  </g>`;
  }
  
  svgContent += `
</svg>`;
  
  return svgContent;
}
