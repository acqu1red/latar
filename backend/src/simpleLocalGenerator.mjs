import sharp from 'sharp';
import fs from 'fs';

/**
 * –ü—Ä–æ—Å—Ç–∞—è –ª–æ–∫–∞–ª—å–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –±–∞–∑–æ–≤—ã–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
 */
export const simpleLocalGenerator = {
  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–ª–∞–Ω/–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ —ç—Å–∫–∏–∑–∞
   * @param {string} sketchPath - –ü—É—Ç—å –∫ —ç—Å–∫–∏–∑—É
   * @param {string} prompt - –ü—Ä–æ–º–ø—Ç
   * @returns {Promise<Buffer>} –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
   */
  async generatePlan(sketchPath, prompt) {
    try {
      console.log('üé® –ü—Ä–æ—Å—Ç–∞—è –ª–æ–∫–∞–ª—å–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è:', sketchPath);
      console.log('–ü—Ä–æ–º–ø—Ç:', prompt);

      // –ß–∏—Ç–∞–µ–º —ç—Å–∫–∏–∑
      const sketchBuffer = fs.readFileSync(sketchPath);
      const sketchImage = sharp(sketchBuffer);
      const metadata = await sketchImage.metadata();

      // –°–æ–∑–¥–∞–µ–º —É–ª—É—á—à–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
      const result = await this.createEnhancedImage(sketchImage, metadata, prompt);
      
      console.log('‚úÖ –ü—Ä–æ—Å—Ç–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ');
      return result;

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ—Å—Ç–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:', error);
      throw error;
    }
  },

  /**
   * –°–æ–∑–¥–∞–µ—Ç —É–ª—É—á—à–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ —ç—Å–∫–∏–∑–∞
   * @param {Object} sketchImage - Sharp –æ–±—ä–µ–∫—Ç —ç—Å–∫–∏–∑–∞
   * @param {Object} metadata - –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
   * @param {string} prompt - –ü—Ä–æ–º–ø—Ç
   * @returns {Promise<Buffer>} –†–µ–∑—É–ª—å—Ç–∞—Ç
   */
  async createEnhancedImage(sketchImage, metadata, prompt) {
    const { width, height } = metadata;
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∏–ª—å –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ–º–ø—Ç–∞
    const style = this.analyzePrompt(prompt);
    
    // –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    const baseImage = await this.createBaseImage(width, height, style);
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º —ç—Å–∫–∏–∑
    const result = await this.applySketch(baseImage, sketchImage, style);
    
    return result;
  },

  /**
   * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø—Ä–æ–º–ø—Ç –∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å—Ç–∏–ª—å
   * @param {string} prompt - –ü—Ä–æ–º–ø—Ç
   * @returns {Object} –°—Ç–∏–ª—å
   */
  analyzePrompt(prompt) {
    const lowerPrompt = prompt.toLowerCase();
    
    if (lowerPrompt.includes('–ø–ª–∞–Ω') || lowerPrompt.includes('—Å—Ö–µ–º–∞') || lowerPrompt.includes('—á–µ—Ä—Ç–µ–∂')) {
      return {
        type: 'plan',
        colors: {
          background: '#FFFFFF',
          lines: '#000000',
          accent: '#4169E1',
          highlight: '#FFD700'
        },
        effects: ['clean', 'precise', 'technical']
      };
    } else if (lowerPrompt.includes('—Ñ–æ—Ç–æ') || lowerPrompt.includes('–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ')) {
      return {
        type: 'photo',
        colors: {
          background: '#F8F8FF',
          lines: '#2C2C2C',
          accent: '#FF6B35',
          highlight: '#87CEEB'
        },
        effects: ['natural', 'realistic', 'detailed']
      };
    } else {
      return {
        type: 'artistic',
        colors: {
          background: '#FFF8DC',
          lines: '#8B4513',
          accent: '#D2691E',
          highlight: '#F4A460'
        },
        effects: ['artistic', 'creative', 'stylized']
      };
    }
  },

  /**
   * –°–æ–∑–¥–∞–µ—Ç –±–∞–∑–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
   * @param {number} width - –®–∏—Ä–∏–Ω–∞
   * @param {number} height - –í—ã—Å–æ—Ç–∞
   * @param {Object} style - –°—Ç–∏–ª—å
   * @returns {Promise<Buffer>} –ë–∞–∑–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
   */
  async createBaseImage(width, height, style) {
    const svg = `
      <svg width="${width}" height="${height}" xmlns="http://www.w3.org/2000/svg">
        <defs>
          <linearGradient id="bg" x1="0%" y1="0%" x2="100%" y2="100%">
            <stop offset="0%" style="stop-color:${style.colors.background};stop-opacity:1" />
            <stop offset="100%" style="stop-color:${style.colors.accent};stop-opacity:0.1" />
          </linearGradient>
        </defs>
        <rect width="100%" height="100%" fill="url(#bg)" />
      </svg>
    `;
    
    return await sharp(Buffer.from(svg))
      .png()
      .toBuffer();
  },

  /**
   * –ü—Ä–∏–º–µ–Ω—è–µ—Ç —ç—Å–∫–∏–∑ –∫ –±–∞–∑–æ–≤–æ–º—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
   * @param {Buffer} baseImage - –ë–∞–∑–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
   * @param {Object} sketchImage - –≠—Å–∫–∏–∑
   * @param {Object} style - –°—Ç–∏–ª—å
   * @returns {Promise<Buffer>} –†–µ–∑—É–ª—å—Ç–∞—Ç
   */
  async applySketch(baseImage, sketchImage, style) {
    // –°–æ–∑–¥–∞–µ–º —Ü–≤–µ—Ç–Ω—É—é –≤–µ—Ä—Å–∏—é —ç—Å–∫–∏–∑–∞
    const coloredSketch = await sketchImage
      .greyscale()
      .normalize()
      .png()
      .toBuffer();
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç–∏–ª—å
    const result = await sharp(baseImage)
      .composite([
        {
          input: coloredSketch,
          blend: 'multiply',
          opacity: 0.8
        }
      ])
      .png()
      .toBuffer();
    
    return result;
  }
};