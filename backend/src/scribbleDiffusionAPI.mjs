import fetch from 'node-fetch';
import fs from 'fs';

/**
 * –ú–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å ScribbleDiffusion API
 */
export const scribbleDiffusionAPI = {
  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API
   * @returns {boolean} –î–æ—Å—Ç—É–ø–µ–Ω –ª–∏ API
   */
  get isAvailable() {
    return !!process.env.SCRIBBLE_DIFFUSION_API_URL;
  },

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ ScribbleDiffusion API
   * @param {string} sketchPath - –ü—É—Ç—å –∫ —ç—Å–∫–∏–∑—É
   * @param {string} prompt - –ü—Ä–æ–º–ø—Ç
   * @returns {Promise<Buffer>} –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
   */
  async generateImage(sketchPath, prompt) {
    try {
      console.log('üé® –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ ScribbleDiffusion API');
      console.log('–≠—Å–∫–∏–∑:', sketchPath);
      console.log('–ü—Ä–æ–º–ø—Ç:', prompt);

      if (!this.isAvailable) {
        throw new Error('ScribbleDiffusion API –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
      }

      // –ß–∏—Ç–∞–µ–º —ç—Å–∫–∏–∑
      const sketchBuffer = fs.readFileSync(sketchPath);
      const sketchBase64 = sketchBuffer.toString('base64');

      // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è API
      const requestData = {
        image: sketchBase64,
        prompt: prompt,
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∑–¥–µ—Å—å
        num_inference_steps: 20,
        guidance_scale: 7.5
      };

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ API
      const response = await fetch(process.env.SCRIBBLE_DIFFUSION_API_URL, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${process.env.SCRIBBLE_DIFFUSION_API_KEY || ''}`
        },
        body: JSON.stringify(requestData)
      });

      if (!response.ok) {
        const errorText = await response.text();
        throw new Error(`ScribbleDiffusion API –æ—à–∏–±–∫–∞: ${response.status} - ${errorText}`);
      }

      // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
      const result = await response.json();
      
      // –ï—Å–ª–∏ API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç base64 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
      if (result.image) {
        const imageBuffer = Buffer.from(result.image, 'base64');
        console.log('‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ –æ—Ç ScribbleDiffusion API');
        return imageBuffer;
      }
      
      // –ï—Å–ª–∏ API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
      if (result.url) {
        const imageResponse = await fetch(result.url);
        if (!imageResponse.ok) {
          throw new Error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: ${imageResponse.status}`);
        }
        const imageBuffer = await imageResponse.buffer();
        console.log('‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –æ—Ç ScribbleDiffusion API');
        return imageBuffer;
      }

      throw new Error('–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç ScribbleDiffusion API');

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ ScribbleDiffusion API:', error);
      throw error;
    }
  },

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å API
   * @returns {Promise<Object>} –°—Ç–∞—Ç—É—Å API
   */
  async checkStatus() {
    try {
      if (!this.isAvailable) {
        return { available: false, error: 'API URL –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω' };
      }

      const response = await fetch(`${process.env.SCRIBBLE_DIFFUSION_API_URL}/health`, {
        method: 'GET',
        headers: {
          'Authorization': `Bearer ${process.env.SCRIBBLE_DIFFUSION_API_KEY || ''}`
        }
      });

      if (response.ok) {
        return { available: true, status: 'healthy' };
      } else {
        return { available: false, error: `API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: ${response.status}` };
      }
    } catch (error) {
      return { available: false, error: error.message };
    }
  }
};
