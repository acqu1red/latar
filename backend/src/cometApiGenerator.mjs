import fetch from 'node-fetch';
import FormData from 'form-data';
import fs from 'fs';
import path from 'path';

// –ü—Ä–æ–º–ø—Ç—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ä–µ–∂–∏–º–æ–≤
const PROMPTS = {
  withoutFurniture: `You are a professional architectural draftsman, and people's lives depend on your work. Redraw this 2D apartment floor plan into a high-quality technical drawing, accurately preserving all proportions, layout, and room dimensions.

INPUT NORMALIZATION ‚Äî STRAIGHTEN & RECTIFY (REQUIRED):
‚Ä¢ If the source photo/scan is rotated, skewed, or shot at an angle, FIRST correct it:
  ‚Äì Rotate to the nearest cardinal angle (0¬∞, 90¬∞, 180¬∞, 270¬∞) so any text reads upright.
  ‚Äì Deskew so horizontal/vertical walls are exactly horizontal/vertical (orthogonal grid).
  ‚Äì Apply perspective rectification to rebuild a clean orthographic, top-down plan (no foreshortening).
‚Ä¢ Preserve relative proportions while rectifying; do not invent or move openings/walls.
‚Ä¢ Remove background, shadows and paper edges; redraw as a clean vector-like plan.

CANVAS FIT ‚Äî UNIFORM SCALE & MARGINS (STRICT):
‚Ä¢ After rectification, CENTER the entire plan as a single unit.
‚Ä¢ UNIFORMLY SCALE (isotropic) the plan to be as large as possible while keeping a HARD MINIMUM MARGIN of ‚â•50px from the nearest geometry (any line, hatch, or text) to each image edge.
‚Ä¢ If necessary, slightly increase or decrease overall scale to satisfy the ‚â•50px margin on ALL sides and keep all text fully inside rooms.
‚Ä¢ Do NOT crop any part of the plan. Do NOT stretch non-uniformly. Maintain aspect ratio.
‚Ä¢ HARD RULE: No line, hatch, or text may touch or cross the image boundary.

STRUCTURAL ELEMENTS:

External load-bearing walls: thickness 4-5px, black fill
Internal load-bearing walls: thickness 3px, black fill
Partitions: thickness 2px, black fill
Doors: show opening arc (1px dashed line) + shortened door leaf
Windows: double frame 2px + diagonal hatching of glass at 45¬∞
Balconies/loggias: determine from context (protruding elements, glazing, railings)

VISUAL STYLE:

Background: pure white (#FFFFFF)
Lines and fills: pure black (#000000)
No shadows, gradients, or gray tones
Size: 1200x1200px, JPG quality 95%

FURNITURE AND EQUIPMENT:

DRAW ONLY the furniture and sanitary fixtures that are explicitly visible in the provided source image. DO NOT add, infer, or complete any furniture that is not clearly shown.
Do NOT add beds, sofas, tables, chairs, kitchen units, wardrobes, or any other items unless they are explicitly present in the source image.
If uncertain whether an item exists, leave the room empty.
Preserve all existing furniture as simple geometric shapes
Furniture proportions must correspond to real dimensions
Furniture line thickness: 1px

TEXT AND LABELS:

Only room areas in format "12.3 m¬≤"
Font: Arial, size 12px, black color
Place in center of rooms

COMPOSITION:

Plan centered in image
Margins from edges minimum 50px
No borders, titles, or dimension lines`,

  withFurniture: `You are a professional architectural draftsman, and people's lives depend on your work.
Redraw this 2D apartment floor plan into a high-quality technical drawing, accurately preserving
all proportions, layout, and room dimensions. Do NOT change the layout or positions of walls,
doors, windows, plumbing, or any items already drawn in the source image.
INPUT NORMALIZATION ‚Äî STRAIGHTEN & RECTIFY (REQUIRED):
‚Ä¢ If the source photo/scan is rotated, skewed, or shot at an angle, FIRST correct it:
‚Äì Rotate to the nearest cardinal angle (0¬∞, 90¬∞, 180¬∞, 270¬∞) so any text reads upright.
‚Äì Deskew so horizontal/vertical walls are exactly horizontal/vertical (orthogonal grid).
‚Äì Apply perspective rectification to rebuild a clean orthographic, top-down plan (no
foreshortening).
‚Ä¢ Preserve relative proportions while rectifying; do not invent or move openings/walls.
‚Ä¢ Remove background, shadows and paper edges; redraw as a clean vector-like plan.
STRUCTURAL ELEMENTS:
External load-bearing walls: thickness 4‚Äì5px, black fill
Internal load-bearing walls: thickness 3px, black fill
Partitions: thickness 2px, black fill
Doors: show opening arc (1px dashed line) + shortened door leaf; respect swing
clearances
Windows: double frame 2px + diagonal hatching of glass at 45¬∞
Balconies/loggias: detect from context (protrusions, glazing, rails)
VISUAL STYLE:
Background: pure white (#FFFFFF)
Lines and fills: pure black (#000000)
No shadows, gradients, or gray tones
Canvas size: 1200√ó1200px, JPG quality 95%
FURNITURE POLICY ‚Äî PRESERVE + COMPLETE (MANDATORY &
DIVERSITY):
1) Preserve ALL existing furniture/sanitary fixtures exactly as in the source image.
2) THEN add missing furniture so each room is functional and visually complete.
3) MANDATORY: Every enclosed room (including hallways, corridors, walk-in closets,
storage/pantry, utility, WC, bathrooms) must contain at least the minimum set listed below for its
type.
4) DIVERSITY: Each furnished room must include at least TWO different furniture
categories (e.g., seating + storage; sleeping + storage; work + storage).
5) QUANTITY: Prefer more (but sensible) furniture. After placing the minimum set, add
optional items until any of these limits would be violated:
‚Ä¢ main walkway width < 80 cm, or
‚Ä¢ door/window swing/clearances blocked, or
‚Ä¢ furniture footprint would exceed ~35% of the room area (soft cap).
6) SCALE/STYLE: Use simple 2D icons with realistic proportions; align to walls;
Furniture line thickness: 1px.
ROOM-BY -ROOM MINIMUMS (add OPTIONAL items if space allows):
‚Ä¢ Entry / Hallway (MIN 2): wardrobe/closet (D‚âà60 cm) + bench/console/shoe cabinet.
OPTIONAL: mirror panel, coat rack.
‚Ä¢ Corridor (MIN 1): narrow console/shelf (D‚â§30 cm).
OPTIONAL: wall-mounted storage, mirror panel.
‚Ä¢ Living Room (MIN 3): sofa (W‚âà180‚Äì240 cm) + coffee table + media unit/TV stand.
OPTIONAL: armchair, bookshelf, sideboard, desk+chair.
‚Ä¢ Kitchen/Dining (MIN 4): base cabinets (D‚âà60 cm) incl. sink + cooktop + fridge +
dining table (120‚Äì160√ó75‚Äì90 cm) with 2‚Äì6 chairs.
OPTIONAL: wall cabinets, island or bar with stools.
‚Ä¢ Bedroom ‚Äî Double (MIN 4): double bed (140‚Äì160√ó200 cm) + 2 nightstands +
wardrobe (D‚âà60 cm).
OPTIONAL: dresser/commode, desk+chair.
‚Ä¢ Bedroom ‚Äî Single/Kids (MIN 3): single bed (90√ó200 cm) + wardrobe + desk+chair.
OPTIONAL: bookcase, nightstand.
‚Ä¢ Home Office (MIN 3): desk + chair + bookshelf/cabinet.
OPTIONAL: sofa/sofa-bed, filing cabinet.
‚Ä¢ Bathroom (combined) (MIN 3): toilet + washbasin + shower (80√ó80 cm) OR bathtub
(170√ó70 cm).
OPTIONAL: tall cabinet/shelves, washing machine (‚âà60√ó60 cm), towel rail.
‚Ä¢ WC (separate) (MIN 2): toilet + small washbasin.
OPTIONAL: shelf/cabinet.
‚Ä¢ Utility/Laundry (MIN 2): washer (‚âà60√ó60 cm) + storage shelf/cabinet.
OPTIONAL: dryer, ironing board.
‚Ä¢ Storage/Pantry/Closet (MIN 1): shelving units along one wall.
‚Ä¢ Balcony/Loggia (MIN 1 if feasible): one compact item (folding chair or planter). If
adding ANY item would block access or glazing, leave empty.
PLACEMENT & CLEARANCES:
‚Ä¢ Keep main walkways ‚â•80 cm where possible.
‚Ä¢ Do not block door swings, windows, radiators, or plumbing fixtures.
‚Ä¢ Typical clearances: in front of wardrobes ‚â•75 cm; around double bed ‚â•60 cm on
accessible sides; in front of toilet ‚â•60 cm with side clearance ‚â•15 cm.
‚Ä¢ If the minimum set cannot fit, use compact alternatives (e.g., shower instead of bathtub,
narrower wardrobe). If absolutely impossible, place at least ONE smallest appropriate item for
that room type.
TEXT AND LABELS:
Only room areas in format "12.3 m¬≤"
Font: Arial, 12 px, black; centered within rooms with furniture arranged to keep the label
legible
COMPOSITION:
Plan centered in image
Margins ‚â•50 px from canvas edges
No borders, titles, or dimension lines`
};

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –ø–ª–∞–Ω –∫–≤–∞—Ä—Ç–∏—Ä—ã —Å –ø–æ–º–æ—â—å—é COMETAPI nano-banana-hd
 * @param {string} imagePath - –ü—É—Ç—å –∫ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–º—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
 * @param {string} mode - –†–µ–∂–∏–º: 'withFurniture' –∏–ª–∏ 'withoutFurniture'
 * @returns {Promise<Buffer>} - –ë—É—Ñ–µ—Ä —Å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
 */
export async function generateTechnicalPlan(imagePath, mode = 'withoutFurniture') {
  const apiKey = process.env.COMETAPI_API_KEY;
  
  if (!apiKey) {
    throw new Error('COMETAPI_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
  }

  if (!fs.existsSync(imagePath)) {
    throw new Error(`–§–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω: ${imagePath}`);
  }

  const prompt = PROMPTS[mode];
  if (!prompt) {
    throw new Error(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–µ–∂–∏–º: ${mode}`);
  }

  try {
    console.log(`üé® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –ø–ª–∞–Ω–∞ (—Ä–µ–∂–∏–º: ${mode})`);
    console.log(`üìÅ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: ${imagePath}`);
    
    // –°–æ–∑–¥–∞–µ–º FormData –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
    const formData = new FormData();
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    formData.append('image', fs.createReadStream(imagePath));
    
    // –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
    formData.append('model', 'nano-banana-hd');
    formData.append('prompt', prompt);
    formData.append('max_tokens', '1000');
    formData.append('temperature', '0.1');
    formData.append('top_p', '0.9');
    formData.append('stream', 'false');

    console.log('üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ COMETAPI...');
    
    const response = await fetch('https://api.cometapi.com/v1/image/generate', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${apiKey}`,
        ...formData.getHeaders()
      },
      body: formData
    });

    if (!response.ok) {
      const errorText = await response.text();
      console.error('‚ùå –û—à–∏–±–∫–∞ COMETAPI:', response.status, errorText);
      throw new Error(`COMETAPI –æ—à–∏–±–∫–∞ ${response.status}: ${errorText}`);
    }

    const result = await response.json();
    
    if (!result.success) {
      throw new Error(`COMETAPI –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É: ${result.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
    }

    if (!result.data || !result.data.image) {
      throw new Error('COMETAPI –Ω–µ –≤–µ—Ä–Ω—É–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ');
    }

    // –î–µ–∫–æ–¥–∏—Ä—É–µ–º base64 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    const imageBuffer = Buffer.from(result.data.image, 'base64');
    
    console.log('‚úÖ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –ø–ª–∞–Ω —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω');
    console.log(`üìä –†–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: ${imageBuffer.length} –±–∞–π—Ç`);
    
    return imageBuffer;

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –ø–ª–∞–Ω–∞:', error);
    throw error;
  }
}

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—á–∏—â–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (—É–¥–∞–ª–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–æ–≤) —Å –ø–æ–º–æ—â—å—é COMETAPI
 * @param {Object} options - –û–ø—Ü–∏–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
 * @param {string[]} options.imagePaths - –ú–∞—Å—Å–∏–≤ –ø—É—Ç–µ–π –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º
 * @returns {Promise<Buffer[]>} - –ú–∞—Å—Å–∏–≤ –±—É—Ñ–µ—Ä–æ–≤ —Å –æ—á–∏—â–µ–Ω–Ω—ã–º–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
 */
export async function generateCleanupImage({ imagePaths }) {
  const apiKey = process.env.COMETAPI_API_KEY;
  
  if (!apiKey) {
    throw new Error('COMETAPI_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
  }

  if (!imagePaths || imagePaths.length === 0) {
    throw new Error('–ù–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã –ø—É—Ç–∏ –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º');
  }

  const cleanupPrompt = `You are a professional image editor specializing in object removal and room cleanup. Your task is to remove all furniture, objects, and personal items from the provided room image while preserving the architectural structure, walls, doors, windows, and floor.

INSTRUCTIONS:
1. Remove ALL furniture, appliances, decorations, and personal items
2. Keep all architectural elements: walls, doors, windows, floor
3. Fill removed areas with appropriate floor/wall textures
4. Maintain realistic lighting and shadows
5. Preserve the original perspective and composition
6. Output should look like an empty, clean room ready for renovation

TECHNICAL REQUIREMENTS:
- Output format: JPG, 1200x1200px, quality 95%
- Background: clean white/neutral
- No artifacts or obvious editing marks
- Maintain original room proportions`;

  const results = [];

  for (let i = 0; i < imagePaths.length; i++) {
    const imagePath = imagePaths[i];
    
    if (!fs.existsSync(imagePath)) {
      throw new Error(`–§–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω: ${imagePath}`);
    }

    try {
      console.log(`üßπ –û—á–∏—Å—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è ${i + 1}/${imagePaths.length}: ${imagePath}`);
      
      // –°–æ–∑–¥–∞–µ–º FormData –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
      const formData = new FormData();
      
      // –î–æ–±–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
      formData.append('image', fs.createReadStream(imagePath));
      
      // –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
      formData.append('model', 'nano-banana-hd');
      formData.append('prompt', cleanupPrompt);
      formData.append('max_tokens', '1000');
      formData.append('temperature', '0.1');
      formData.append('top_p', '0.9');
      formData.append('stream', 'false');

      console.log('üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ COMETAPI –¥–ª—è –æ—á–∏—Å—Ç–∫–∏...');
      
      const response = await fetch('https://api.cometapi.com/v1/image/generate', {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${apiKey}`,
          ...formData.getHeaders()
        },
        body: formData
      });

      if (!response.ok) {
        const errorText = await response.text();
        console.error('‚ùå –û—à–∏–±–∫–∞ COMETAPI –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ:', response.status, errorText);
        throw new Error(`COMETAPI –æ—à–∏–±–∫–∞ ${response.status}: ${errorText}`);
      }

      const result = await response.json();
      
      if (!result.success) {
        throw new Error(`COMETAPI –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É: ${result.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
      }

      if (!result.data || !result.data.image) {
        throw new Error('COMETAPI –Ω–µ –≤–µ—Ä–Ω—É–ª –æ—á–∏—â–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ');
      }

      // –î–µ–∫–æ–¥–∏—Ä—É–µ–º base64 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
      const imageBuffer = Buffer.from(result.data.image, 'base64');
      
      console.log('‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω–æ');
      console.log(`üìä –†–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: ${imageBuffer.length} –±–∞–π—Ç`);
      
      results.push(imageBuffer);

    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è ${i + 1}:`, error);
      throw error;
    }
  }

  return results;
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å COMETAPI
 * @returns {Promise<boolean>}
 */
export async function checkCometApiHealth() {
  const apiKey = process.env.COMETAPI_API_KEY;
  
  if (!apiKey) {
    return false;
  }

  try {
    const response = await fetch('https://api.cometapi.com/v1/models', {
      method: 'GET',
      headers: {
        'Authorization': `Bearer ${apiKey}`,
        'Content-Type': 'application/json'
      }
    });

    return response.ok;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ COMETAPI:', error);
    return false;
  }
}
