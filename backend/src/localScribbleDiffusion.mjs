/**
 * –õ–æ–∫–∞–ª—å–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è ScribbleDiffusion –±–µ–∑ Replicate API
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç Stable Diffusion –∏ ControlNet –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏–∑ —ç—Å–∫–∏–∑–æ–≤
 */

import fetch from 'node-fetch';
import fs from 'fs';
import sharp from 'sharp';

/**
 * –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
 */
const LOCAL_CONFIG = {
  // Hugging Face API –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ Stable Diffusion
  HUGGINGFACE_API_URL: process.env.HUGGINGFACE_API_URL || 'http://localhost:7860',
  
  // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ - Ollama API
  OLLAMA_API_URL: process.env.OLLAMA_API_URL || 'http://localhost:11434',
  
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–∏ –º—ã –ª–æ–∫–∞–ª—å–Ω—É—é –º–æ–¥–µ–ª—å
  USE_LOCAL_MODEL: process.env.USE_LOCAL_MODEL === 'true',
  
  // Fallback –Ω–∞ —É–ª—É—á—à–µ–Ω–Ω—É—é –ª–æ–∫–∞–ª—å–Ω—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
  FALLBACK_TO_ENHANCED: true
};

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ —ç—Å–∫–∏–∑–∞ –∏—Å–ø–æ–ª—å–∑—É—è –ª–æ–∫–∞–ª—å–Ω—É—é –º–æ–¥–µ–ª—å
 * @param {string} sketchPath - –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —ç—Å–∫–∏–∑–∞
 * @param {string} prompt - –¢–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∂–µ–ª–∞–µ–º–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
 * @returns {Promise<Buffer>} –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
 */
export async function generateLocalScribbleDiffusion(sketchPath, prompt) {
  try {
    console.log('üé® –õ–æ–∫–∞–ª—å–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è ScribbleDiffusion:', sketchPath);
    console.log('–ü—Ä–æ–º–ø—Ç:', prompt);

    // –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –º–µ—Ç–æ–¥—ã –ª–æ–∫–∞–ª—å–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    if (LOCAL_CONFIG.USE_LOCAL_MODEL) {
      try {
        // –ú–µ—Ç–æ–¥ 1: Hugging Face API
        const result = await generateWithHuggingFace(sketchPath, prompt);
        if (result) return result;
      } catch (error) {
        console.log('‚ö†Ô∏è Hugging Face –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–æ–±—É–µ–º Ollama...');
      }

      try {
        // –ú–µ—Ç–æ–¥ 2: Ollama API
        const result = await generateWithOllama(sketchPath, prompt);
        if (result) return result;
      } catch (error) {
        console.log('‚ö†Ô∏è Ollama –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—É—é –ª–æ–∫–∞–ª—å–Ω—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é...');
      }
    }

    // –ú–µ—Ç–æ–¥ 3: –£–ª—É—á—à–µ–Ω–Ω–∞—è –ª–æ–∫–∞–ª—å–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è (fallback)
    if (LOCAL_CONFIG.FALLBACK_TO_ENHANCED) {
      return await generateEnhancedLocal(sketchPath, prompt);
    }

    throw new Error('–í—Å–µ –º–µ—Ç–æ–¥—ã –ª–æ–∫–∞–ª—å–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ ScribbleDiffusion:', error);
    throw error;
  }
}

/**
 * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ Hugging Face API
 * @param {string} sketchPath - –ü—É—Ç—å –∫ —ç—Å–∫–∏–∑—É
 * @param {string} prompt - –ü—Ä–æ–º–ø—Ç
 * @returns {Promise<Buffer|null>} –†–µ–∑—É–ª—å—Ç–∞—Ç –∏–ª–∏ null
 */
async function generateWithHuggingFace(sketchPath, prompt) {
  try {
    console.log('ü§ó –ü—Ä–æ–±—É–µ–º Hugging Face API...');
    
    // –ß–∏—Ç–∞–µ–º —ç—Å–∫–∏–∑
    const sketchBuffer = fs.readFileSync(sketchPath);
    const sketchBase64 = sketchBuffer.toString('base64');
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ Hugging Face API
    const response = await fetch(`${LOCAL_CONFIG.HUGGINGFACE_API_URL}/api/predict`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        inputs: {
          image: `data:image/png;base64,${sketchBase64}`,
          prompt: prompt,
          num_inference_steps: 20,
          guidance_scale: 7.5,
          controlnet_conditioning_scale: 1.0
        }
      })
    });

    if (!response.ok) {
      throw new Error(`Hugging Face API error: ${response.status}`);
    }

    const result = await response.json();
    
    if (result.output && result.output.length > 0) {
      const imageResponse = await fetch(result.output[0]);
      const imageBuffer = await imageResponse.buffer();
      console.log('‚úÖ Hugging Face –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞');
      return imageBuffer;
    }

    return null;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ Hugging Face:', error.message);
    return null;
  }
}

/**
 * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ Ollama API
 * @param {string} sketchPath - –ü—É—Ç—å –∫ —ç—Å–∫–∏–∑—É
 * @param {string} prompt - –ü—Ä–æ–º–ø—Ç
 * @returns {Promise<Buffer|null>} –†–µ–∑—É–ª—å—Ç–∞—Ç –∏–ª–∏ null
 */
async function generateWithOllama(sketchPath, prompt) {
  try {
    console.log('ü¶ô –ü—Ä–æ–±—É–µ–º Ollama API...');
    
    // –ß–∏—Ç–∞–µ–º —ç—Å–∫–∏–∑
    const sketchBuffer = fs.readFileSync(sketchPath);
    const sketchBase64 = sketchBuffer.toString('base64');
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ Ollama API
    const response = await fetch(`${LOCAL_CONFIG.OLLAMA_API_URL}/api/generate`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        model: 'stable-diffusion',
        prompt: `${prompt}, based on this sketch: data:image/png;base64,${sketchBase64}`,
        stream: false
      })
    });

    if (!response.ok) {
      throw new Error(`Ollama API error: ${response.status}`);
    }

    const result = await response.json();
    
    if (result.response) {
      // Ollama –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç base64 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
      const imageBuffer = Buffer.from(result.response, 'base64');
      console.log('‚úÖ Ollama –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞');
      return imageBuffer;
    }

    return null;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ Ollama:', error.message);
    return null;
  }
}

/**
 * –£–ª—É—á—à–µ–Ω–Ω–∞—è –ª–æ–∫–∞–ª—å–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è (fallback)
 * @param {string} sketchPath - –ü—É—Ç—å –∫ —ç—Å–∫–∏–∑—É
 * @param {string} prompt - –ü—Ä–æ–º–ø—Ç
 * @returns {Promise<Buffer>} –†–µ–∑—É–ª—å—Ç–∞—Ç
 */
async function generateEnhancedLocal(sketchPath, prompt) {
  console.log('üé® –£–ª—É—á—à–µ–Ω–Ω–∞—è –ª–æ–∫–∞–ª—å–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è...');
  
  // –ß–∏—Ç–∞–µ–º —ç—Å–∫–∏–∑
  const sketchBuffer = fs.readFileSync(sketchPath);
  const sketchImage = sharp(sketchBuffer);
  const metadata = await sketchImage.metadata();
  
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ –ø—Ä–æ–º–ø—Ç—É
  const isFurniturePlan = prompt.toLowerCase().includes('furniture') || 
                         prompt.toLowerCase().includes('with furniture');
  
  if (isFurniturePlan) {
    return await createAdvancedFurniturePlan(sketchImage, metadata, prompt);
  } else {
    return await createAdvancedPlan(sketchImage, metadata, prompt);
  }
}

/**
 * –°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –ø–ª–∞–Ω –±–µ–∑ –º–µ–±–µ–ª–∏
 * @param {Object} sketchImage - Sharp –æ–±—ä–µ–∫—Ç —ç—Å–∫–∏–∑–∞
 * @param {Object} metadata - –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
 * @param {string} prompt - –ü—Ä–æ–º–ø—Ç
 * @returns {Promise<Buffer>} –†–µ–∑—É–ª—å—Ç–∞—Ç
 */
async function createAdvancedPlan(sketchImage, metadata, prompt) {
  const { width, height } = metadata;
  
  // –°–æ–∑–¥–∞–µ–º –±–µ–ª—ã–π —Ñ–æ–Ω
  const whiteBackground = await sharp({
    create: {
      width: width,
      height: height,
      channels: 3,
      background: { r: 255, g: 255, b: 255 }
    }
  })
  .png()
  .toBuffer();
  
  // –°–æ–∑–¥–∞–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–µ –ª–∏–Ω–∏–∏ –ø–ª–∞–Ω–∞
  const planLines = await sketchImage
    .greyscale()
    .normalize()
    .sharpen({ sigma: 1.5, m1: 0.5, m2: 3.0, x1: 2, y2: 10 })
    .threshold(140)
    .png()
    .toBuffer();
  
  // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –ø–ª–∞–Ω–∞
  const planElements = await createPlanElements(width, height);
  
  // –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã
  const result = await sharp(whiteBackground)
    .composite([
      {
        input: planLines,
        blend: 'multiply',
        opacity: 1.0
      },
      {
        input: planElements,
        blend: 'multiply',
        opacity: 0.9
      }
    ])
    .png()
    .toBuffer();
  
  return result;
}

/**
 * –°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –ø–ª–∞–Ω —Å –º–µ–±–µ–ª—å—é
 * @param {Object} sketchImage - Sharp –æ–±—ä–µ–∫—Ç —ç—Å–∫–∏–∑–∞
 * @param {Object} metadata - –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
 * @param {string} prompt - –ü—Ä–æ–º–ø—Ç
 * @returns {Promise<Buffer>} –†–µ–∑—É–ª—å—Ç–∞—Ç
 */
async function createAdvancedFurniturePlan(sketchImage, metadata, prompt) {
  const { width, height } = metadata;
  
  // –°–æ–∑–¥–∞–µ–º –±–µ–ª—ã–π —Ñ–æ–Ω
  const whiteBackground = await sharp({
    create: {
      width: width,
      height: height,
      channels: 3,
      background: { r: 255, g: 255, b: 255 }
    }
  })
  .png()
  .toBuffer();
  
  // –°–æ–∑–¥–∞–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–µ –ª–∏–Ω–∏–∏ –ø–ª–∞–Ω–∞
  const planLines = await sketchImage
    .greyscale()
    .normalize()
    .sharpen({ sigma: 1.5, m1: 0.5, m2: 3.0, x1: 2, y2: 10 })
    .threshold(140)
    .png()
    .toBuffer();
  
  // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –ø–ª–∞–Ω–∞
  const planElements = await createPlanElements(width, height);
  
  // –°–æ–∑–¥–∞–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –º–µ–±–µ–ª–∏
  const furnitureSymbols = await createAdvancedFurnitureSymbols(width, height);
  
  // –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã
  const result = await sharp(whiteBackground)
    .composite([
      {
        input: planLines,
        blend: 'multiply',
        opacity: 1.0
      },
      {
        input: planElements,
        blend: 'multiply',
        opacity: 0.9
      },
      {
        input: furnitureSymbols,
        blend: 'multiply',
        opacity: 0.8
      }
    ])
    .png()
    .toBuffer();
  
  return result;
}

/**
 * –°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –ø–ª–∞–Ω–∞
 * @param {number} width - –®–∏—Ä–∏–Ω–∞
 * @param {number} height - –í—ã—Å–æ—Ç–∞
 * @returns {Promise<Buffer>} –≠–ª–µ–º–µ–Ω—Ç—ã –ø–ª–∞–Ω–∞
 */
async function createPlanElements(width, height) {
  // –°–æ–∑–¥–∞–µ–º SVG —Å –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–º–∏ —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ –ø–ª–∞–Ω–∞
  const svg = `
    <svg width="${width}" height="${height}" xmlns="http://www.w3.org/2000/svg">
      <defs>
        <pattern id="planElements" patternUnits="userSpaceOnUse" width="100" height="100">
          <rect width="100" height="100" fill="white"/>
          <!-- –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –ø–ª–∞–Ω–∞ -->
          <line x1="10" y1="10" x2="90" y2="10" stroke="#000000" stroke-width="1" opacity="0.1"/>
          <line x1="10" y1="20" x2="90" y2="20" stroke="#000000" stroke-width="1" opacity="0.1"/>
          <line x1="10" y1="30" x2="90" y2="30" stroke="#000000" stroke-width="1" opacity="0.1"/>
          <line x1="10" y1="40" x2="90" y2="40" stroke="#000000" stroke-width="1" opacity="0.1"/>
          <line x1="10" y1="50" x2="90" y2="50" stroke="#000000" stroke-width="1" opacity="0.1"/>
          <line x1="10" y1="60" x2="90" y2="60" stroke="#000000" stroke-width="1" opacity="0.1"/>
          <line x1="10" y1="70" x2="90" y2="70" stroke="#000000" stroke-width="1" opacity="0.1"/>
          <line x1="10" y1="80" x2="90" y2="80" stroke="#000000" stroke-width="1" opacity="0.1"/>
          <line x1="10" y1="90" x2="90" y2="90" stroke="#000000" stroke-width="1" opacity="0.1"/>
          
          <line x1="10" y1="10" x2="10" y2="90" stroke="#000000" stroke-width="1" opacity="0.1"/>
          <line x1="20" y1="10" x2="20" y2="90" stroke="#000000" stroke-width="1" opacity="0.1"/>
          <line x1="30" y1="10" x2="30" y2="90" stroke="#000000" stroke-width="1" opacity="0.1"/>
          <line x1="40" y1="10" x2="40" y2="90" stroke="#000000" stroke-width="1" opacity="0.1"/>
          <line x1="50" y1="10" x2="50" y2="90" stroke="#000000" stroke-width="1" opacity="0.1"/>
          <line x1="60" y1="10" x2="60" y2="90" stroke="#000000" stroke-width="1" opacity="0.1"/>
          <line x1="70" y1="10" x2="70" y2="90" stroke="#000000" stroke-width="1" opacity="0.1"/>
          <line x1="80" y1="10" x2="80" y2="90" stroke="#000000" stroke-width="1" opacity="0.1"/>
          <line x1="90" y1="10" x2="90" y2="90" stroke="#000000" stroke-width="1" opacity="0.1"/>
        </pattern>
      </defs>
      <rect width="100%" height="100%" fill="url(#planElements)" opacity="0.3"/>
    </svg>
  `;
  
  return await sharp(Buffer.from(svg))
    .png()
    .toBuffer();
}

/**
 * –°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ —Å–∏–º–≤–æ–ª—ã –º–µ–±–µ–ª–∏
 * @param {number} width - –®–∏—Ä–∏–Ω–∞
 * @param {number} height - –í—ã—Å–æ—Ç–∞
 * @returns {Promise<Buffer>} –°–∏–º–≤–æ–ª—ã –º–µ–±–µ–ª–∏
 */
async function createAdvancedFurnitureSymbols(width, height) {
  // –°–æ–∑–¥–∞–µ–º SVG —Å –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏ –º–µ–±–µ–ª–∏
  const svg = `
    <svg width="${width}" height="${height}" xmlns="http://www.w3.org/2000/svg">
      <defs>
        <pattern id="advancedFurniture" patternUnits="userSpaceOnUse" width="80" height="80">
          <rect width="80" height="80" fill="white"/>
          <!-- –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ —Å–∏–º–≤–æ–ª—ã –º–µ–±–µ–ª–∏ -->
          <!-- –ö—Ä–æ–≤–∞—Ç—å -->
          <rect x="10" y="15" width="25" height="15" fill="none" stroke="#2C3E50" stroke-width="2"/>
          <rect x="12" y="17" width="21" height="11" fill="none" stroke="#2C3E50" stroke-width="1"/>
          <circle cx="22" cy="22" r="2" fill="#2C3E50"/>
          
          <!-- –î–∏–≤–∞–Ω -->
          <rect x="40" y="10" width="30" height="20" fill="none" stroke="#2C3E50" stroke-width="2"/>
          <rect x="42" y="12" width="26" height="16" fill="none" stroke="#2C3E50" stroke-width="1"/>
          <line x1="45" y1="15" x2="65" y2="15" stroke="#2C3E50" stroke-width="1"/>
          
          <!-- –°—Ç–æ–ª -->
          <rect x="15" y="40" width="20" height="15" fill="none" stroke="#2C3E50" stroke-width="2"/>
          <rect x="17" y="42" width="16" height="11" fill="none" stroke="#2C3E50" stroke-width="1"/>
          <circle cx="25" cy="47" r="1" fill="#2C3E50"/>
          
          <!-- –°—Ç—É–ª -->
          <rect x="45" y="40" width="8" height="8" fill="none" stroke="#2C3E50" stroke-width="2"/>
          <rect x="47" y="42" width="4" height="4" fill="none" stroke="#2C3E50" stroke-width="1"/>
          
          <!-- –®–∫–∞—Ñ -->
          <rect x="60" y="40" width="12" height="20" fill="none" stroke="#2C3E50" stroke-width="2"/>
          <rect x="62" y="42" width="8" height="16" fill="none" stroke="#2C3E50" stroke-width="1"/>
          <line x1="64" y1="45" x2="68" y2="45" stroke="#2C3E50" stroke-width="1"/>
          <line x1="64" y1="50" x2="68" y2="50" stroke="#2C3E50" stroke-width="1"/>
          <line x1="64" y1="55" x2="68" y2="55" stroke="#2C3E50" stroke-width="1"/>
        </pattern>
      </defs>
      <rect width="100%" height="100%" fill="url(#advancedFurniture)" opacity="0.4"/>
    </svg>
  `;
  
  return await sharp(Buffer.from(svg))
    .png()
    .toBuffer();
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ª–æ–∫–∞–ª—å–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
 * @returns {Promise<Object>} –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤
 */
export async function checkLocalServices() {
  const status = {
    huggingface: false,
    ollama: false,
    enhanced: true
  };

  try {
    const response = await fetch(`${LOCAL_CONFIG.HUGGINGFACE_API_URL}/health`, { timeout: 5000 });
    status.huggingface = response.ok;
  } catch (error) {
    console.log('Hugging Face –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
  }

  try {
    const response = await fetch(`${LOCAL_CONFIG.OLLAMA_API_URL}/api/tags`, { timeout: 5000 });
    status.ollama = response.ok;
  } catch (error) {
    console.log('Ollama –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
  }

  return status;
}
