import fs from 'fs';
import path from 'path';
import sharp from 'sharp';

/**
 * –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –ø–æ–º–µ—â–µ–Ω–∏–π –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ –∫–æ–º–Ω–∞—Ç—ã –∏ –≤—ã–±–æ—Ä–∞ –ø–æ–¥—Ö–æ–¥—è—â–µ–π –º–µ–±–µ–ª–∏
 */
export class RoomAnalyzer {
  constructor() {
    this.furnitureData = null;
    this.loadFurnitureData();
  }

  /**
   * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –º–µ–±–µ–ª–∏
   */
  loadFurnitureData() {
    try {
      const furniturePath = path.join(process.cwd(), 'furniture.json');
      this.furnitureData = JSON.parse(fs.readFileSync(furniturePath, 'utf8'));
      console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –æ –º–µ–±–µ–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –æ –º–µ–±–µ–ª–∏:', error);
      this.furnitureData = { furniture: [] };
    }
  }

  /**
   * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø –ø–æ–º–µ—â–µ–Ω–∏—è
   * @param {string} imagePath - –ü—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
   * @returns {Promise<string>} –¢–∏–ø –ø–æ–º–µ—â–µ–Ω–∏—è
   */
  async analyzeRoomType(imagePath) {
    try {
      console.log('üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–∏–ø –ø–æ–º–µ—â–µ–Ω–∏—è:', imagePath);
      
      // –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
      const metadata = await sharp(imagePath).metadata();
      const { width, height } = metadata;
      
      // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ –ø–æ–º–µ—â–µ–Ω–∏—è
      const roomType = await this.detectRoomType(imagePath, width, height);
      
      console.log('‚úÖ –û–ø—Ä–µ–¥–µ–ª–µ–Ω —Ç–∏–ø –ø–æ–º–µ—â–µ–Ω–∏—è:', roomType);
      return roomType;
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ç–∏–ø–∞ –ø–æ–º–µ—â–µ–Ω–∏—è:', error);
      return 'living_room'; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≥–æ—Å—Ç–∏–Ω–∞—è
    }
  }

  /**
   * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø –ø–æ–º–µ—â–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
   * @param {string} imagePath - –ü—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
   * @param {number} width - –®–∏—Ä–∏–Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
   * @param {number} height - –í—ã—Å–æ—Ç–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
   * @returns {Promise<string>} –¢–∏–ø –ø–æ–º–µ—â–µ–Ω–∏—è
   */
  async detectRoomType(imagePath, width, height) {
    try {
      // –ü—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–∞–∑–º–µ—Ä–æ–≤ –∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
      const aspectRatio = width / height;
      
      // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ü–≤–µ—Ç–∞ –∏ –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–æ—Å—Ç—å
      const imageBuffer = fs.readFileSync(imagePath);
      const { data, info } = await sharp(imageBuffer)
        .raw()
        .toBuffer({ resolveWithObject: true });
      
      // –ü—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ –ø–æ–º–µ—â–µ–Ω–∏—è
      // –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—ã–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã
      
      // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–ø–æ—Ä—Ü–∏–∏
      if (aspectRatio > 1.5) {
        // –®–∏—Ä–æ–∫–æ–µ –ø–æ–º–µ—â–µ–Ω–∏–µ - –≤–æ–∑–º–æ–∂–Ω–æ –∫—É—Ö–Ω—è –∏–ª–∏ –≥–æ—Å—Ç–∏–Ω–∞—è
        return this.analyzeWideRoom(data, info);
      } else if (aspectRatio < 0.7) {
        // –£–∑–∫–æ–µ –ø–æ–º–µ—â–µ–Ω–∏–µ - –≤–æ–∑–º–æ–∂–Ω–æ –≤–∞–Ω–Ω–∞—è –∏–ª–∏ —Ç—É–∞–ª–µ—Ç
        return this.analyzeNarrowRoom(data, info);
      } else {
        // –ö–≤–∞–¥—Ä–∞—Ç–Ω–æ–µ –ø–æ–º–µ—â–µ–Ω–∏–µ - –≤–æ–∑–º–æ–∂–Ω–æ —Å–ø–∞–ª—å–Ω—è
        return this.analyzeSquareRoom(data, info);
      }
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ –ø–æ–º–µ—â–µ–Ω–∏—è:', error);
      return 'living_room';
    }
  }

  /**
   * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —à–∏—Ä–æ–∫–æ–µ –ø–æ–º–µ—â–µ–Ω–∏–µ
   */
  analyzeWideRoom(data, info) {
    // –ü—Ä–æ—Å—Ç–∞—è —ç–≤—Ä–∏—Å—Ç–∏–∫–∞ - –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å ML
    return 'kitchen'; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∫—É—Ö–Ω—è –¥–ª—è —à–∏—Ä–æ–∫–∏—Ö –ø–æ–º–µ—â–µ–Ω–∏–π
  }

  /**
   * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —É–∑–∫–æ–µ –ø–æ–º–µ—â–µ–Ω–∏–µ
   */
  analyzeNarrowRoom(data, info) {
    return 'bathroom'; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤–∞–Ω–Ω–∞—è –¥–ª—è —É–∑–∫–∏—Ö –ø–æ–º–µ—â–µ–Ω–∏–π
  }

  /**
   * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–≤–∞–¥—Ä–∞—Ç–Ω–æ–µ –ø–æ–º–µ—â–µ–Ω–∏–µ
   */
  analyzeSquareRoom(data, info) {
    return 'bedroom'; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å–ø–∞–ª—å–Ω—è –¥–ª—è –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã—Ö –ø–æ–º–µ—â–µ–Ω–∏–π
  }

  /**
   * –í—ã–±–∏—Ä–∞–µ—Ç –º–µ–±–µ–ª—å –¥–ª—è —Ç–∏–ø–∞ –ø–æ–º–µ—â–µ–Ω–∏—è
   * @param {string} roomType - –¢–∏–ø –ø–æ–º–µ—â–µ–Ω–∏—è
   * @returns {Array} –ú–∞—Å—Å–∏–≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–µ–±–µ–ª–∏
   */
  selectFurnitureForRoom(roomType) {
    const furnitureSets = {
      'bedroom': [
        '–∫—Ä–æ–≤–∞—Ç—å', '–∫–æ–º–æ–¥', '—à–∫–∞—Ñ', '—Ç—É–º–±–∞', '–∑–µ—Ä–∫–∞–ª–æ'
      ],
      'kitchen': [
        '—Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫', '–ø–ª–∏—Ç–∞', '—Ä–∞–∫–æ–≤–∏–Ω–∞', '–∫—É—Ö–æ–Ω–Ω—ã–π –≥–∞—Ä–Ω–∏—Ç—É—Ä', '–º–∏–∫—Ä–æ–≤–æ–ª–Ω–æ–≤–∫–∞', '–¥—É—Ö–æ–≤–æ–π —à–∫–∞—Ñ'
      ],
      'bathroom': [
        '–≤–∞–Ω–Ω–∞', '–¥—É—à', '—Ä–∞–∫–æ–≤–∏–Ω–∞', '—Ç—É–∞–ª–µ—Ç', '–∑–µ—Ä–∫–∞–ª–æ'
      ],
      'living_room': [
        '–¥–∏–≤–∞–Ω', '–∫—Ä–µ—Å–ª–æ', '—Ç–µ–ª–µ–≤–∏–∑–æ—Ä', '—Å—Ç–æ–ª', '–∫–Ω–∏–∂–Ω—ã–π —à–∫–∞—Ñ', '—Ç—É–º–±–∞ –ø–æ–¥ –¢–í'
      ],
      'toilet': [
        '—Ç—É–∞–ª–µ—Ç', '—Ä–∞–∫–æ–≤–∏–Ω–∞', '–∑–µ—Ä–∫–∞–ª–æ'
      ],
      'office': [
        '–ø–∏—Å—å–º–µ–Ω–Ω—ã–π —Å—Ç–æ–ª', '—Å—Ç—É–ª', '–∫–æ–º–ø—å—é—Ç–µ—Ä', '–∫–Ω–∏–∂–Ω—ã–π —à–∫–∞—Ñ', '–ø—Ä–∏–Ω—Ç–µ—Ä'
      ],
      'dining_room': [
        '—Å—Ç–æ–ª', '—Å—Ç—É–ª', '—Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫', '–ø–æ—Å—É–¥–æ–º–æ–µ—á–Ω–∞—è –º–∞—à–∏–Ω–∞'
      ]
    };

    const selectedFurniture = furnitureSets[roomType] || furnitureSets['living_room'];
    
    // –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã –º–µ–±–µ–ª–∏ (3-5 —à—Ç—É–∫)
    const numItems = Math.min(selectedFurniture.length, Math.floor(Math.random() * 3) + 3);
    const shuffled = [...selectedFurniture].sort(() => 0.5 - Math.random());
    
    return shuffled.slice(0, numItems);
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–æ–º–ø—Ç —Å –º–µ–±–µ–ª—å—é –¥–ª—è ControlNet
   * @param {string} roomType - –¢–∏–ø –ø–æ–º–µ—â–µ–Ω–∏—è
   * @param {Array} furniture - –ú–∞—Å—Å–∏–≤ –º–µ–±–µ–ª–∏
   * @returns {string} –ü—Ä–æ–º–ø—Ç
   */
  generateFurniturePrompt(roomType, furniture) {
    const roomNames = {
      'bedroom': '—Å–ø–∞–ª—å–Ω—è',
      'kitchen': '–∫—É—Ö–Ω—è', 
      'bathroom': '–≤–∞–Ω–Ω–∞—è –∫–æ–º–Ω–∞—Ç–∞',
      'living_room': '–≥–æ—Å—Ç–∏–Ω–∞—è',
      'toilet': '—Ç—É–∞–ª–µ—Ç',
      'office': '–∫–∞–±–∏–Ω–µ—Ç',
      'dining_room': '—Å—Ç–æ–ª–æ–≤–∞—è'
    };

    const roomName = roomNames[roomType] || '–∫–æ–º–Ω–∞—Ç–∞';
    const furnitureList = furniture.join(', ');

    return `a detailed architectural floor plan of a ${roomName} with furniture: ${furnitureList}. The floor plan should be perfectly centered on a clean white background, showing room layout with walls, doors, windows, and furniture placement. Professional architectural drawing style with black lines on white background. The furniture should be placed logically and the plan must be centered and clearly visible.`;
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ–±–µ–ª–∏ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
   * @param {string} furnitureName - –ù–∞–∑–≤–∞–Ω–∏–µ –º–µ–±–µ–ª–∏
   * @returns {Object|null} –î–∞–Ω–Ω—ã–µ –æ –º–µ–±–µ–ª–∏
   */
  getFurnitureInfo(furnitureName) {
    if (!this.furnitureData || !this.furnitureData.furniture) {
      return null;
    }

    return this.furnitureData.furniture.find(item => 
      item.name === furnitureName || 
      item.keywords.some(keyword => keyword.toLowerCase().includes(furnitureName.toLowerCase()))
    );
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä
export const roomAnalyzer = new RoomAnalyzer();
