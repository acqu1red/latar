import fetch from 'node-fetch';
import fs from 'fs';
import path from 'path';
import { generateLocalImage, createEnhancedSketch } from './localImageGenerator.mjs';

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∏–∑ —ç—Å–∫–∏–∑–∞ –∏—Å–ø–æ–ª—å–∑—É—è ScribbleDiffusion —á–µ—Ä–µ–∑ Replicate API
 * @param {string} sketchPath - –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —ç—Å–∫–∏–∑–∞
 * @param {string} prompt - –¢–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∂–µ–ª–∞–µ–º–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
 * @returns {Promise<Buffer>} –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
 */
export async function generatePhotoFromSketch(sketchPath, prompt) {
  try {
    console.log('üé® –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∏–∑ —ç—Å–∫–∏–∑–∞');
    console.log('–≠—Å–∫–∏–∑:', sketchPath);
    console.log('–ü—Ä–æ–º–ø—Ç:', prompt);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ API –∫–ª—é—á–∞
    if (!process.env.REPLICATE_API_TOKEN) {
      console.log('‚ö†Ô∏è Replicate API —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é');
      return await generateLocalImage(sketchPath, prompt);
    }

    // –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª —ç—Å–∫–∏–∑–∞
    const sketchBuffer = fs.readFileSync(sketchPath);
    const sketchBase64 = sketchBuffer.toString('base64');
    const sketchDataUrl = `data:image/png;base64,${sketchBase64}`;

    // –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫ Replicate API
    const response = await fetch('https://api.replicate.com/v1/predictions', {
      method: 'POST',
      headers: {
        'Authorization': `Token ${process.env.REPLICATE_API_TOKEN}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        version: "ac732df83cea7fff18b8472768c88ad041fa750ff7682a21affe81863cbe77e4", // ControlNet Scribble model
        input: {
          image: sketchDataUrl,
          prompt: prompt,
          num_inference_steps: 20,
          guidance_scale: 7.5,
          negative_prompt: "blurry, low quality, distorted, ugly, bad anatomy, deformed"
        }
      })
    });

    if (!response.ok) {
      const errorText = await response.text();
      console.error(`‚ùå –û—à–∏–±–∫–∞ Replicate API: ${response.status} - ${errorText}`);
      console.log('üîÑ –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –ª–æ–∫–∞–ª—å–Ω—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é...');
      return await generateLocalImage(sketchPath, prompt);
    }

    const prediction = await response.json();
    console.log('‚úÖ –ó–∞–ø—Ä–æ—Å —Å–æ–∑–¥–∞–Ω, ID:', prediction.id);

    // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    const result = await waitForCompletion(prediction.id);
    
    if (!result || !result.output || result.output.length === 0) {
      throw new Error('–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —É—Å–ø–µ—à–Ω–æ');
    }

    // –°–∫–∞—á–∏–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    const imageUrl = result.output[0];
    console.log('üì• –°–∫–∞—á–∏–≤–∞–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:', imageUrl);
    
    const imageResponse = await fetch(imageUrl);
    if (!imageResponse.ok) {
      throw new Error(`–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: ${imageResponse.status}`);
    }

    const imageBuffer = await imageResponse.buffer();
    console.log('‚úÖ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞, —Ä–∞–∑–º–µ—Ä:', imageBuffer.length, '–±–∞–π—Ç');
    
    return imageBuffer;

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏:', error);
    throw error;
  }
}

/**
 * –û–∂–∏–¥–∞–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
 * @param {string} predictionId - ID –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
 * @returns {Promise<Object>} –†–µ–∑—É–ª—å—Ç–∞—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
 */
async function waitForCompletion(predictionId) {
  const maxAttempts = 60; // 5 –º–∏–Ω—É—Ç –º–∞–∫—Å–∏–º—É–º
  let attempts = 0;

  while (attempts < maxAttempts) {
    try {
      const response = await fetch(`https://api.replicate.com/v1/predictions/${predictionId}`, {
        headers: {
          'Authorization': `Token ${process.env.REPLICATE_API_TOKEN}`,
        }
      });

      if (!response.ok) {
        throw new Error(`–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞: ${response.status}`);
      }

      const result = await response.json();
      console.log(`‚è≥ –°—Ç–∞—Ç—É—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: ${result.status} (–ø–æ–ø—ã—Ç–∫–∞ ${attempts + 1}/${maxAttempts})`);

      if (result.status === 'succeeded') {
        console.log('‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
        return result;
      } else if (result.status === 'failed') {
        throw new Error(`–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å: ${result.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
      } else if (result.status === 'canceled') {
        throw new Error('–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞');
      }

      // –ñ–¥–µ–º 5 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
      await new Promise(resolve => setTimeout(resolve, 5000));
      attempts++;

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞:', error);
      attempts++;
      await new Promise(resolve => setTimeout(resolve, 5000));
    }
  }

  throw new Error('–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏');
}

/**
 * –°–æ–∑–¥–∞–µ—Ç —ç—Å–∫–∏–∑ –∏–∑ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è ScribbleDiffusion
 * @param {string} imagePath - –ü—É—Ç—å –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
 * @returns {Promise<string>} –ü—É—Ç—å –∫ —Å–æ–∑–¥–∞–Ω–Ω–æ–º—É —ç—Å–∫–∏–∑—É
 */
export async function createSketchFromImage(imagePath) {
  try {
    console.log('‚úèÔ∏è –°–æ–∑–¥–∞–µ–º —ç—Å–∫–∏–∑ –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', imagePath);
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —ç—Å–∫–∏–∑–∞
    const sketchPath = await createEnhancedSketch(imagePath);
    
    console.log('‚úÖ –≠—Å–∫–∏–∑ —Å–æ–∑–¥–∞–Ω:', sketchPath);
    return sketchPath;
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —ç—Å–∫–∏–∑–∞:', error);
    console.log('üîÑ –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –ø—Ä–æ—Å—Ç–æ–π –∞–ª–≥–æ—Ä–∏—Ç–º...');
    try {
      return await convertToSketch(imagePath);
    } catch (fallbackError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ—Å—Ç–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞:', fallbackError);
      // –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π —ç—Å–∫–∏–∑
      const outputPath = imagePath.replace(/\.[^/.]+$/, '_basic_sketch.png');
      await sharp(imagePath)
        .greyscale()
        .threshold(128)
        .png()
        .toFile(outputPath);
      return outputPath;
    }
  }
}

/**
 * –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —ç—Å–∫–∏–∑
 * @param {string} imagePath - –ü—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
 * @returns {Promise<string>} –ü—É—Ç—å –∫ —ç—Å–∫–∏–∑—É
 */
async function convertToSketch(imagePath) {
  const sharp = await import('sharp');
  
  const outputPath = imagePath.replace(/\.[^/.]+$/, '_sketch.png');
  
  await sharp.default(imagePath)
    .greyscale() // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —á–µ—Ä–Ω–æ-–±–µ–ª–æ–µ
    .normalize() // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∫–æ–Ω—Ç—Ä–∞—Å—Ç
    .sharpen({ sigma: 1.0, m1: 0.5, m2: 3.0, x1: 2, y2: 10 }) // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–µ–∑–∫–æ—Å—Ç—å
    .threshold(128) // –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–æ—Ä–æ–≥–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ç—É—Ä–æ–≤
    .png()
    .toFile(outputPath);
  
  return outputPath;
}

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–æ–º–ø—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
 * @param {string} imagePath - –ü—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
 * @returns {Promise<string>} –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç
 */
export async function generatePromptFromImage(imagePath) {
  try {
    console.log('üìù –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', imagePath);
    
    // –ü—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞
    const prompt = await analyzeImageForPrompt(imagePath);
    
    console.log('‚úÖ –ü—Ä–æ–º–ø—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω:', prompt);
    return prompt;
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–º–ø—Ç–∞:', error);
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
    return "a detailed, high-quality, professional photograph";
  }
}

/**
 * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ —Å–æ–∑–¥–∞–µ—Ç –ø—Ä–æ–º–ø—Ç
 * @param {string} imagePath - –ü—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
 * @returns {Promise<string>} –ü—Ä–æ–º–ø—Ç
 */
async function analyzeImageForPrompt(imagePath) {
  const sharp = await import('sharp');
  
  // –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
  const metadata = await sharp.default(imagePath).metadata();
  
  // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
  const isLandscape = metadata.width > metadata.height;
  const aspectRatio = metadata.width / metadata.height;
  
  // –ë–∞–∑–æ–≤—ã–µ –ø—Ä–æ–º–ø—Ç—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
  let basePrompt = "a detailed, high-quality, professional photograph";
  
  if (isLandscape) {
    basePrompt += ", landscape orientation";
  } else {
    basePrompt += ", portrait orientation";
  }
  
  if (aspectRatio > 2) {
    basePrompt += ", wide panoramic view";
  } else if (aspectRatio < 0.5) {
    basePrompt += ", tall vertical composition";
  }
  
  // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â–∏–µ —É–ª—É—á—à–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞
  basePrompt += ", sharp focus, good lighting, vibrant colors, detailed textures";
  
  return basePrompt;
}
