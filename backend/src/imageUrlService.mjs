import crypto from 'crypto';
import path from 'path';
import fs from 'fs';

/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
 * –í–º–µ—Å—Ç–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤ –Ω–∞ –¥–∏—Å–∫, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç URL –¥–ª—è –≤–Ω–µ—à–Ω–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
 */

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤–Ω–µ—à–Ω–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
const EXTERNAL_SERVICES = {
  // –ü—Ä–∏–º–µ—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
  imgur: {
    enabled: false,
    uploadUrl: 'https://api.imgur.com/3/image',
    apiKey: process.env.IMGUR_API_KEY,
    baseUrl: 'https://i.imgur.com/'
  },
  
  cloudinary: {
    enabled: false,
    cloudName: process.env.CLOUDINARY_CLOUD_NAME,
    apiKey: process.env.CLOUDINARY_API_KEY,
    apiSecret: process.env.CLOUDINARY_API_SECRET,
    baseUrl: `https://res.cloudinary.com/${process.env.CLOUDINARY_CLOUD_NAME}/image/upload/`
  },
  
  // –í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö URL
  temporary: {
    enabled: true,
    baseUrl: process.env.TEMPORARY_IMAGE_BASE_URL || 'https://acqu1red-latar-084a.twc1.net/temp-images/',
    maxAge: 24 * 60 * 60 * 1000 // 24 —á–∞—Å–∞
  }
};

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π URL –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
 * @param {string} imageType - –¢–∏–ø –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (user_upload, generated_plan, generated_cleanup)
 * @param {string} originalFilename - –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
 * @param {Object} metadata - –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
 * @returns {Object} –û–±—ä–µ–∫—Ç —Å URL –∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
 */
export function generateImageUrl(imageType, originalFilename, metadata = {}) {
  const timestamp = Date.now();
  const randomId = crypto.randomBytes(8).toString('hex');
  const extension = path.extname(originalFilename) || '.jpg';
  
  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
  const filename = `${imageType}_${timestamp}_${randomId}${extension}`;
  
  // –í—ã–±–∏—Ä–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —Å–µ—Ä–≤–∏—Å
  const activeService = getActiveService();
  
  let imageUrl, thumbnailUrl = null;
  
  switch (activeService) {
    case 'temporary':
      imageUrl = `${EXTERNAL_SERVICES.temporary.baseUrl}${filename}`;
      thumbnailUrl = `${EXTERNAL_SERVICES.temporary.baseUrl}thumb_${filename}`;
      break;
      
    case 'imgur':
      // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ Imgur
      imageUrl = `${EXTERNAL_SERVICES.imgur.baseUrl}${filename}`;
      break;
      
    case 'cloudinary':
      // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ Cloudinary
      imageUrl = `${EXTERNAL_SERVICES.cloudinary.baseUrl}${filename}`;
      thumbnailUrl = `${EXTERNAL_SERVICES.cloudinary.baseUrl}w_300,h_auto,c_scale/${filename}`;
      break;
      
    default:
      throw new Error('–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π');
  }
  
  return {
    imageUrl,
    thumbnailUrl,
    filename,
    service: activeService,
    metadata: {
      ...metadata,
      originalFilename,
      imageType,
      generatedAt: new Date().toISOString(),
      expiresAt: activeService === 'temporary' ? 
        new Date(Date.now() + EXTERNAL_SERVICES.temporary.maxAge).toISOString() : 
        null
    }
  };
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
 * @returns {string} –ù–∞–∑–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞
 */
function getActiveService() {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–∏—Å–æ–≤ –≤ –ø–æ—Ä—è–¥–∫–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
  if (EXTERNAL_SERVICES.cloudinary.enabled && 
      EXTERNAL_SERVICES.cloudinary.cloudName && 
      EXTERNAL_SERVICES.cloudinary.apiKey) {
    return 'cloudinary';
  }
  
  if (EXTERNAL_SERVICES.imgur.enabled && EXTERNAL_SERVICES.imgur.apiKey) {
    return 'imgur';
  }
  
  // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å
  return 'temporary';
}

/**
 * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞ –≤–Ω–µ—à–Ω–∏–π —Å–µ—Ä–≤–∏—Å
 * @param {Buffer} imageBuffer - –ë—É—Ñ–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
 * @param {string} filename - –ò–º—è —Ñ–∞–π–ª–∞
 * @param {string} service - –°–µ—Ä–≤–∏—Å –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
 * @returns {Promise<Object>} –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–≥—Ä—É–∑–∫–∏
 */
export async function uploadToExternalService(imageBuffer, filename, service = null) {
  const targetService = service || getActiveService();
  
  switch (targetService) {
    case 'imgur':
      return await uploadToImgur(imageBuffer, filename);
      
    case 'cloudinary':
      return await uploadToCloudinary(imageBuffer, filename);
      
    case 'temporary':
      return await uploadToTemporary(imageBuffer, filename);
      
    default:
      throw new Error(`–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Å–µ—Ä–≤–∏—Å: ${targetService}`);
  }
}

/**
 * –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞ Imgur
 */
async function uploadToImgur(imageBuffer, filename) {
  const FormData = (await import('form-data')).default;
  const fetch = (await import('node-fetch')).default;
  
  const formData = new FormData();
  formData.append('image', imageBuffer, filename);
  
  const response = await fetch(EXTERNAL_SERVICES.imgur.uploadUrl, {
    method: 'POST',
    headers: {
      'Authorization': `Client-ID ${EXTERNAL_SERVICES.imgur.apiKey}`,
      ...formData.getHeaders()
    },
    body: formData
  });
  
  if (!response.ok) {
    throw new Error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ Imgur: ${response.status}`);
  }
  
  const result = await response.json();
  return {
    imageUrl: result.data.link,
    thumbnailUrl: result.data.link.replace('.jpg', 'm.jpg'),
    deleteHash: result.data.deletehash
  };
}

/**
 * –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞ Cloudinary
 */
async function uploadToCloudinary(imageBuffer, filename) {
  const FormData = (await import('form-data')).default;
  const fetch = (await import('node-fetch')).default;
  
  const formData = new FormData();
  formData.append('file', imageBuffer, filename);
  formData.append('upload_preset', 'ml_default'); // –ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Å–≤–æ–π preset
  
  const response = await fetch(
    `https://api.cloudinary.com/v1_1/${EXTERNAL_SERVICES.cloudinary.cloudName}/image/upload`,
    {
      method: 'POST',
      body: formData
    }
  );
  
  if (!response.ok) {
    throw new Error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ Cloudinary: ${response.status}`);
  }
  
  const result = await response.json();
  return {
    imageUrl: result.secure_url,
    thumbnailUrl: result.secure_url.replace('/upload/', '/upload/w_300,h_auto,c_scale/'),
    publicId: result.public_id
  };
}

/**
 * –ó–∞–≥—Ä—É–∑–∫–∞ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ (—Å —Ä–µ–∞–ª—å–Ω—ã–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Ñ–∞–π–ª–æ–≤)
 */
async function uploadToTemporary(imageBuffer, filename) {
  try {
    // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞
    const { fileURLToPath } = await import('url');
    const __filename = fileURLToPath(import.meta.url);
    const __dirname = path.dirname(__filename);
    const serverDir = path.dirname(__dirname); // –ü–æ–¥–Ω–∏–º–∞–µ–º—Å—è –Ω–∞ —É—Ä–æ–≤–µ–Ω—å –≤—ã—à–µ –æ—Ç src/
    
    // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    const uploadsDir = path.join(serverDir, 'uploads');
    if (!fs.existsSync(uploadsDir)) {
      fs.mkdirSync(uploadsDir, { recursive: true });
      console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è uploads: ${uploadsDir}`);
    }
    
    // –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É
    const filePath = path.join(uploadsDir, filename);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
    fs.writeFileSync(filePath, imageBuffer);
    
    console.log(`‚úÖ –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${filePath}`);
    console.log(`üìÅ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è uploads: ${uploadsDir}`);
    console.log(`üìÑ –§–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: ${fs.existsSync(filePath)}`);
    
    return {
      imageUrl: `${EXTERNAL_SERVICES.temporary.baseUrl}${filename}`,
      thumbnailUrl: `${EXTERNAL_SERVICES.temporary.baseUrl}${filename}`, // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ —Ñ–∞–π–ª –¥–ª—è –ø—Ä–µ–≤—å—é
      service: 'temporary',
      localPath: filePath
    };
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞:', error);
    throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: ' + error.message);
  }
}

/**
 * –£–¥–∞–ª—è–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –≤–Ω–µ—à–Ω–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞
 * @param {string} imageUrl - URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
 * @param {string} service - –°–µ—Ä–≤–∏—Å
 * @param {Object} deleteData - –î–∞–Ω–Ω—ã–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (deleteHash, publicId –∏ —Ç.–¥.)
 */
export async function deleteFromExternalService(imageUrl, service, deleteData = {}) {
  switch (service) {
    case 'imgur':
      if (deleteData.deleteHash) {
        await deleteFromImgur(deleteData.deleteHash);
      }
      break;
      
    case 'cloudinary':
      if (deleteData.publicId) {
        await deleteFromCloudinary(deleteData.publicId);
      }
      break;
      
    case 'temporary':
      if (deleteData.localPath) {
        await deleteFromTemporary(deleteData.localPath);
      }
      break;
      
    default:
      console.warn(`–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —Å–µ—Ä–≤–∏—Å–∞: ${service}`);
  }
}

async function deleteFromImgur(deleteHash) {
  const fetch = (await import('node-fetch')).default;
  
  const response = await fetch(`https://api.imgur.com/3/image/${deleteHash}`, {
    method: 'DELETE',
    headers: {
      'Authorization': `Client-ID ${EXTERNAL_SERVICES.imgur.apiKey}`
    }
  });
  
  if (!response.ok) {
    console.error(`–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å Imgur: ${response.status}`);
  }
}

async function deleteFromCloudinary(publicId) {
  const fetch = (await import('node-fetch')).default;
  
  const response = await fetch(
    `https://api.cloudinary.com/v1_1/${EXTERNAL_SERVICES.cloudinary.cloudName}/image/destroy`,
    {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        public_id: publicId,
        api_key: EXTERNAL_SERVICES.cloudinary.apiKey,
        api_secret: EXTERNAL_SERVICES.cloudinary.apiSecret
      })
    }
  );
  
  if (!response.ok) {
    console.error(`–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å Cloudinary: ${response.status}`);
  }
}

async function deleteFromTemporary(localPath) {
  try {
    if (localPath && fs.existsSync(localPath)) {
      fs.unlinkSync(localPath);
      console.log(`‚úÖ –§–∞–π–ª —É–¥–∞–ª–µ–Ω: ${localPath}`);
    } else {
      console.log(`‚ö†Ô∏è –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: ${localPath}`);
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞:', error);
  }
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–∞—Ö
 */
export function getServicesInfo() {
  return {
    available: Object.keys(EXTERNAL_SERVICES).filter(key => EXTERNAL_SERVICES[key].enabled),
    active: getActiveService(),
    config: EXTERNAL_SERVICES
  };
}
