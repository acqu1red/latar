import fs from 'fs';
import path from 'path';
import sharp from 'sharp';

/**
 * ControlNet –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞–Ω–æ–≤ –∫–≤–∞—Ä—Ç–∏—Ä —Å –º–µ–±–µ–ª—å—é
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –ª–æ–∫–∞–ª—å–Ω—É—é –º–æ–¥–µ–ª—å ControlNet –≤–º–µ—Å—Ç–æ –≤–Ω–µ—à–Ω–∏—Ö API
 */
export class ControlNetGenerator {
  constructor() {
    this.modelLoaded = false;
    this.pipeline = null;
    this.controlnet = null;
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç ControlNet –º–æ–¥–µ–ª—å
   */
  async initialize() {
    try {
      console.log('üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ControlNet...');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ Python –∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫
      await this.checkPythonEnvironment();
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å ControlNet
      await this.loadControlNetModel();
      
      this.modelLoaded = true;
      console.log('‚úÖ ControlNet —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ ControlNet:', error);
      throw error;
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ Python –æ–∫—Ä—É–∂–µ–Ω–∏—è
   */
  async checkPythonEnvironment() {
    const { exec } = await import('child_process');
    const { promisify } = await import('util');
    const execAsync = promisify(exec);

    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ ControlNet
      const venvPath = path.join(process.cwd(), 'controlnet_env', 'bin', 'python');
      
      if (fs.existsSync(venvPath)) {
        console.log('‚úÖ –í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ ControlNet –Ω–∞–π–¥–µ–Ω–æ');
        this.pythonPath = venvPath;
      } else {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π Python
        await execAsync('python3 --version');
        console.log('‚úÖ Python –Ω–∞–π–¥–µ–Ω');
        this.pythonPath = 'python3';
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫
      try {
        const pythonCmd = this.pythonPath || 'python3';
        await execAsync(`${pythonCmd} -c "import torch, diffusers, transformers"`);
        console.log('‚úÖ –ù–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã');
      } catch (libError) {
        console.log('‚ö†Ô∏è –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏...');
        await this.installPythonDependencies();
      }
      
    } catch (error) {
      throw new Error('Python –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Python 3.8+ –¥–ª—è —Ä–∞–±–æ—Ç—ã ControlNet');
    }
  }

  /**
   * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç Python –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
   */
  async installPythonDependencies() {
    const { exec } = await import('child_process');
    const { promisify } = await import('util');
    const execAsync = promisify(exec);

    const dependencies = [
      'torch',
      'torchvision',
      'diffusers',
      'transformers',
      'accelerate',
      'controlnet-aux',
      'opencv-python',
      'Pillow',
      'numpy'
    ];

    for (const dep of dependencies) {
      try {
        console.log(`üì¶ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º ${dep}...`);
        await execAsync(`pip install ${dep}`);
      } catch (error) {
        console.warn(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å ${dep}:`, error.message);
      }
    }
  }

  /**
   * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –º–æ–¥–µ–ª—å ControlNet
   */
  async loadControlNetModel() {
    try {
      // –°–æ–∑–¥–∞–µ–º Python —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏
      const pythonScript = `
import torch
from diffusers import StableDiffusionControlNetPipeline, ControlNetModel
from PIL import Image
import numpy as np
import json
import sys
import os

def load_controlnet():
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º ControlNet –¥–ª—è scribble
        controlnet = ControlNetModel.from_pretrained(
            "lllyasviel/sd-controlnet-scribble",
            torch_dtype=torch.float16
        )
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º Stable Diffusion pipeline
        pipe = StableDiffusionControlNetPipeline.from_pretrained(
            "runwayml/stable-diffusion-v1-5",
            controlnet=controlnet,
            torch_dtype=torch.float16
        )
        
        # –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º –¥–ª—è CPU/GPU
        if torch.cuda.is_available():
            pipe = pipe.to("cuda")
            print("GPU –¥–æ—Å—Ç—É–ø–µ–Ω")
        else:
            pipe = pipe.to("cpu")
            print("–ò—Å–ø–æ–ª—å–∑—É–µ–º CPU")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–æ–¥–µ–ª–∏
        model_info = {
            "status": "loaded",
            "device": "cuda" if torch.cuda.is_available() else "cpu",
            "model": "lllyasviel/sd-controlnet-scribble"
        }
        
        with open("model_status.json", "w") as f:
            json.dump(model_info, f)
            
        print("–ú–æ–¥–µ–ª—å ControlNet –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        return True
        
    except Exception as e:
        error_info = {
            "status": "error",
            "error": str(e)
        }
        
        with open("model_status.json", "w") as f:
            json.dump(error_info, f)
            
        print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏: {e}")
        return False

if __name__ == "__main__":
    load_controlnet()
`;

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º Python —Å–∫—Ä–∏–ø—Ç
      const scriptPath = path.join(process.cwd(), 'load_controlnet.py');
      fs.writeFileSync(scriptPath, pythonScript);

      // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç
      const { exec } = await import('child_process');
      const { promisify } = await import('util');
      const execAsync = promisify(exec);

      console.log('üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å ControlNet...');
      const pythonCmd = this.pythonPath || 'python3';
      await execAsync(`${pythonCmd} ${scriptPath}`);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
      const statusPath = path.join(process.cwd(), 'model_status.json');
      if (fs.existsSync(statusPath)) {
        const status = JSON.parse(fs.readFileSync(statusPath, 'utf8'));
        if (status.status === 'error') {
          throw new Error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏: ${status.error}`);
        }
      }

      // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
      fs.unlinkSync(scriptPath);
      if (fs.existsSync(statusPath)) {
        fs.unlinkSync(statusPath);
      }

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ ControlNet –º–æ–¥–µ–ª–∏:', error);
      throw error;
    }
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–ª–∞–Ω –∫–≤–∞—Ä—Ç–∏—Ä—ã —Å –º–µ–±–µ–ª—å—é –∏—Å–ø–æ–ª—å–∑—É—è ControlNet
   * @param {string} imagePath - –ü—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é –ø–ª–∞–Ω–∞
   * @param {string} prompt - –ü—Ä–æ–º–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
   * @returns {Promise<Buffer>} –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
   */
  async generatePlanWithFurniture(imagePath, prompt) {
    try {
      if (!this.modelLoaded) {
        await this.initialize();
      }

      console.log('üé® –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–ª–∞–Ω —Å –º–µ–±–µ–ª—å—é —á–µ—Ä–µ–∑ ControlNet...');
      console.log('–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:', imagePath);
      console.log('–ü—Ä–æ–º–ø—Ç:', prompt);

      // –°–æ–∑–¥–∞–µ–º —ç—Å–∫–∏–∑ –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
      const sketchPath = await this.createSketchFromImage(imagePath);
      
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ ControlNet
      const resultPath = await this.runControlNetGeneration(sketchPath, prompt);
      
      // –ß–∏—Ç–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
      const resultBuffer = fs.readFileSync(resultPath);
      
      // –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
      fs.unlinkSync(sketchPath);
      fs.unlinkSync(resultPath);
      
      console.log('‚úÖ –ü–ª–∞–Ω —Å –º–µ–±–µ–ª—å—é —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ');
      return resultBuffer;

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–ª–∞–Ω–∞ —Å –º–µ–±–µ–ª—å—é:', error);
      throw error;
    }
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç —ç—Å–∫–∏–∑ –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è ControlNet
   * @param {string} imagePath - –ü—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
   * @returns {Promise<string>} –ü—É—Ç—å –∫ —ç—Å–∫–∏–∑—É
   */
  async createSketchFromImage(imagePath) {
    try {
      const outputPath = imagePath.replace(/\.[^/.]+$/, '_sketch.png');
      
      // –°–æ–∑–¥–∞–µ–º —ç—Å–∫–∏–∑ –∏—Å–ø–æ–ª—å–∑—É—è Sharp
      await sharp(imagePath)
        .greyscale()
        .normalize()
        .sharpen({ sigma: 1.0, m1: 0.5, m2: 3.0, x1: 2, y2: 10 })
        .threshold(128)
        .png()
        .toFile(outputPath);
      
      return outputPath;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —ç—Å–∫–∏–∑–∞:', error);
      throw error;
    }
  }

  /**
   * –ó–∞–ø—É—Å–∫–∞–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —á–µ—Ä–µ–∑ ControlNet
   * @param {string} sketchPath - –ü—É—Ç—å –∫ —ç—Å–∫–∏–∑—É
   * @param {string} prompt - –ü—Ä–æ–º–ø—Ç
   * @returns {Promise<string>} –ü—É—Ç—å –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
   */
  async runControlNetGeneration(sketchPath, prompt) {
    try {
      const pythonScript = `
import torch
from diffusers import StableDiffusionControlNetPipeline, ControlNetModel
from PIL import Image
import sys
import os

def generate_image(sketch_path, prompt, output_path):
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å
        controlnet = ControlNetModel.from_pretrained(
            "lllyasviel/sd-controlnet-scribble",
            torch_dtype=torch.float16
        )
        
        pipe = StableDiffusionControlNetPipeline.from_pretrained(
            "runwayml/stable-diffusion-v1-5",
            controlnet=controlnet,
            torch_dtype=torch.float16
        )
        
        if torch.cuda.is_available():
            pipe = pipe.to("cuda")
        else:
            pipe = pipe.to("cpu")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —ç—Å–∫–∏–∑
        image = Image.open(sketch_path)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        result = pipe(
            prompt=prompt,
            image=image,
            num_inference_steps=20,
            guidance_scale=7.5,
            controlnet_conditioning_scale=1.0
        ).images[0]
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        result.save(output_path)
        print(f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {output_path}")
        return True
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")
        return False

if __name__ == "__main__":
    sketch_path = sys.argv[1]
    prompt = sys.argv[2]
    output_path = sys.argv[3]
    
    generate_image(sketch_path, prompt, output_path)
`;

      const scriptPath = path.join(process.cwd(), 'generate_controlnet.py');
      const outputPath = path.join(process.cwd(), `generated_${Date.now()}.png`);
      
      fs.writeFileSync(scriptPath, pythonScript);

      const { exec } = await import('child_process');
      const { promisify } = await import('util');
      const execAsync = promisify(exec);

      const pythonCmd = this.pythonPath || 'python3';
      await execAsync(`${pythonCmd} ${scriptPath} "${sketchPath}" "${prompt}" "${outputPath}"`);

      // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç
      fs.unlinkSync(scriptPath);

      return outputPath;

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ ControlNet:', error);
      throw error;
    }
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–æ–º–ø—Ç –¥–ª—è –ø–ª–∞–Ω–∞ —Å –º–µ–±–µ–ª—å—é
   * @param {string} imagePath - –ü—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
   * @returns {string} –ü—Ä–æ–º–ø—Ç
   */
  generateFurniturePrompt(imagePath) {
    return `a detailed architectural floor plan with furniture, perfectly centered on a clean white background. The floor plan should show room layouts with walls, doors, windows, and appropriate furniture placement. Professional architectural drawing style with black lines on white background. Include furniture like beds, sofas, tables, chairs, wardrobes, and other home items in logical positions. The plan must be centered and clearly visible.`;
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä
export const controlNetGenerator = new ControlNetGenerator();
