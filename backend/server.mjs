import express from 'express';
import multer from 'multer';
import cors from 'cors';
import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';
import sharp from 'sharp';
import jwt from 'jsonwebtoken';
import { generateTechnicalPlan, checkCometApiHealth, generateCleanupImage } from './src/cometApiGenerator.mjs';
import authRoutes from './src/authRoutes.mjs';
import { userDB } from './src/database.mjs';

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
import dotenv from 'dotenv';
dotenv.config();

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É uploads –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç (–≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞)
const uploadsDir = path.join(__dirname, '..', 'uploads');
if (!fs.existsSync(uploadsDir)) {
  fs.mkdirSync(uploadsDir, { recursive: true });
  console.log('üìÅ –°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞ uploads');
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ñ–∞–π–ª–æ–≤
console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤:');
const requiredFiles = [
  'furniture.json',
  'src/cometApiGenerator.mjs'
];

requiredFiles.forEach(file => {
  const filePath = path.join(__dirname, file);
  const exists = fs.existsSync(filePath);
  console.log(`   ${file}: ${exists ? '‚úÖ' : '‚ùå'}`);
  if (!exists) {
    console.error(`‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —Ñ–∞–π–ª –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç: ${file}`);
  }
});

// –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–≥–æ –∏–º–µ–Ω–∏ –∫–ª—é—á–∞ (COMET_API_KEY -> COMETAPI_API_KEY)
if (!process.env.COMETAPI_API_KEY && process.env.COMET_API_KEY) {
  process.env.COMETAPI_API_KEY = process.env.COMET_API_KEY;
}

const app = express();
const PORT = process.env.PORT || 3001;
const HOST = process.env.HOST || '0.0.0.0';
const JWT_SECRET = process.env.JWT_SECRET || 'your-secret-key-change-in-production';

const guestUsage = new Map();
const MAX_GUEST_PLANS = 1;
const MAX_USER_PLANS = 1;

// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É
console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã:');
console.log('–¢–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è:', process.cwd());
console.log('–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏:', fs.readdirSync(process.cwd()));
console.log('–°—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ server.mjs:', fs.existsSync('server.mjs'));
console.log('–°—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ package.json:', fs.existsSync('package.json'));
console.log('–°—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–∞–ø–∫–∞ uploads:', fs.existsSync('uploads'));

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ API –∫–ª—é—á–∞
console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ API –∫–ª—é—á–∞:');
console.log('COMETAPI_API_KEY —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω:', !!process.env.COMETAPI_API_KEY);
console.log('COMETAPI_API_KEY –∑–Ω–∞—á–µ–Ω–∏–µ:', process.env.COMETAPI_API_KEY ? '***—Å–∫—Ä—ã—Ç–æ***' : '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
console.log('–í—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:', Object.keys(process.env).filter(key => key.includes('COMET') || key.includes('NODE') || key.includes('PORT')));

// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π:');
try {
  const sharp = await import('sharp');
  console.log('‚úÖ Sharp –∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ');
  console.log('Sharp –≤–µ—Ä—Å–∏—è:', sharp.default.versions);
} catch (error) {
  console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ Sharp:', error.message);
  console.error('–≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–≤—è–∑–∞–Ω–æ —Å –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫');
}

const isCometApiKeyValid = process.env.COMETAPI_API_KEY && 
    process.env.COMETAPI_API_KEY !== 'YOUR_COMETAPI_API_KEY_HERE' && 
    process.env.COMETAPI_API_KEY !== 'your_cometapi_key_here';

if (!isCometApiKeyValid) {
  console.warn('‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: COMETAPI –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!');
  console.warn('üìù –î–ª—è —Ä–∞–±–æ—Ç—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –ø–ª–∞–Ω–æ–≤ –¥–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è:');
  console.warn('   COMETAPI_API_KEY=–≤–∞—à_cometapi_–∫–ª—é—á_–∑–¥–µ—Å—å');
  console.warn('üîó –ü–æ–ª—É—á–∏—Ç–µ –∫–ª—é—á –Ω–∞ https://cometapi.com');
  console.warn('‚ö†Ô∏è  –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—Å—Ç–∏—Ç—Å—è, –Ω–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –ø–ª–∞–Ω–æ–≤ –±—É–¥–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞!');
} else {
  console.log('‚úÖ COMETAPI –∫–ª—é—á –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
}

// –î–æ–≤–µ—Ä—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∞–º –ø—Ä–æ–∫—Å–∏ (–≤–∞–∂–Ω–æ –¥–ª—è Timeweb/NGINX)
app.set('trust proxy', 1);

// CORS: —Ä–∞–∑—Ä–µ—à–∞–µ–º –∑–∞–ø—Ä–æ—Å—ã c –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ (–∏ –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –ª—é–±—ã–µ, –µ—Å–ª–∏ —è–≤–Ω–æ –∑–∞–¥–∞–Ω–æ)
const defaultCorsOrigins = [
  'https://acqu1red.github.io',
  'https://acqu1red-latar-4004.twc1.net',
  'https://acqu1red-latar-c0f7.twc1.net',
  'http://localhost:3000',
  'http://localhost:5173'
];
const envCorsOrigins = (process.env.CORS_ORIGIN || '')
  .split(',')
  .map(s => s.trim())
  .filter(Boolean);
const allowAllCors = process.env.CORS_ALLOW_ALL === 'true';
const allowedOrigins = envCorsOrigins.length > 0 ? envCorsOrigins : defaultCorsOrigins;

const corsOptions = {
  origin: allowAllCors ? true : (origin, callback) => {
    if (!origin) return callback(null, true);
    const isAllowed = allowedOrigins.includes(origin);
    return callback(isAllowed ? null : new Error('Not allowed by CORS'), isAllowed);
  },
  credentials: true,
  methods: ['GET', 'POST', 'PUT', 'PATCH', 'DELETE', 'OPTIONS'],
  allowedHeaders: ['Content-Type', 'Authorization']
};

app.use(cors(corsOptions));
app.options('*', cors(corsOptions));

// –§–æ–ª–ª–±–µ–∫ –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –∫–∞–∫–æ–π-—Ç–æ middleware –æ—Ç–≤–µ—Ç–∏–ª –±–µ–∑ CORS-–∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
app.use((req, res, next) => {
  const origin = req.get('Origin');
  if (allowAllCors || (origin && allowedOrigins.includes(origin))) {
    res.header('Access-Control-Allow-Origin', origin || '*');
    res.header('Vary', 'Origin');
    res.header('Access-Control-Allow-Credentials', 'true');
    res.header('Access-Control-Allow-Methods', 'GET,POST,PUT,PATCH,DELETE,OPTIONS');
    res.header('Access-Control-Allow-Headers', 'Content-Type, Authorization');
  }
  if (req.method === 'OPTIONS') return res.sendStatus(204);
  next();
});

// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤ (—Ç–∏—à–µ –≤ production)
app.use((req, res, next) => {
  if (process.env.NODE_ENV !== 'production') {
    console.log(`üåê ${req.method} ${req.path} - Origin: ${req.get('Origin') || '–Ω–µ —É–∫–∞–∑–∞–Ω'}`);
  }
  next();
});
app.use(express.json());
app.use(express.static(path.join(__dirname, '..', 'frontend/dist')));

// –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
app.use('/temp-images', express.static(path.join(__dirname, '..', 'uploads')));

// Auth routes
app.use('/api/auth', authRoutes);

// –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø–æ–¥–¥–æ–º–µ–Ω–∞ new
app.get('/new', (req, res) => {
  const newHtmlPath = path.join(__dirname, '..', 'frontend/dist/new.html');
  if (fs.existsSync(newHtmlPath)) {
    res.sendFile(newHtmlPath);
  } else {
    res.status(404).send('new.html not found');
  }
});

app.get('/new/*', (req, res) => {
  const newHtmlPath = path.join(__dirname, '..', 'frontend/dist/new.html');
  if (fs.existsSync(newHtmlPath)) {
    res.sendFile(newHtmlPath);
  } else {
    res.status(404).send('new.html not found');
  }
});

// SPA –º–∞—Ä—à—Ä—É—Ç –ø–µ—Ä–µ–Ω–æ—Å–∏–º –Ω–∏–∂–µ, –ø–æ—Å–ª–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤—Å–µ—Ö API-—Ä–æ—É—Ç–æ–≤

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ multer –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤
const storage = multer.diskStorage({
  destination: (req, file, cb) => {
    const uploadDir = path.join(__dirname, '..', 'uploads');
    if (!fs.existsSync(uploadDir)) {
      fs.mkdirSync(uploadDir, { recursive: true });
    }
    cb(null, uploadDir);
  },
  filename: (req, file, cb) => {
    const uniqueSuffix = Date.now() + '-' + Math.round(Math.random() * 1E9);
    cb(null, file.fieldname + '-' + uniqueSuffix + path.extname(file.originalname));
  }
});

const upload = multer({ 
  storage: storage,
  limits: {
    fileSize: 5 * 1024 * 1024, // 5MB limit (—É–º–µ–Ω—å—à–∏–ª–∏ –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è –Ω–∞–≥—Ä—É–∑–∫–∏)
    files: 5 // –º–∞–∫—Å–∏–º—É–º 5 —Ñ–∞–π–ª–æ–≤
  },
  fileFilter: (req, file, cb) => {
    if (file.mimetype.startsWith('image/')) {
      cb(null, true);
    } else {
      cb(new Error('–¢–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–∞–∑—Ä–µ—à–µ–Ω—ã!'), false);
    }
  }
});


// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –ø–ª–∞–Ω–∞
app.post('/api/generate-technical-plan', upload.array('image', 5), async (req, res) => {
  try {
    if (!req.files || req.files.length === 0) {
      return res.status(400).json({ error: '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã' });
    }

    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø–µ—Ä–µ–≥—Ä—É–∑–∫–∏
    if (req.files.length > 5) {
      return res.status(400).json({ 
        error: '–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π. –ú–∞–∫—Å–∏–º—É–º 5 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∑–∞ —Ä–∞–∑.' 
      });
    }

    const { mode } = req.body; // 'withFurniture' –∏–ª–∏ 'withoutFurniture'
    
    if (!mode || !['withFurniture', 'withoutFurniture'].includes(mode)) {
      return res.status(400).json({ 
        error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ä–µ–∂–∏–º. –î–æ–ø—É—Å—Ç–∏–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: withFurniture, withoutFurniture' 
      });
    }

    // COMETAPI –∫–ª—é—á –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω
    if (!isCometApiKeyValid) {
      return res.status(503).json({ 
        error: '–°–µ—Ä–≤–∏—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –ø–ª–∞–Ω–æ–≤ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω.',
        code: 'API_KEY_MISSING'
      });
    }

    const authHeader = req.headers['authorization'];
    let authUser = null;

    if (authHeader && authHeader.startsWith('Bearer ')) {
      const token = authHeader.split(' ')[1];
      try {
        const decoded = jwt.verify(token, JWT_SECRET);
        authUser = userDB.findById(decoded.id);
        if (!authUser) {
          return res.status(401).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }
      } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–ª–∞–Ω–∞:', err);
        return res.status(401).json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω' });
      }
    }

    const isDirector = authUser?.role === 'director';
    const isOrganization = authUser?.access_prefix === '–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è';
    const hasUnlimitedAccess = isDirector || isOrganization;

    console.log(`üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤:`, {
      userId: authUser?.id,
      username: authUser?.username,
      role: authUser?.role,
      accessPrefix: authUser?.access_prefix,
      isDirector,
      isOrganization,
      hasUnlimitedAccess
    });

    if (authUser) {
      // –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
      if (!hasUnlimitedAccess) {
        // –û–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –ø—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã
        if (authUser.plans_used >= MAX_USER_PLANS) {
          return res.status(403).json({ error: '–õ–∏–º–∏—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–π –∏—Å—á–µ—Ä–ø–∞–Ω', code: 'PLAN_LIMIT' });
        }
        userDB.incrementPlanUsage(authUser.id);
        authUser.plans_used += 1;
        console.log(`üìä –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${authUser.username} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –≥–µ–Ω–µ—Ä–∞—Ü–∏—é (${authUser.plans_used}/${MAX_USER_PLANS})`);
      } else {
        console.log(`‚ôæÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${authUser.username} –∏–º–µ–µ—Ç –±–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π –¥–æ—Å—Ç—É–ø`);
      }
    } else {
      // –ì–æ—Å—Ç—å - –ø—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã –ø–æ IP
      const forwarded = req.headers['x-forwarded-for'];
      const clientIp = forwarded ? forwarded.split(',')[0].trim() : req.ip;
      const usage = guestUsage.get(clientIp) || { plans: 0 };
      if (usage.plans >= MAX_GUEST_PLANS) {
        return res.status(403).json({ error: '–õ–∏–º–∏—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–π –¥–ª—è –≥–æ—Å—Ç–µ–π –∏—Å—á–µ—Ä–ø–∞–Ω', code: 'GUEST_LIMIT' });
      }
      usage.plans += 1;
      guestUsage.set(clientIp, usage);
      console.log(`üë§ –ì–æ—Å—Ç—å —Å IP ${clientIp} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –≥–µ–Ω–µ—Ä–∞—Ü–∏—é (${usage.plans}/${MAX_GUEST_PLANS})`);
    }

    const imagePaths = req.files.map(f => f.path);
    console.log(`–û–±—Ä–∞–±–æ—Ç–∫–∞ ${imagePaths.length} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –ø–ª–∞–Ω–∞ (—Ä–µ–∂–∏–º: ${mode})`);

    const buffers = [];
    for (let i = 0; i < imagePaths.length; i++) {
      const img = imagePaths[i];
      console.log(`üì∏ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è ${i + 1}/${imagePaths.length}: ${img}`);
      
      const buf = await generateTechnicalPlan(img, mode);
      buffers.push(buf);
      
      // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è –Ω–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ COMETAPI
      if (i < imagePaths.length - 1) {
        const delay = 2000 + Math.random() * 1000; // 2-3 —Å–µ–∫—É–Ω–¥—ã
        console.log(`‚è≥ –ó–∞–¥–µ—Ä–∂–∫–∞ ${Math.round(delay)}–º—Å –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º...`);
        await new Promise(resolve => setTimeout(resolve, delay));
      }
    }

    // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
    for (const p of imagePaths) {
      try { fs.unlinkSync(p); } catch {}
    }

    if (buffers.length === 1) {
      res.setHeader('Content-Type', 'image/jpeg');
      return res.send(buffers[0]);
    }
    const payload = buffers.map(b => `data:image/jpeg;base64,${b.toString('base64')}`);
    res.status(200).json({ images: payload });

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –ø–ª–∞–Ω–∞:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –ø–ª–∞–Ω–∞: ' + error.message });
  }
});

// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤ (–æ—á–∏—Å—Ç–∫–∞ –∫–æ–º–Ω–∞—Ç—ã)
app.post('/api/remove-objects', upload.array('image', 5), async (req, res) => {
  try {
    if (!req.files || req.files.length === 0) {
      return res.status(400).json({ error: '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã' });
    }

    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø–µ—Ä–µ–≥—Ä—É–∑–∫–∏
    if (req.files.length > 5) {
      return res.status(400).json({ 
        error: '–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π. –ú–∞–∫—Å–∏–º—É–º 5 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∑–∞ —Ä–∞–∑.' 
      });
    }

    if (!isCometApiKeyValid) {
      return res.status(503).json({ 
        error: '–°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω.',
        code: 'API_KEY_MISSING'
      });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤
    const authHeader = req.headers['authorization'];
    let authUser = null;

    if (authHeader && authHeader.startsWith('Bearer ')) {
      const token = authHeader.split(' ')[1];
      try {
        const decoded = jwt.verify(token, JWT_SECRET);
        authUser = userDB.findById(decoded.id);
        if (!authUser) {
          return res.status(401).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }
      } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –æ–±—ä–µ–∫—Ç–æ–≤:', err);
        return res.status(401).json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω' });
      }
    }

    const isDirector = authUser?.role === 'director';
    const isOrganization = authUser?.access_prefix === '–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è';
    const hasUnlimitedAccess = isDirector || isOrganization;

    console.log(`üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤ (—É–¥–∞–ª–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–æ–≤):`, {
      userId: authUser?.id,
      username: authUser?.username,
      role: authUser?.role,
      accessPrefix: authUser?.access_prefix,
      isDirector,
      isOrganization,
      hasUnlimitedAccess
    });

    if (authUser) {
      // –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
      if (!hasUnlimitedAccess) {
        // –û–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –ø—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã
        if (authUser.plans_used >= MAX_USER_PLANS) {
          return res.status(403).json({ error: '–õ–∏–º–∏—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–π –∏—Å—á–µ—Ä–ø–∞–Ω', code: 'PLAN_LIMIT' });
        }
        userDB.incrementPlanUsage(authUser.id);
        authUser.plans_used += 1;
        console.log(`üìä –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${authUser.username} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª —É–¥–∞–ª–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–æ–≤ (${authUser.plans_used}/${MAX_USER_PLANS})`);
      } else {
        console.log(`‚ôæÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${authUser.username} –∏–º–µ–µ—Ç –±–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π –¥–æ—Å—Ç—É–ø –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤`);
      }
    } else {
      // –ì–æ—Å—Ç—å - –ø—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã –ø–æ IP
      const forwarded = req.headers['x-forwarded-for'];
      const clientIp = forwarded ? forwarded.split(',')[0].trim() : req.ip;
      const usage = guestUsage.get(clientIp) || { plans: 0 };
      if (usage.plans >= MAX_GUEST_PLANS) {
        return res.status(403).json({ error: '–õ–∏–º–∏—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–π –¥–ª—è –≥–æ—Å—Ç–µ–π –∏—Å—á–µ—Ä–ø–∞–Ω', code: 'GUEST_LIMIT' });
      }
      usage.plans += 1;
      guestUsage.set(clientIp, usage);
      console.log(`üë§ –ì–æ—Å—Ç—å —Å IP ${clientIp} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª —É–¥–∞–ª–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–æ–≤ (${usage.plans}/${MAX_GUEST_PLANS})`);
    }

    const imagePaths = req.files.map(f => f.path);
    console.log(`–û–±—Ä–∞–±–æ—Ç–∫–∞ ${imagePaths.length} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤`);

    const buffers = [];
    for (let i = 0; i < imagePaths.length; i++) {
      const img = imagePaths[i];
      console.log(`üßπ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è ${i + 1}/${imagePaths.length}: ${img}`);
      
      const buf = await generateCleanupImage({ imagePaths: [img] });
      buffers.push(buf[0]); // generateCleanupImage –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞—Å—Å–∏–≤
      
      // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è –Ω–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ COMETAPI
      if (i < imagePaths.length - 1) {
        const delay = 2000 + Math.random() * 1000; // 2-3 —Å–µ–∫—É–Ω–¥—ã
        console.log(`‚è≥ –ó–∞–¥–µ—Ä–∂–∫–∞ ${Math.round(delay)}–º—Å –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º...`);
        await new Promise(resolve => setTimeout(resolve, delay));
      }
    }

    // –ß–∏—Å—Ç–∏–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
    for (const p of imagePaths) {
      try { fs.unlinkSync(p); } catch {}
    }

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –º–∞—Å—Å–∏–≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∫–∞–∫ base64 –¥–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤, –∏ –æ–¥–∏–Ω–æ—á–Ω—ã–π –±—É—Ñ–µ—Ä –µ—Å–ª–∏ –±—ã–ª 1 —Ñ–∞–π–ª
    if (buffers.length === 1) {
      res.setHeader('Content-Type', 'image/jpeg');
      return res.send(buffers[0]);
    }
    const payload = buffers.map(b => `data:image/jpeg;base64,${b.toString('base64')}`);
    res.status(200).json({ images: payload });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤: ' + error.message });
  }
});

// Health check endpoint
app.get('/healthz', (req, res) => {
  res.status(200).json({ status: 'ok', timestamp: new Date().toISOString() });
});

// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ–±–µ–ª–∏
app.get('/api/furniture', (req, res) => {
  try {
    const furnitureData = JSON.parse(fs.readFileSync(path.join(__dirname, 'furniture.json'), 'utf8'));
    res.json(furnitureData);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ–±–µ–ª–∏:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –º–µ–±–µ–ª–∏' });
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ multer
app.use((error, req, res, next) => {
  if (error instanceof multer.MulterError) {
    if (error.code === 'LIMIT_FILE_SIZE') {
      return res.status(400).json({ error: '–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 10MB' });
    }
  }
  res.status(500).json({ error: error.message });
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∏—Å–∫–ª—é—á–µ–Ω–∏–π
process.on('uncaughtException', (error) => {
  console.error('‚ùå –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ:', error);
  console.error('üìä –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', {
    message: error.message,
    stack: error.stack,
    name: error.name
  });
  process.exit(1);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –ø—Ä–æ–º–∏—Å–æ–≤
process.on('unhandledRejection', (reason, promise) => {
  console.error('‚ùå –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –ø—Ä–æ–º–∏—Å–∞:', reason);
  console.error('üìä –ü—Ä–æ–º–∏—Å:', promise);
  process.exit(1);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
process.on('SIGTERM', () => {
  console.log('üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGTERM, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É...');
  process.exit(0);
});

process.on('SIGINT', () => {
  console.log('üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGINT, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É...');
  process.exit(0);
});

const server = app.listen(PORT, HOST, () => {
  console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ ${HOST}:${PORT}`);
  if (process.env.NODE_ENV !== 'production') {
    console.log(`üåê Health check: http://${HOST === '0.0.0.0' ? 'localhost' : HOST}:${PORT}/healthz`);
    console.log(`üìä API endpoints:`);
    console.log(`   POST /api/generate-technical-plan - –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –ø–ª–∞–Ω–∞`);
    console.log(`   GET  /api/furniture - –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –º–µ–±–µ–ª–∏`);
    console.log(`   POST /api/auth/register - —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è`);
    console.log(`   POST /api/auth/login - –≤—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è`);
    console.log(`   GET  /api/auth/settings - –ø–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è`);
    console.log(`   POST /api/auth/settings - —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è`);
    console.log(`   GET  /api/auth/agency - –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∞–≥–µ–Ω—Ç—Å—Ç–≤–∞`);
    console.log(`   POST /api/auth/agency - —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∞–≥–µ–Ω—Ç—Å—Ç–≤–∞`);
    console.log(`   GET  /healthz - –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–µ—Ä–∞`);
    console.log(`üîß –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:`);
    console.log(`   NODE_ENV: ${process.env.NODE_ENV || '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ'}`);
    console.log(`   PORT: ${PORT}`);
    console.log(`   HOST: ${HOST}`);
    console.log(`   COMETAPI –∫–ª—é—á –Ω–∞—Å—Ç—Ä–æ–µ–Ω: ${isCometApiKeyValid ? '–î–∞' : '–ù–µ—Ç'}`);
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —Å–µ—Ä–≤–µ—Ä–∞
server.on('error', (error) => {
  console.error('‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:', error);
  if (error.code === 'EADDRINUSE') {
    console.error(`‚ùå –ü–æ—Ä—Ç ${PORT} —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è`);
  } else if (error.code === 'EACCES') {
    console.error(`‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–æ—Ä—Ç–∞ ${PORT}`);
  }
  process.exit(1);
});

// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å–ª—É—à–∞–µ—Ç
server.on('listening', () => {
  const address = server.address();
  console.log(`üéØ –°–µ—Ä–≤–µ—Ä —Å–ª—É—à–∞–µ—Ç –Ω–∞ ${address.address}:${address.port}`);
});

// –í –°–ê–ú–û–ú –ö–û–ù–¶–ï: SPA –º–∞—Ä—à—Ä—É—Ç - –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ index.html
app.get('*', (req, res) => {
  res.sendFile(path.join(__dirname, '..', 'frontend/dist/index.html'));
});
