import 'dotenv/config';
import express from 'express';
import cors from 'cors';
import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';
import jwt from 'jsonwebtoken';
import multer from 'multer';
import { generateTechnicalPlan, checkCometApiHealth, generateCleanupImage } from './src/cometApiGenerator.mjs';
import authRoutes from './src/authRoutes.mjs';
import { userDB, imageUrlsDB } from './src/database.mjs';
import { generateImageUrl, uploadToExternalService } from './src/imageUrlService.mjs';

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
import dotenv from 'dotenv';
dotenv.config();

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);


// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ñ–∞–π–ª–æ–≤
console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤:');
const requiredFiles = [
  'furniture.json',
  'src/cometApiGenerator.mjs'
];

requiredFiles.forEach(file => {
  const filePath = path.join(__dirname, file);
  const exists = fs.existsSync(filePath);
  console.log(`   ${file}: ${exists ? '‚úÖ' : '‚ùå'}`);
  if (!exists) {
    console.error(`‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —Ñ–∞–π–ª –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç: ${file}`);
  }
});

const app = express();
const PORT = process.env.PORT || 3001;
const JWT_SECRET = process.env.JWT_SECRET || 'your-secret-key-change-in-production';

// –õ–æ–≥–∏—Ä—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
console.log('üîß –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:');
console.log(`   NODE_ENV: ${process.env.NODE_ENV}`);
console.log(`   PORT: ${PORT}`);
console.log(`   COMET_API_KEY: ${process.env.COMET_API_KEY ? '—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' : '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}`);

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ multer –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–æ–≤
const upload = multer({ 
  storage: multer.memoryStorage(),
  limits: {
    fileSize: 10 * 1024 * 1024, // 10MB –ª–∏–º–∏—Ç –Ω–∞ —Ñ–∞–π–ª
    files: 5 // –º–∞–∫—Å–∏–º—É–º 5 —Ñ–∞–π–ª–æ–≤
  }
});

const guestUsage = new Map();
const MAX_GUEST_PLANS = 1;
const MAX_USER_PLANS = 1;

// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É
console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã:');
console.log('–¢–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è:', process.cwd());
console.log('–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏:', fs.readdirSync(process.cwd()));
console.log('–°—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ server.mjs:', fs.existsSync('server.mjs'));
console.log('–°—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ package.json:', fs.existsSync('package.json'));

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ API –∫–ª—é—á–∞
console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ API –∫–ª—é—á–∞:');
console.log('COMET_API_KEY —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω:', !!process.env.COMET_API_KEY);
console.log('COMET_API_KEY –∑–Ω–∞—á–µ–Ω–∏–µ:', process.env.COMET_API_KEY ? '***—Å–∫—Ä—ã—Ç–æ***' : '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
console.log('–í—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:', Object.keys(process.env).filter(key => key.includes('COMET') || key.includes('NODE') || key.includes('PORT')));

// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π:');
try {
  const sharp = await import('sharp');
  console.log('‚úÖ Sharp –∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ');
  console.log('Sharp –≤–µ—Ä—Å–∏—è:', sharp.default.versions);
} catch (error) {
  console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ Sharp:', error.message);
  console.error('–≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–≤—è–∑–∞–Ω–æ —Å –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫');
}

const isCometApiKeyValid = process.env.COMET_API_KEY && 
    process.env.COMET_API_KEY !== 'YOUR_COMET_API_KEY_HERE' && 
    process.env.COMET_API_KEY !== 'your_comet_api_key_here';

if (!isCometApiKeyValid) {
  console.warn('‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: COMETAPI –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!');
  console.warn('üìù –î–ª—è —Ä–∞–±–æ—Ç—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –ø–ª–∞–Ω–æ–≤ –¥–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è:');
  console.warn('   COMET_API_KEY=–≤–∞—à_comet_api_–∫–ª—é—á_–∑–¥–µ—Å—å');
  console.warn('üîó –ü–æ–ª—É—á–∏—Ç–µ –∫–ª—é—á –Ω–∞ https://cometapi.com');
  console.warn('‚ö†Ô∏è  –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—Å—Ç–∏—Ç—Å—è, –Ω–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –ø–ª–∞–Ω–æ–≤ –±—É–¥–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞!');
} else {
  console.log('‚úÖ COMETAPI –∫–ª—é—á –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
}

// Middleware
app.use(cors({
  origin: [
    'https://acqu1red.github.io',
    'https://acqu1red.github.io/latar',
    'https://acqu1red-latar-4004.twc1.net',
    'http://localhost:3000',
    'http://localhost:5173'
  ],
  credentials: true
}));

// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ CORS –∑–∞–ø—Ä–æ—Å–æ–≤
app.use((req, res, next) => {
  console.log(`üåê ${req.method} ${req.path} - Origin: ${req.get('Origin') || '–Ω–µ —É–∫–∞–∑–∞–Ω'}`);
  next();
});
app.use(express.json());
app.use(express.static(path.join(__dirname, '..', 'frontend/dist')));


// Auth routes
app.use('/api/auth', authRoutes);

// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (–∑–∞–≥–ª—É—à–∫–∞)
app.get('/temp-images/:filename', (req, res) => {
  // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –æ—Ç–¥–∞–≤–∞—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
  // –ü–æ–∫–∞ —á—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
  res.status(404).json({ 
    error: '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ',
    message: '–í—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –ª–æ–∫–∞–ª—å–Ω–æ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–Ω–µ—à–Ω–∏–µ —Å–µ—Ä–≤–∏—Å—ã –¥–ª—è production.'
  });
});

// –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø–æ–¥–¥–æ–º–µ–Ω–∞ new
app.get('/new', (req, res) => {
  const newHtmlPath = path.join(__dirname, '..', 'frontend/dist/new.html');
  if (fs.existsSync(newHtmlPath)) {
    res.sendFile(newHtmlPath);
  } else {
    res.status(404).send('new.html not found');
  }
});

app.get('/new/*', (req, res) => {
  const newHtmlPath = path.join(__dirname, '..', 'frontend/dist/new.html');
  if (fs.existsSync(newHtmlPath)) {
    res.sendFile(newHtmlPath);
  } else {
    res.status(404).send('new.html not found');
  }
});

// SPA –º–∞—Ä—à—Ä—É—Ç - –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ index.html
app.get('*', (req, res) => {
  res.sendFile(path.join(__dirname, '..', 'frontend/dist/index.html'));
});



// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –ø–ª–∞–Ω–∞
app.post('/api/generate-technical-plan', upload.array('image', 5), async (req, res) => {
  try {
    console.log('üì• –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –ø–ª–∞–Ω–∞');
    console.log('üìã –¢–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞:', {
      hasFiles: !!req.files,
      filesLength: req.files?.length,
      mode: req.body.mode,
      bodyKeys: Object.keys(req.body)
    });
    
    const files = req.files;
    const { mode } = req.body;
    
    if (!files || !Array.isArray(files) || files.length === 0) {
      console.log('‚ùå –û—à–∏–±–∫–∞: –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã');
      return res.status(400).json({ error: '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã' });
    }

    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø–µ—Ä–µ–≥—Ä—É–∑–∫–∏
    if (files.length > 5) {
      return res.status(400).json({ 
        error: '–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π. –ú–∞–∫—Å–∏–º—É–º 5 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∑–∞ —Ä–∞–∑.' 
      });
    }
    
    if (!mode || !['withFurniture', 'withoutFurniture'].includes(mode)) {
      return res.status(400).json({ 
        error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ä–µ–∂–∏–º. –î–æ–ø—É—Å—Ç–∏–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: withFurniture, withoutFurniture' 
      });
    }

    // COMETAPI –∫–ª—é—á –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω
    if (!isCometApiKeyValid) {
      return res.status(503).json({ 
        error: '–°–µ—Ä–≤–∏—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –ø–ª–∞–Ω–æ–≤ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω.',
        code: 'API_KEY_MISSING'
      });
    }

    const authHeader = req.headers['authorization'];
    let authUser = null;

    if (authHeader && authHeader.startsWith('Bearer ')) {
      const token = authHeader.split(' ')[1];
      try {
        const decoded = jwt.verify(token, JWT_SECRET);
        authUser = userDB.findById(decoded.id);
        if (!authUser) {
          return res.status(401).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }
      } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–ª–∞–Ω–∞:', err);
        return res.status(401).json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω' });
      }
    }

    const isDirector = authUser?.role === 'director';
    const isOrganization = authUser?.access_prefix === '–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è';

    if (authUser && !isDirector && !isOrganization) {
      if (authUser.plans_used >= MAX_USER_PLANS) {
        return res.status(403).json({ error: '–õ–∏–º–∏—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–π –∏—Å—á–µ—Ä–ø–∞–Ω', code: 'PLAN_LIMIT' });
      }
      userDB.incrementPlanUsage(authUser.id);
      authUser.plans_used += 1;
    }

    if (!authUser) {
      const forwarded = req.headers['x-forwarded-for'];
      const clientIp = forwarded ? forwarded.split(',')[0].trim() : req.ip;
      const usage = guestUsage.get(clientIp) || { plans: 0 };
      if (usage.plans >= MAX_GUEST_PLANS) {
        return res.status(403).json({ error: '–õ–∏–º–∏—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–π –¥–ª—è –≥–æ—Å—Ç–µ–π –∏—Å—á–µ—Ä–ø–∞–Ω', code: 'GUEST_LIMIT' });
      }
      usage.plans += 1;
      guestUsage.set(clientIp, usage);
    }

    console.log(`–û–±—Ä–∞–±–æ—Ç–∫–∞ ${files.length} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –ø–ª–∞–Ω–∞ (—Ä–µ–∂–∏–º: ${mode})`);

    const results = [];
    for (let i = 0; i < files.length; i++) {
      const file = files[i];
      console.log(`üì∏ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è ${i + 1}/${files.length}: ${file.originalname}`);
      
      // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –∏–∑ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
      const tempFilePath = path.join(__dirname, `temp_${Date.now()}_${i}.jpg`);
      try {
        // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ñ–∞–π–ª –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        fs.writeFileSync(tempFilePath, file.buffer);
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –ø–ª–∞–Ω
        const generatedBuffer = await generateTechnicalPlan(tempFilePath, mode);
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º URL –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        const urlData = generateImageUrl('generated_plan', `plan_${i}.jpg`, {
          mode,
          originalSize: buffer.length,
          processedAt: new Date().toISOString()
        });
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞ –≤–Ω–µ—à–Ω–∏–π —Å–µ—Ä–≤–∏—Å
        const uploadResult = await uploadToExternalService(generatedBuffer, urlData.filename);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º URL –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        const dbResult = imageUrlsDB.save(
          authUser?.id || null,
          'generated_plan',
          `plan_${i}.jpg`,
          uploadResult.imageUrl,
          uploadResult.thumbnailUrl,
          {
            ...urlData.metadata,
            uploadResult: {
              service: uploadResult.service || 'temporary',
              deleteData: uploadResult.deleteHash || uploadResult.publicId || uploadResult.localPath
            }
          }
        );
        
        results.push({
          id: dbResult.lastInsertRowid,
          imageUrl: uploadResult.imageUrl,
          thumbnailUrl: uploadResult.thumbnailUrl,
          originalFilename: `plan_${i}.jpg`,
          mode,
          createdAt: new Date().toISOString()
        });
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è –Ω–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ COMETAPI
        if (i < images.length - 1) {
          const delay = 2000 + Math.random() * 1000; // 2-3 —Å–µ–∫—É–Ω–¥—ã
          console.log(`‚è≥ –ó–∞–¥–µ—Ä–∂–∫–∞ ${Math.round(delay)}–º—Å –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º...`);
          await new Promise(resolve => setTimeout(resolve, delay));
        }
      } finally {
        // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        try { 
          fs.unlinkSync(tempFilePath); 
        } catch (unlinkError) {
          console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª:', tempFilePath);
        }
      }
    }

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å URL
    if (results.length === 1) {
      res.status(200).json({
        success: true,
        result: results[0],
        message: '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –ø–ª–∞–Ω —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω'
      });
    } else {
      res.status(200).json({
        success: true,
        results: results,
        message: `–°–æ–∑–¥–∞–Ω–æ ${results.length} —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –ø–ª–∞–Ω–æ–≤`
      });
    }

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –ø–ª–∞–Ω–∞:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –ø–ª–∞–Ω–∞: ' + error.message });
  }
});

// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤ (–æ—á–∏—Å—Ç–∫–∞ –∫–æ–º–Ω–∞—Ç—ã)
app.post('/api/remove-objects', upload.array('image', 5), async (req, res) => {
  try {
    const files = req.files;
    
    if (!files || !Array.isArray(files) || files.length === 0) {
      return res.status(400).json({ error: '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã' });
    }

    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø–µ—Ä–µ–≥—Ä—É–∑–∫–∏
    if (files.length > 5) {
      return res.status(400).json({ 
        error: '–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π. –ú–∞–∫—Å–∏–º—É–º 5 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∑–∞ —Ä–∞–∑.' 
      });
    }

    // COMETAPI –∫–ª—é—á –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω
    if (!isCometApiKeyValid) {
      return res.status(503).json({ 
        error: '–°–µ—Ä–≤–∏—Å —É–¥–∞–ª–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω.',
        code: 'API_KEY_MISSING'
      });
    }

    const authHeader = req.headers['authorization'];
    let authUser = null;

    if (authHeader && authHeader.startsWith('Bearer ')) {
      const token = authHeader.split(' ')[1];
      try {
        const decoded = jwt.verify(token, JWT_SECRET);
        authUser = userDB.findById(decoded.id);
        if (!authUser) {
          return res.status(401).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }
      } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –æ–±—ä–µ–∫—Ç–æ–≤:', err);
        return res.status(401).json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω' });
      }
    }

    const isDirector = authUser?.role === 'director';
    const isOrganization = authUser?.access_prefix === '–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è';

    if (authUser && !isDirector && !isOrganization) {
      if (authUser.plans_used >= MAX_USER_PLANS) {
        return res.status(403).json({ error: '–õ–∏–º–∏—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–π –∏—Å—á–µ—Ä–ø–∞–Ω', code: 'PLAN_LIMIT' });
      }
      userDB.incrementPlanUsage(authUser.id);
      authUser.plans_used += 1;
    } else if (!authUser) {
      // –ì–æ—Å—Ç–µ–≤–æ–π –¥–æ—Å—Ç—É–ø
      const forwarded = req.headers['x-forwarded-for'];
      const clientIp = forwarded ? forwarded.split(',')[0].trim() : req.ip;
      const usage = guestUsage.get(clientIp) || { plans: 0 };
      if (usage.plans >= MAX_GUEST_PLANS) {
        return res.status(403).json({ error: '–õ–∏–º–∏—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–π –¥–ª—è –≥–æ—Å—Ç–µ–π –∏—Å—á–µ—Ä–ø–∞–Ω', code: 'GUEST_LIMIT' });
      }
      usage.plans += 1;
      guestUsage.set(clientIp, usage);
    }

    console.log(`–û–±—Ä–∞–±–æ—Ç–∫–∞ ${files.length} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤`);

    const results = [];
    for (let i = 0; i < files.length; i++) {
      const file = files[i];
      console.log(`üßπ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è ${i + 1}/${files.length}: ${file.originalname}`);
      
      // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –∏–∑ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
      const tempFilePath = path.join(__dirname, `temp_cleanup_${Date.now()}_${i}.jpg`);
      try {
        // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ñ–∞–π–ª –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        fs.writeFileSync(tempFilePath, file.buffer);
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—á–∏—â–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        const generatedBuffer = await generateCleanupImage({ imagePaths: [tempFilePath] });
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º URL –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        const urlData = generateImageUrl('generated_cleanup', `cleanup_${i}.jpg`, {
          originalSize: file.buffer.length,
          processedAt: new Date().toISOString()
        });
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞ –≤–Ω–µ—à–Ω–∏–π —Å–µ—Ä–≤–∏—Å
        const uploadResult = await uploadToExternalService(generatedBuffer[0], urlData.filename);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º URL –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        const dbResult = imageUrlsDB.save(
          authUser?.id || null,
          'generated_cleanup',
          `cleanup_${i}.jpg`,
          uploadResult.imageUrl,
          uploadResult.thumbnailUrl,
          {
            ...urlData.metadata,
            uploadResult: {
              service: uploadResult.service || 'temporary',
              deleteData: uploadResult.deleteHash || uploadResult.publicId || uploadResult.localPath
            }
          }
        );
        
        results.push({
          id: dbResult.lastInsertRowid,
          imageUrl: uploadResult.imageUrl,
          thumbnailUrl: uploadResult.thumbnailUrl,
          originalFilename: `cleanup_${i}.jpg`,
          createdAt: new Date().toISOString()
        });
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è –Ω–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ COMETAPI
        if (i < images.length - 1) {
          const delay = 2000 + Math.random() * 1000; // 2-3 —Å–µ–∫—É–Ω–¥—ã
          console.log(`‚è≥ –ó–∞–¥–µ—Ä–∂–∫–∞ ${Math.round(delay)}–º—Å –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º...`);
          await new Promise(resolve => setTimeout(resolve, delay));
        }
      } finally {
        // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        try { 
          fs.unlinkSync(tempFilePath); 
        } catch (unlinkError) {
          console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª:', tempFilePath);
        }
      }
    }

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å URL
    if (results.length === 1) {
      res.status(200).json({
        success: true,
        result: results[0],
        message: '–û–±—ä–µ–∫—Ç—ã —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã'
      });
    } else {
      res.status(200).json({
        success: true,
        results: results,
        message: `–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${results.length} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π`
      });
    }

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤: ' + error.message });
  }
});

// Health check endpoint
app.get('/healthz', (req, res) => {
  res.status(200).json({ status: 'ok', timestamp: new Date().toISOString() });
});

// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ–±–µ–ª–∏
app.get('/api/furniture', (req, res) => {
  try {
    const furnitureData = JSON.parse(fs.readFileSync(path.join(__dirname, 'furniture.json'), 'utf8'));
    res.json(furnitureData);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ–±–µ–ª–∏:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –º–µ–±–µ–ª–∏' });
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
app.use((error, req, res, next) => {
  console.error('–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:', error);
  res.status(500).json({ error: error.message });
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∏—Å–∫–ª—é—á–µ–Ω–∏–π
process.on('uncaughtException', (error) => {
  console.error('‚ùå –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ:', error);
  console.error('üìä –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', {
    message: error.message,
    stack: error.stack,
    name: error.name
  });
  process.exit(1);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –ø—Ä–æ–º–∏—Å–æ–≤
process.on('unhandledRejection', (reason, promise) => {
  console.error('‚ùå –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –ø—Ä–æ–º–∏—Å–∞:', reason);
  console.error('üìä –ü—Ä–æ–º–∏—Å:', promise);
  process.exit(1);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
process.on('SIGTERM', () => {
  console.log('üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGTERM, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É...');
  process.exit(0);
});

process.on('SIGINT', () => {
  console.log('üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGINT, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É...');
  process.exit(0);
});

const server = app.listen(PORT, '0.0.0.0', () => {
  console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
  console.log(`üåê Health check –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: http://0.0.0.0:${PORT}/healthz`);
  console.log(`üìä API endpoints:`);
  console.log(`   POST /api/generate-technical-plan - –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –ø–ª–∞–Ω–∞`);
  console.log(`   GET  /api/furniture - –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –º–µ–±–µ–ª–∏`);
  console.log(`   POST /api/auth/register - —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è`);
  console.log(`   POST /api/auth/login - –≤—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è`);
  console.log(`   GET  /api/auth/settings - –ø–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è`);
  console.log(`   POST /api/auth/settings - —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è`);
  console.log(`   GET  /api/auth/agency - –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∞–≥–µ–Ω—Ç—Å—Ç–≤–∞`);
  console.log(`   POST /api/auth/agency - —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∞–≥–µ–Ω—Ç—Å—Ç–≤–∞`);
  console.log(`   GET  /healthz - –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–µ—Ä–∞`);
  console.log(`‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ –∫ —Ä–∞–±–æ—Ç–µ!`);
  console.log(`üîß –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:`);
  console.log(`   NODE_ENV: ${process.env.NODE_ENV || '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ'}`);
  console.log(`   PORT: ${PORT}`);
  console.log(`   COMETAPI –∫–ª—é—á –Ω–∞—Å—Ç—Ä–æ–µ–Ω: ${isCometApiKeyValid ? '–î–∞' : '–ù–µ—Ç'}`);
  console.log(`üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–¥—É–ª–µ–π:`);
  console.log(`   sharp: ${typeof sharp !== 'undefined' ? '‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω' : '‚ùå –ù–µ –∑–∞–≥—Ä—É–∂–µ–Ω'}`);
  console.log(`   express: ${typeof express !== 'undefined' ? '‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω' : '‚ùå –ù–µ –∑–∞–≥—Ä—É–∂–µ–Ω'}`);
  console.log(`   multer: ${typeof multer !== 'undefined' ? '‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω' : '‚ùå –ù–µ –∑–∞–≥—Ä—É–∂–µ–Ω'}`);
  console.log(`üéØ –°–µ—Ä–≤–µ—Ä —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –∏ —Å–ª—É—à–∞–µ—Ç –ø–æ—Ä—Ç ${PORT}`);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —Å–µ—Ä–≤–µ—Ä–∞
server.on('error', (error) => {
  console.error('‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:', error);
  if (error.code === 'EADDRINUSE') {
    console.error(`‚ùå –ü–æ—Ä—Ç ${PORT} —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è`);
  } else if (error.code === 'EACCES') {
    console.error(`‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–æ—Ä—Ç–∞ ${PORT}`);
  }
  process.exit(1);
});

// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å–ª—É—à–∞–µ—Ç
server.on('listening', () => {
  const address = server.address();
  console.log(`üéØ –°–µ—Ä–≤–µ—Ä —Å–ª—É—à–∞–µ—Ç –Ω–∞ ${address.address}:${address.port}`);
  console.log(`‚úÖ –°–µ—Ä–≤–µ—Ä –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!`);
});

// –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è graceful shutdown
process.on('SIGTERM', () => {
  console.log('üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGTERM, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É...');
  server.close(() => {
    console.log('‚úÖ –°–µ—Ä–≤–µ—Ä –∑–∞–∫—Ä—ã—Ç');
    process.exit(0);
  });
});
