#!/usr/bin/env node

import fetch from 'node-fetch';

const API_BASE_URL = 'https://competitive-camellia-latar-a11ca532.koyeb.app';

async function testServerStatus() {
    console.log('üß™ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞...');
    
    try {
        // –¢–µ—Å—Ç 1: Health check
        console.log('\n1Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º health check...');
        const healthResponse = await fetch(`${API_BASE_URL}/healthz`, {
            method: 'GET',
            headers: {
                'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36'
            }
        });
        
        console.log('üì• Health check —Å—Ç–∞—Ç—É—Å:', healthResponse.status);
        console.log('üì• –í—Å–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞:');
        for (const [key, value] of healthResponse.headers.entries()) {
            console.log(`  - ${key}: ${value}`);
        }
        
        if (healthResponse.ok) {
            const data = await healthResponse.json();
            console.log('‚úÖ Health check —É—Å–ø–µ—à–µ–Ω:', data);
        } else {
            console.log('‚ùå Health check –Ω–µ—É–¥–∞—á–µ–Ω');
        }
        
        // –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ CORS –∑–∞–≥–æ–ª–æ–≤–∫–∏
        console.log('\n2Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º CORS –∑–∞–≥–æ–ª–æ–≤–∫–∏...');
        const corsResponse = await fetch(`${API_BASE_URL}/healthz`, {
            method: 'GET',
            headers: {
                'Origin': 'https://acqu1red.github.io',
                'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36'
            }
        });
        
        console.log('üì• CORS —Ç–µ—Å—Ç —Å—Ç–∞—Ç—É—Å:', corsResponse.status);
        console.log('üì• CORS –∑–∞–≥–æ–ª–æ–≤–∫–∏:');
        for (const [key, value] of corsResponse.headers.entries()) {
            if (key.toLowerCase().includes('access-control')) {
                console.log(`  - ${key}: ${value}`);
            }
        }
        
        if (corsResponse.headers.get('access-control-allow-origin')) {
            console.log('‚úÖ CORS –∑–∞–≥–æ–ª–æ–≤–∫–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç');
        } else {
            console.log('‚ùå CORS –∑–∞–≥–æ–ª–æ–≤–∫–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç');
        }
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞:', error.message);
    }
}

testServerStatus();
