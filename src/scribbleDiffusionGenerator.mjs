import fetch from 'node-fetch';
import fs from 'fs';
import path from 'path';
import { createEnhancedSketch } from './localImageGenerator.mjs';

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∏–∑ —ç—Å–∫–∏–∑–∞ –∏—Å–ø–æ–ª—å–∑—É—è ScribbleDiffusion API
 * @param {string} sketchPath - –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —ç—Å–∫–∏–∑–∞
 * @param {string} prompt - –¢–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∂–µ–ª–∞–µ–º–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
 * @returns {Promise<Buffer>} –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
 */
export async function generatePhotoFromSketch(sketchPath, prompt) {
  try {
    console.log('üé® –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∏–∑ —ç—Å–∫–∏–∑–∞ —á–µ—Ä–µ–∑ Scribble Diffusion API');
    console.log('–≠—Å–∫–∏–∑:', sketchPath);
    console.log('–ü—Ä–æ–º–ø—Ç:', prompt);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ API –∫–ª—é—á–∞ –¥–ª—è Scribble Diffusion
    if (!process.env.SCRIBBLE_DIFFUSION_API_KEY) {
      throw new Error('SCRIBBLE_DIFFUSION_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –î–æ–±–∞–≤—å—Ç–µ API –∫–ª—é—á –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è.');
    }

    // –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª —ç—Å–∫–∏–∑–∞
    const sketchBuffer = fs.readFileSync(sketchPath);
    const sketchBase64 = sketchBuffer.toString('base64');
    const sketchDataUrl = `data:image/png;base64,${sketchBase64}`;

    // –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫ Scribble Diffusion API
    const response = await fetch('https://api.scribblediffusion.com/v1/generate', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${process.env.SCRIBBLE_DIFFUSION_API_KEY}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        image: sketchDataUrl,
        prompt: prompt,
        num_inference_steps: 20,
        guidance_scale: 7.5,
        negative_prompt: "blurry, low quality, distorted, ugly, bad anatomy, deformed"
      })
    });

    if (!response.ok) {
      const errorText = await response.text();
      console.error(`‚ùå –û—à–∏–±–∫–∞ Scribble Diffusion API: ${response.status} - ${errorText}`);
      
      if (response.status === 401) {
        throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π API –∫–ª—é—á Scribble Diffusion. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –∫–ª—é—á–∞.');
      } else if (response.status === 402) {
        throw new Error('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫—Ä–µ–¥–∏—Ç–æ–≤ –Ω–∞ Scribble Diffusion. –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å.');
      } else if (response.status === 429) {
        throw new Error('–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
      } else {
        throw new Error(`–û—à–∏–±–∫–∞ API: ${response.status} - ${errorText}`);
      }
    }

    const result = await response.json();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞–ø—Ä—è–º—É—é
    if (result.image) {
      console.log('‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ –Ω–∞–ø—Ä—è–º—É—é –æ—Ç API');
      const imageBuffer = Buffer.from(result.image, 'base64');
      console.log('‚úÖ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞, —Ä–∞–∑–º–µ—Ä:', imageBuffer.length, '–±–∞–π—Ç');
      return imageBuffer;
    }
    
    // –ï—Å–ª–∏ API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    if (result.imageUrl) {
      console.log('üì• –°–∫–∞—á–∏–≤–∞–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:', result.imageUrl);
      const imageResponse = await fetch(result.imageUrl);
      if (!imageResponse.ok) {
        throw new Error(`–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: ${imageResponse.status}`);
      }
      const imageBuffer = await imageResponse.buffer();
      console.log('‚úÖ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞, —Ä–∞–∑–º–µ—Ä:', imageBuffer.length, '–±–∞–π—Ç');
      return imageBuffer;
    }
    
    // –ï—Å–ª–∏ API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç ID –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è (–∫–∞–∫ Replicate)
    if (result.id) {
      console.log('‚úÖ –ó–∞–ø—Ä–æ—Å —Å–æ–∑–¥–∞–Ω, ID:', result.id);
      const finalResult = await waitForCompletion(result.id);
      
      if (!finalResult || !finalResult.output || finalResult.output.length === 0) {
        throw new Error('–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —É—Å–ø–µ—à–Ω–æ');
      }

      const imageUrl = finalResult.output[0];
      console.log('üì• –°–∫–∞—á–∏–≤–∞–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:', imageUrl);
      
      const imageResponse = await fetch(imageUrl);
      if (!imageResponse.ok) {
        throw new Error(`–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: ${imageResponse.status}`);
      }

      const imageBuffer = await imageResponse.buffer();
      console.log('‚úÖ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞, —Ä–∞–∑–º–µ—Ä:', imageBuffer.length, '–±–∞–π—Ç');
      return imageBuffer;
    }
    
    throw new Error('–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç API');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏:', error);
    throw error;
  }
}

/**
 * –û–∂–∏–¥–∞–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
 * @param {string} predictionId - ID –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
 * @returns {Promise<Object>} –†–µ–∑—É–ª—å—Ç–∞—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
 */
async function waitForCompletion(predictionId) {
  const maxAttempts = 60; // 5 –º–∏–Ω—É—Ç –º–∞–∫—Å–∏–º—É–º
  let attempts = 0;

  while (attempts < maxAttempts) {
    try {
      const response = await fetch(`https://api.scribblediffusion.com/v1/status/${predictionId}`, {
        headers: {
          'Authorization': `Bearer ${process.env.SCRIBBLE_DIFFUSION_API_KEY}`,
        }
      });

      if (!response.ok) {
        throw new Error(`–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞: ${response.status}`);
      }

      const result = await response.json();
      console.log(`‚è≥ –°—Ç–∞—Ç—É—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: ${result.status} (–ø–æ–ø—ã—Ç–∫–∞ ${attempts + 1}/${maxAttempts})`);

      if (result.status === 'succeeded' || result.status === 'completed') {
        console.log('‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
        return result;
      } else if (result.status === 'failed' || result.status === 'error') {
        throw new Error(`–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å: ${result.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
      } else if (result.status === 'canceled') {
        throw new Error('–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞');
      }

      // –ñ–¥–µ–º 5 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
      await new Promise(resolve => setTimeout(resolve, 5000));
      attempts++;

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞:', error);
      attempts++;
      await new Promise(resolve => setTimeout(resolve, 5000));
    }
  }

  throw new Error('–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏');
}

/**
 * –°–æ–∑–¥–∞–µ—Ç —ç—Å–∫–∏–∑ –∏–∑ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è ScribbleDiffusion
 * @param {string} imagePath - –ü—É—Ç—å –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
 * @returns {Promise<string>} –ü—É—Ç—å –∫ —Å–æ–∑–¥–∞–Ω–Ω–æ–º—É —ç—Å–∫–∏–∑—É
 */
export async function createSketchFromImage(imagePath) {
  try {
    console.log('‚úèÔ∏è –°–æ–∑–¥–∞–µ–º —ç—Å–∫–∏–∑ –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', imagePath);
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —ç—Å–∫–∏–∑–∞
    const sketchPath = await createEnhancedSketch(imagePath);
    
    console.log('‚úÖ –≠—Å–∫–∏–∑ —Å–æ–∑–¥–∞–Ω:', sketchPath);
    return sketchPath;
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —ç—Å–∫–∏–∑–∞:', error);
    console.log('üîÑ –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –ø—Ä–æ—Å—Ç–æ–π –∞–ª–≥–æ—Ä–∏—Ç–º...');
    try {
      return await convertToSketch(imagePath);
    } catch (fallbackError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ—Å—Ç–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞:', fallbackError);
      // –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π —ç—Å–∫–∏–∑
      const outputPath = imagePath.replace(/\.[^/.]+$/, '_basic_sketch.png');
      await sharp(imagePath)
        .greyscale()
        .threshold(128)
        .png()
        .toFile(outputPath);
      return outputPath;
    }
  }
}

/**
 * –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —ç—Å–∫–∏–∑
 * @param {string} imagePath - –ü—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
 * @returns {Promise<string>} –ü—É—Ç—å –∫ —ç—Å–∫–∏–∑—É
 */
async function convertToSketch(imagePath) {
  const sharp = await import('sharp');
  
  const outputPath = imagePath.replace(/\.[^/.]+$/, '_sketch.png');
  
  await sharp.default(imagePath)
    .greyscale() // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —á–µ—Ä–Ω–æ-–±–µ–ª–æ–µ
    .normalize() // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∫–æ–Ω—Ç—Ä–∞—Å—Ç
    .sharpen({ sigma: 1.0, m1: 0.5, m2: 3.0, x1: 2, y2: 10 }) // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–µ–∑–∫–æ—Å—Ç—å
    .threshold(128) // –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–æ—Ä–æ–≥–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ç—É—Ä–æ–≤
    .png()
    .toFile(outputPath);
  
  return outputPath;
}

