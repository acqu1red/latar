/**
 * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API endpoints
 * –ó–∞–ø—É—Å–∫: node test-api.mjs
 */

import fetch from 'node-fetch';
import fs from 'fs';
import sharp from 'sharp';
import FormData from 'form-data';

const API_BASE_URL = 'https://competitive-camellia-latar-a11ca532.koyeb.app';

async function testAPI() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API endpoints\n');

  // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º health check
  console.log('1. –ü—Ä–æ–≤–µ—Ä–∫–∞ health check...');
  try {
    const healthResponse = await fetch(`${API_BASE_URL}/healthz`);
    const healthData = await healthResponse.json();
    console.log('   ‚úÖ Health check:', healthData);
  } catch (error) {
    console.log('   ‚ùå Health check failed:', error.message);
    return;
  }
  console.log('');

  // 2. –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
  console.log('2. –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...');
  const testImagePath = await createTestImage();
  console.log('   ‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ:', testImagePath);
  console.log('');

  // 3. –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –±–µ–∑ –º–µ–±–µ–ª–∏
  console.log('3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –±–µ–∑ –º–µ–±–µ–ª–∏...');
  try {
    const formData = new FormData();
    formData.append('image', fs.createReadStream(testImagePath), {
      filename: 'test-plan.png',
      contentType: 'image/png'
    });

    const response = await fetch(`${API_BASE_URL}/api/generate-photo`, {
      method: 'POST',
      body: formData,
      headers: formData.getHeaders()
    });

    if (response.ok) {
      const resultBuffer = await response.buffer();
      fs.writeFileSync('./test-api-result.png', resultBuffer);
      console.log('   ‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –±–µ–∑ –º–µ–±–µ–ª–∏ —É—Å–ø–µ—à–Ω–∞, —Ä–∞–∑–º–µ—Ä:', resultBuffer.length, '–±–∞–π—Ç');
    } else {
      const errorData = await response.json();
      console.log('   ‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:', errorData);
    }
  } catch (error) {
    console.log('   ‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:', error.message);
  }
  console.log('');

  // 4. –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Å –º–µ–±–µ–ª—å—é
  console.log('4. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å –º–µ–±–µ–ª—å—é...');
  try {
    const formData = new FormData();
    formData.append('image', fs.createReadStream(testImagePath), {
      filename: 'test-plan.png',
      contentType: 'image/png'
    });

    const response = await fetch(`${API_BASE_URL}/api/generate-with-furniture`, {
      method: 'POST',
      body: formData,
      headers: formData.getHeaders()
    });

    if (response.ok) {
      const resultBuffer = await response.buffer();
      fs.writeFileSync('./test-api-furniture-result.png', resultBuffer);
      console.log('   ‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å –º–µ–±–µ–ª—å—é —É—Å–ø–µ—à–Ω–∞, —Ä–∞–∑–º–µ—Ä:', resultBuffer.length, '–±–∞–π—Ç');
    } else {
      const errorData = await response.json();
      console.log('   ‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:', errorData);
    }
  } catch (error) {
    console.log('   ‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:', error.message);
  }
  console.log('');

  // 5. –û—á–∏—Å—Ç–∫–∞
  console.log('5. –û—á–∏—Å—Ç–∫–∞...');
  try {
    if (fs.existsSync(testImagePath)) {
      fs.unlinkSync(testImagePath);
    }
    console.log('   ‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã –æ—á–∏—â–µ–Ω—ã');
  } catch (error) {
    console.log('   ‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏:', error.message);
  }

  console.log('\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
  console.log('üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤:');
  console.log('   - test-api-result.png (–ø–ª–∞–Ω –±–µ–∑ –º–µ–±–µ–ª–∏)');
  console.log('   - test-api-furniture-result.png (–ø–ª–∞–Ω —Å –º–µ–±–µ–ª—å—é)');
}

/**
 * –°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
 * @returns {Promise<string>} –ü—É—Ç—å –∫ —Ç–µ—Å—Ç–æ–≤–æ–º—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
 */
async function createTestImage() {
  // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–µ —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–ª–∞–Ω–∞
  const svg = `
    <svg width="400" height="300" xmlns="http://www.w3.org/2000/svg">
      <rect width="400" height="300" fill="white" stroke="black" stroke-width="2"/>
      
      <!-- –í–Ω–µ—à–Ω–∏–µ —Å—Ç–µ–Ω—ã -->
      <rect x="20" y="20" width="360" height="260" fill="none" stroke="black" stroke-width="3"/>
      
      <!-- –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ —Å—Ç–µ–Ω—ã -->
      <line x1="200" y1="20" x2="200" y2="280" stroke="black" stroke-width="2"/>
      <line x1="20" y1="150" x2="380" y2="150" stroke="black" stroke-width="2"/>
      
      <!-- –î–≤–µ—Ä–∏ -->
      <line x1="200" y1="20" x2="200" y2="40" stroke="black" stroke-width="2"/>
      <line x1="200" y1="260" x2="200" y2="280" stroke="black" stroke-width="2"/>
      
      <!-- –û–∫–Ω–∞ -->
      <line x1="50" y1="20" x2="150" y2="20" stroke="black" stroke-width="1"/>
      <line x1="250" y1="20" x2="350" y2="20" stroke="black" stroke-width="1"/>
      
      <!-- –ö–æ–º–Ω–∞—Ç—ã -->
      <text x="100" y="100" font-family="Arial" font-size="16" fill="black">–°–ø–∞–ª—å–Ω—è</text>
      <text x="300" y="100" font-family="Arial" font-size="16" fill="black">–ì–æ—Å—Ç–∏–Ω–∞—è</text>
      <text x="100" y="200" font-family="Arial" font-size="16" fill="black">–ö—É—Ö–Ω—è</text>
      <text x="300" y="200" font-family="Arial" font-size="16" fill="black">–í–∞–Ω–Ω–∞—è</text>
    </svg>
  `;
  
  const testImagePath = './test-api-plan.png';
  await sharp(Buffer.from(svg))
    .png()
    .toFile(testImagePath);
  
  return testImagePath;
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
testAPI().catch(console.error);
