/**
 * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ ScribbleDiffusion
 * –ó–∞–ø—É—Å–∫: node test-local-generation.mjs
 */

import { generateLocalScribbleDiffusion, checkLocalServices } from './backend/src/localScribbleDiffusion.mjs';
import { createEnhancedSketch } from './backend/src/localImageGenerator.mjs';
import fs from 'fs';
import path from 'path';

async function testLocalGeneration() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ ScribbleDiffusion\n');

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–∏—Å–æ–≤
  console.log('1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤...');
  const services = await checkLocalServices();
  console.log('   Hugging Face:', services.huggingface ? '‚úÖ –î–æ—Å—Ç—É–ø–µ–Ω' : '‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
  console.log('   Ollama:', services.ollama ? '‚úÖ –î–æ—Å—Ç—É–ø–µ–Ω' : '‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
  console.log('   –£–ª—É—á—à–µ–Ω–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è:', services.enhanced ? '‚úÖ –î–æ—Å—Ç—É–ø–Ω–∞' : '‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–Ω–∞');
  console.log('');

  // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
  console.log('2. –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —ç—Å–∫–∏–∑–∞...');
  const testImagePath = await createTestImage();
  console.log('   –¢–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ:', testImagePath);
  console.log('');

  // –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –±–µ–∑ –º–µ–±–µ–ª–∏
  console.log('3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –±–µ–∑ –º–µ–±–µ–ª–∏...');
  try {
    const planPrompt = "professional architectural floor plan, clean white background, black lines, perfectly centered layout, technical drawing style, precise measurements, no furniture, minimalist design, high contrast, detailed room layout, architectural blueprint, floor plan drawing, clean lines, professional CAD drawing style, exact replica of the uploaded plan, centered composition, symmetrical layout, perfectly centered on canvas, symmetrical composition, balanced layout, professional architectural standards, clean white background, high resolution, detailed technical drawing";
    
    const planResult = await generateLocalScribbleDiffusion(testImagePath, planPrompt);
    const planOutputPath = './test-plan-result.png';
    fs.writeFileSync(planOutputPath, planResult);
    console.log('   ‚úÖ –ü–ª–∞–Ω –±–µ–∑ –º–µ–±–µ–ª–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω:', planOutputPath);
  } catch (error) {
    console.log('   ‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–ª–∞–Ω–∞:', error.message);
  }
  console.log('');

  // –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Å –º–µ–±–µ–ª—å—é
  console.log('4. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å –º–µ–±–µ–ª—å—é...');
  try {
    const furniturePrompt = "professional architectural floor plan with furniture, clean white background, black lines, perfectly centered layout, technical drawing style, precise measurements, schematic furniture symbols, high contrast, detailed room layout with furniture placement, architectural blueprint, floor plan drawing, clean lines, professional CAD drawing style, exact replica of the uploaded plan with added furniture, centered composition, furniture symbols in appropriate rooms, bed, sofa, table, chair, wardrobe, kitchen appliances, bathroom fixtures, living room furniture, bedroom furniture, dining room furniture, office furniture, hallway furniture, perfectly centered on canvas, symmetrical composition, balanced layout, professional architectural standards, clean white background, high resolution, detailed technical drawing";
    
    const furnitureResult = await generateLocalScribbleDiffusion(testImagePath, furniturePrompt);
    const furnitureOutputPath = './test-furniture-result.png';
    fs.writeFileSync(furnitureOutputPath, furnitureResult);
    console.log('   ‚úÖ –ü–ª–∞–Ω —Å –º–µ–±–µ–ª—å—é —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω:', furnitureOutputPath);
  } catch (error) {
    console.log('   ‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å –º–µ–±–µ–ª—å—é:', error.message);
  }
  console.log('');

  // –û—á–∏—Å—Ç–∫–∞
  console.log('5. –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤...');
  try {
    if (fs.existsSync(testImagePath)) {
      fs.unlinkSync(testImagePath);
    }
    console.log('   ‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã –æ—á–∏—â–µ–Ω—ã');
  } catch (error) {
    console.log('   ‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏:', error.message);
  }

  console.log('\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
  console.log('üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤:');
  console.log('   - test-plan-result.png (–ø–ª–∞–Ω –±–µ–∑ –º–µ–±–µ–ª–∏)');
  console.log('   - test-furniture-result.png (–ø–ª–∞–Ω —Å –º–µ–±–µ–ª—å—é)');
}

/**
 * –°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–ª–∞–Ω–∞
 * @returns {Promise<string>} –ü—É—Ç—å –∫ —Ç–µ—Å—Ç–æ–≤–æ–º—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
 */
async function createTestImage() {
  const sharp = await import('sharp');
  
  // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–µ —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–ª–∞–Ω–∞
  const svg = `
    <svg width="400" height="300" xmlns="http://www.w3.org/2000/svg">
      <rect width="400" height="300" fill="white" stroke="black" stroke-width="2"/>
      
      <!-- –í–Ω–µ—à–Ω–∏–µ —Å—Ç–µ–Ω—ã -->
      <rect x="20" y="20" width="360" height="260" fill="none" stroke="black" stroke-width="3"/>
      
      <!-- –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ —Å—Ç–µ–Ω—ã -->
      <line x1="200" y1="20" x2="200" y2="280" stroke="black" stroke-width="2"/>
      <line x1="20" y1="150" x2="380" y2="150" stroke="black" stroke-width="2"/>
      
      <!-- –î–≤–µ—Ä–∏ -->
      <line x1="200" y1="20" x2="200" y2="40" stroke="black" stroke-width="2"/>
      <line x1="200" y1="260" x2="200" y2="280" stroke="black" stroke-width="2"/>
      
      <!-- –û–∫–Ω–∞ -->
      <line x1="50" y1="20" x2="150" y2="20" stroke="black" stroke-width="1"/>
      <line x1="250" y1="20" x2="350" y2="20" stroke="black" stroke-width="1"/>
      
      <!-- –ö–æ–º–Ω–∞—Ç—ã -->
      <text x="100" y="100" font-family="Arial" font-size="16" fill="black">–°–ø–∞–ª—å–Ω—è</text>
      <text x="300" y="100" font-family="Arial" font-size="16" fill="black">–ì–æ—Å—Ç–∏–Ω–∞—è</text>
      <text x="100" y="200" font-family="Arial" font-size="16" fill="black">–ö—É—Ö–Ω—è</text>
      <text x="300" y="200" font-family="Arial" font-size="16" fill="black">–í–∞–Ω–Ω–∞—è</text>
    </svg>
  `;
  
  const testImagePath = './test-plan.svg';
  fs.writeFileSync(testImagePath, svg);
  
  // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º SVG –≤ PNG
  const pngPath = './test-plan.png';
  await sharp.default(Buffer.from(svg))
    .png()
    .toFile(pngPath);
  
  // –£–¥–∞–ª—è–µ–º SVG
  fs.unlinkSync(testImagePath);
  
  return pngPath;
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
testLocalGeneration().catch(console.error);