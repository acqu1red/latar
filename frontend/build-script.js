#!/usr/bin/env node

const { execSync } = require('child_process');
const fs = require('fs');
const path = require('path');

console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Å–±–æ—Ä–∫—É –ø—Ä–æ–µ–∫—Ç–∞...');

try {
  // –°–±–æ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–π –≤–µ—Ä—Å–∏–∏
  console.log('üì¶ –°–æ–±–∏—Ä–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –≤–µ—Ä—Å–∏—é...');
  execSync('npm run build', { stdio: 'inherit' });

  // –°–±–æ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ –¥–ª—è –ø–æ–¥–¥–æ–º–µ–Ω–∞ new
  console.log('üì¶ –°–æ–±–∏—Ä–∞–µ–º –≤–µ—Ä—Å–∏—é –¥–ª—è –ø–æ–¥–¥–æ–º–µ–Ω–∞ new...');
  execSync('npm run build:new', { stdio: 'inherit' });

  // –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã –¥–ª—è –ø–æ–¥–¥–æ–º–µ–Ω–∞ new –≤ –æ—Å–Ω–æ–≤–Ω—É—é –ø–∞–ø–∫—É dist
  console.log('üìã –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã –¥–ª—è –ø–æ–¥–¥–æ–º–µ–Ω–∞ new...');
  
  const distNewPath = path.join(__dirname, 'dist-new', 'public', 'new.html');
  const distPath = path.join(__dirname, 'dist', 'new.html');
  
  if (fs.existsSync(distNewPath)) {
    fs.copyFileSync(distNewPath, distPath);
    console.log('‚úÖ new.html —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω');
  }

  // –ö–æ–ø–∏—Ä—É–µ–º CSS –∏ JS —Ñ–∞–π–ª—ã
  const assetsNewPath = path.join(__dirname, 'dist-new', 'assets');
  const assetsPath = path.join(__dirname, 'dist', 'assets');
  
  if (fs.existsSync(assetsNewPath)) {
    const files = fs.readdirSync(assetsNewPath);
    files.forEach(file => {
      if (file.startsWith('new-')) {
        const srcPath = path.join(assetsNewPath, file);
        const destPath = path.join(assetsPath, file);
        fs.copyFileSync(srcPath, destPath);
        console.log(`‚úÖ ${file} —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω`);
      }
    });
  }

  console.log('üéâ –°–±–æ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
  console.log('üìÅ –û—Å–Ω–æ–≤–Ω–∞—è –≤–µ—Ä—Å–∏—è: dist/');
  console.log('üìÅ –í–µ—Ä—Å–∏—è –¥–ª—è –ø–æ–¥–¥–æ–º–µ–Ω–∞ new: dist/new.html');

} catch (error) {
  console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–∫–µ:', error.message);
  process.exit(1);
}
