import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { useAuth } from './AuthContext'; // –ò–º–ø–æ—Ä—Ç AuthContext
import { supabase } from './supabaseClient'; // –ò–º–ø–æ—Ä—Ç –∫–ª–∏–µ–Ω—Ç–∞ Supabase
import './DashboardPage.css';

interface Plan {
  id: string;
  title: string;
  image_url: string;
  created_at: string;
}

const DashboardPage: React.FC = () => {
  const { user, signOut } = useAuth();
  const navigate = useNavigate();
  const [mousePosition, setMousePosition] = useState({ x: 0, y: 0 });
  const [isLoaded, setIsLoaded] = useState(false);
  const [userPlans, setUserPlans] = useState<Plan[]>([]); // –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–ª–∞–Ω–æ–≤
  const [plansLoading, setPlansLoading] = useState(true); // –°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–ª–∞–Ω–æ–≤

  useEffect(() => {
    if (!user) {
      navigate('/login');
    }

    const timer = setTimeout(() => {
      setIsLoaded(true);
    }, 100);

    const handleMouseMove = (e: MouseEvent) => {
      setMousePosition({ x: e.clientX, y: e.clientY });
    };

    window.addEventListener('mousemove', handleMouseMove);
    
    return () => {
      clearTimeout(timer);
      window.removeEventListener('mousemove', handleMouseMove);
    };
  }, [user, navigate]);

  useEffect(() => {
    const fetchPlans = async () => {
      if (user) {
        setPlansLoading(true);
        const { data, error } = await supabase
          .from('plans')
          .select('id, title, image_url, created_at')
          .eq('user_id', user.id)
          .order('created_at', { ascending: false });

        if (error) {
          console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–ª–∞–Ω–æ–≤:', error);
        } else {
          setUserPlans(data || []);
        }
        setPlansLoading(false);
      }
    };

    fetchPlans();
  }, [user]); // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–ª–∞–Ω—ã –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

  const handleLogout = async () => {
    await signOut();
    console.log('Logged out');
    navigate('/login');
  };

  const handleGeneratePlan = () => {
    navigate('/texscheme');
  };

  if (!user) {
    return null;
  }

  const userName = user.user_metadata?.username || user.email?.split('@')[0] || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';

  return (
    <div className="dashboard-page">
      {/* –ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–æ–Ω */}
      <div className="background-animation">
        <div className="gradient-orb orb-1"></div>
        <div className="gradient-orb orb-2"></div>
        <div className="gradient-orb orb-3"></div>
        <div className="floating-shapes">
          <div className="shape shape-1"></div>
          <div className="shape shape-2"></div>
          <div className="shape shape-3"></div>
          <div className="shape shape-4"></div>
          <div className="shape shape-5"></div>
        </div>
      </div>

      <div className={`dashboard-content-wrapper ${isLoaded ? 'loaded' : ''}`}>
        <nav className="dashboard-navbar">
          <div className="nav-brand">
            <span className="brand-icon">üèóÔ∏è</span>
            <span className="brand-text">FlatMap AI</span>
          </div>
          <button onClick={handleLogout} className="logout-button">–í—ã–π—Ç–∏</button>
        </nav>

        <div className="dashboard-3d-scene" style={{
          transform: `perspective(1000px) rotateY(${(mousePosition.x - window.innerWidth / 2) * 0.01}deg) rotateX(${(mousePosition.y - window.innerHeight / 2) * 0.005}deg)`
        }}>
          <div className="scene-center-orb"></div>
          <div className="scene-line line-1"></div>
          <div className="scene-line line-2"></div>
          <div className="scene-line line-3"></div>
          <div className="scene-line line-4"></div>
          
          <div className="dashboard-panel panel-left">
            <h2 className="panel-title">–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</h2>
            <div className="stats-grid">
              <div className="stat-card">
                <span className="stat-icon">üìä</span>
                <span className="stat-value">{userPlans.length}</span> {/* –î–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–µ–∫—Ç–æ–≤ */}
                <span className="stat-label">–ü—Ä–æ–µ–∫—Ç–æ–≤</span>
              </div>
              <div className="stat-card">
                <span className="stat-icon">üöÄ</span>
                <span className="stat-value">99.9%</span>
                <span className="stat-label">–¢–æ—á–Ω–æ—Å—Ç—å</span>
              </div>
              <div className="stat-card">
                <span className="stat-icon">‚è±Ô∏è</span>
                <span className="stat-value">5 —Å–µ–∫</span>
                <span className="stat-label">–°–∫–æ—Ä–æ—Å—Ç—å</span>
              </div>
            </div>
          </div>

          <div className="dashboard-panel panel-right">
            <h2 className="panel-title">–ë—ã—Å—Ç—Ä—ã–π –¥–æ—Å—Ç—É–ø</h2>
            <div className="quick-access-grid">
              <button className="quick-access-btn" onClick={handleGeneratePlan}>
                <span className="btn-icon">‚ûï</span>
                <span className="btn-text">–ù–æ–≤—ã–π –ø–ª–∞–Ω</span>
              </button>
              <button className="quick-access-btn">
                <span className="btn-icon">üìÅ</span>
                <span className="btn-text">–ú–æ–∏ —Ñ–∞–π–ª—ã</span>
              </button>
              <button className="quick-access-btn">
                <span className="btn-icon">‚öôÔ∏è</span>
                <span className="btn-text">–ù–∞—Å—Ç—Ä–æ–π–∫–∏</span>
              </button>
            </div>
          </div>

          <div className="dashboard-card welcome-card-3d">
            <h1 className="card-title">–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {userName}!</h1>
            <p className="card-subtitle">–í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Ü–µ–Ω—Ç—Ä —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞–º–∏.</p>
            <button className="generate-button-3d" onClick={handleGeneratePlan}>
              –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø–ª–∞–Ω
            </button>
          </div>

          <div className="dashboard-card projects-card-3d">
            <h2 className="card-title">–ú–æ–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç—ã</h2>
            {plansLoading ? (
              <p className="loading-text">–ó–∞–≥—Ä—É–∑–∫–∞ –ø–ª–∞–Ω–æ–≤...</p>
            ) : userPlans.length > 0 ? (
              <div className="project-list-3d">
                {userPlans.map((plan) => (
                  <div key={plan.id} className="plan-card-3d">
                    <img src={plan.image_url} alt={plan.title} className="plan-card-image" />
                    <h3 className="plan-card-title">{plan.title}</h3>
                    <p className="plan-card-date">{new Date(plan.created_at).toLocaleDateString()}</p>
                    <a href={plan.image_url} download={plan.title || `plan_${plan.id}.png`} className="plan-card-download-btn">–°–∫–∞—á–∞—Ç—å</a>
                  </div>
                ))}
              </div>
            ) : (
              <div className="empty-projects-3d">
                <p>–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–æ–µ–∫—Ç–æ–≤.</p>
                <p>–ù–∞—á–Ω–∏—Ç–µ —Å–≤–æ–π –ø–µ—Ä–≤—ã–π –ø—Ä–æ–µ–∫—Ç –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!</p>
              </div>
            )}
          </div>
        </div>
      </div>
    </div>
  );
};

export default DashboardPage;
