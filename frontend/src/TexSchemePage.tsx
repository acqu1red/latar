import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { useAuth } from './AuthContext'; // –ò–º–ø–æ—Ä—Ç AuthContext
import { supabase } from './supabaseClient'; // –ò–º–ø–æ—Ä—Ç –∫–ª–∏–µ–Ω—Ç–∞ Supabase
import './TexSchemePage.css';
import { API_BASE_URL } from './config';

const TexSchemePage: React.FC = () => {
  const [selectedImage, setSelectedImage] = useState<File | null>(null);
  const [imagePreview, setImagePreview] = useState<string | null>(null);
  const [isGenerating, setIsGenerating] = useState(false);
  const [generatedPlan, setGeneratedPlan] = useState<string | null>(null);
  const [planTitle, setPlanTitle] = useState(''); // –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –Ω–∞–∑–≤–∞–Ω–∏—è –ø–ª–∞–Ω–∞
  const [isLoaded, setIsLoaded] = useState(false);
  const navigate = useNavigate();
  const { user, loading } = useAuth(); // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ AuthContext

  useEffect(() => {
    if (!loading && !user) {
      navigate('/login'); // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞, –µ—Å–ª–∏ –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∏ –∑–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞
      return;
    }

    const timer = setTimeout(() => {
      setIsLoaded(true);
    }, 100);
    
    return () => {
      clearTimeout(timer);
    };
  }, [user, loading, navigate]);

  const handleImageUpload = (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (file) {
      setSelectedImage(file);
      const reader = new FileReader();
      reader.onload = (e) => {
        setImagePreview(e.target?.result as string);
      };
      reader.readAsDataURL(file);
    }
  };

  const handleGenerate = async () => {
    if (!selectedImage || !user) return; // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    setIsGenerating(true);
    setGeneratedPlan(null); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –ø–ª–∞–Ω

    try {
      // 1. –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ –±—ç–∫–µ–Ω–¥ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
      const formData = new FormData();
      formData.append('image', selectedImage);

      const response = await fetch(`${API_BASE_URL}/api/generate-floor-plan`, {
        method: 'POST',
        body: formData,
      });

      if (!response.ok) {
        const errorData = await response.json();
        console.error('–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:', errorData.error);
        alert(`–û—à–∏–±–∫–∞: ${errorData.error}`);
        return;
      }

      const planBlob = await response.blob();
      const uniqueFileName = `${user.id}/${Date.now()}-${selectedImage.name}`;

      // 2. –ó–∞–≥—Ä—É–∑–∫–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–ª–∞–Ω–∞ –≤ Supabase Storage
      const { data: _uploadData, error: uploadError } = await supabase.storage
        .from('plans') // –ò–º—è –≤–∞—à–µ–≥–æ –±–∞–∫–µ—Ç–∞ –≤ Supabase Storage
        .upload(uniqueFileName, planBlob, { // –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
          contentType: planBlob.type,
          upsert: false,
        });

      if (uploadError) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–ª–∞–Ω–∞ –≤ Supabase Storage:', uploadError);
        alert(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: ${uploadError.message}`);
        return;
      }

      // –ü–æ–ª—É—á–∞–µ–º –ø—É–±–ª–∏—á–Ω—ã–π URL –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
      const { data: publicUrlData } = supabase.storage
        .from('plans')
        .getPublicUrl(uniqueFileName);
      
      const publicImageUrl = publicUrlData.publicUrl;

      // 3. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–ª–∞–Ω–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö Supabase (—Ç–∞–±–ª–∏—Ü–∞ 'plans')
      const finalPlanTitle = planTitle.trim() || `–ü–ª–∞–Ω –æ—Ç ${new Date().toLocaleString()}`;

      const { error: dbError } = await supabase
        .from('plans')
        .insert([
          {
            user_id: user.id,
            title: finalPlanTitle,
            image_url: publicImageUrl,
          },
        ]);

      if (dbError) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–ª–∞–Ω–∞ –≤ –ë–î Supabase:', dbError);
        alert(`–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: ${dbError.message}`);
        return;
      }

      console.log('–ü–ª–∞–Ω —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!', { publicImageUrl, finalPlanTitle });
      setGeneratedPlan(publicImageUrl); // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–ª–∞–Ω
      setPlanTitle(''); // –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –Ω–∞–∑–≤–∞–Ω–∏—è –ø–ª–∞–Ω–∞

    } catch (error) {
      console.error('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏:', error);
      alert('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–ª–∞–Ω–∞');
    } finally {
      setIsGenerating(false);
    }
  };

  const resetApp = () => {
    setSelectedImage(null);
    setImagePreview(null);
    setGeneratedPlan(null);
    setPlanTitle(''); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–ª–∞–Ω–∞
  };

  const goToDashboard = () => {
    navigate('/dashboard'); // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç
  };

  return (
    <div className="texscheme-page">
      {/* –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–æ–Ω */}
      <div className="background-animation">
        <div className="gradient-orb orb-1"></div>
        <div className="gradient-orb orb-2"></div>
        <div className="gradient-orb orb-3"></div>
        <div className="floating-shapes">
          <div className="shape shape-1"></div>
          <div className="shape shape-2"></div>
          <div className="shape shape-3"></div>
          <div className="shape shape-4"></div>
          <div className="shape shape-5"></div>
        </div>
      </div>

      {/* –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç */}
      <div className={`texscheme-content ${isLoaded ? 'loaded' : ''}`}>
        {/* –ù–∞–≤–∏–≥–∞—Ü–∏—è */}
        <nav className="dashboard-navbar">
          <div className="nav-content">
            <button className="back-button" onClick={goToDashboard}>
              <span className="back-icon">‚Üê</span>
              <span>–í –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç</span>
            </button>
            <div className="nav-title">
              <div className="title-icon">üìê</div>
              <div className="title-text">
                <span className="title-main">AI –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä</span>
                <span className="title-sub">–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –ü–ª–∞–Ω–æ–≤</span>
              </div>
            </div>
          </div>
        </nav>

        {/* –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç */}
        <div className="main-content">
          <div className="container">
            {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã */}
            <div className="page-header">
              <div className="header-badge">
                <span className="badge-icon">‚ú®</span>
                <span className="badge-text">AI-Powered Generation</span>
              </div>
              
              <h1 className="page-title">
                <span className="title-highlight">AI –ì–µ–Ω–µ—Ä–∞—Ü–∏—è</span>
                <span className="title-normal">—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –ø–ª–∞–Ω–æ–≤</span>
              </h1>
              
              <p className="page-description">
                –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –ø–ª–∞–Ω–∞ –ø–æ–º–µ—â–µ–Ω–∏—è –∏ –ø–æ–ª—É—á–∏—Ç–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—É—é 
                –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—É—é —Å—Ö–µ–º—É —Å —Ç–æ—á–Ω—ã–º–∏ –ø—Ä–æ–ø–æ—Ä—Ü–∏—è–º–∏ –∏ –¥–µ—Ç–∞–ª—è–º–∏ –∑–∞ —Å—á–∏—Ç–∞–Ω–Ω—ã–µ —Å–µ–∫—É–Ω–¥—ã
              </p>
            </div>

            {/* –ü–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –ø–ª–∞–Ω–∞ */}
            <div className="input-group upload-title-input">
              <label htmlFor="planTitle">–ù–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ –ø–ª–∞–Ω–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)</label>
              <input
                type="text"
                id="planTitle"
                value={planTitle}
                onChange={(e) => setPlanTitle(e.target.value)}
                placeholder="–ú–æ–π –Ω–æ–≤—ã–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–π –ø–ª–∞–Ω"
                className="plan-title-input"
              />
            </div>

            {/* –°–µ–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ */}
            <div className="upload-section">
              <div className="upload-container">
                <input
                  type="file"
                  accept="image/*"
                  onChange={handleImageUpload}
                  id="image-upload"
                  className="file-input"
                />
                <label htmlFor="image-upload" className="upload-label">
                  {imagePreview ? (
                    <div className="preview-container">
                      <img src={imagePreview} alt="–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä" className="preview-image" />
                      <div className="preview-overlay">
                        <div className="overlay-content">
                          <div className="overlay-icon">üîÑ</div>
                          <span className="overlay-text">–ù–∞–∂–º–∏—Ç–µ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è</span>
                        </div>
                      </div>
                    </div>
                  ) : (
                    <div className="upload-placeholder">
                      <div className="upload-icon">
                        <div className="icon-main">üì∑</div>
                        <div className="icon-particles">
                          <span className="particle">‚ú®</span>
                          <span className="particle">‚≠ê</span>
                          <span className="particle">üí´</span>
                        </div>
                      </div>
                      <h3 className="upload-title">–ó–∞–≥—Ä—É–∑–∏—Ç–µ –ø–ª–∞–Ω –ø–æ–º–µ—â–µ–Ω–∏—è</h3>
                      <p className="upload-description">
                        –ü–µ—Ä–µ—Ç–∞—â–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—é–¥–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞
                      </p>
                      <div className="upload-features">
                        <span className="feature-tag">JPG, PNG, WEBP</span>
                        <span className="feature-tag">–î–æ 10MB</span>
                        <span className="feature-tag">–í—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ</span>
                      </div>
                    </div>
                  )}
                </label>
              </div>
            </div>

            {/* –ö–Ω–æ–ø–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ */}
            <div className="generate-section">
              <button 
                className={`generate-btn ${isGenerating ? 'generating' : ''}`}
                onClick={handleGenerate}
                disabled={!selectedImage || isGenerating}
              >
                <div className="btn-content">
                  <span className="btn-icon">
                    {isGenerating ? 'üé®' : '‚ö°'}
                  </span>
                  <span className="btn-text">
                    {isGenerating ? '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è...' : '–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–ª–∞–Ω'}
                  </span>
                </div>
                {isGenerating && (
                  <div className="loading-animation">
                    <div className="loading-dot"></div>
                    <div className="loading-dot"></div>
                    <div className="loading-dot"></div>
                  </div>
                )}
                <div className="btn-glow"></div>
                <div className="btn-ripple"></div>
              </button>
            </div>

            {/* –†–µ–∑—É–ª—å—Ç–∞—Ç */}
            {generatedPlan && (
              <div className="result-section">
                <div className="result-header">
                  <div className="result-title">
                    <div className="title-icon">‚úÖ</div>
                    <div className="title-text">
                      <h2>–†–µ–∑—É–ª—å—Ç–∞—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏</h2>
                      <p>–í–∞—à —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –ø–ª–∞–Ω –≥–æ—Ç–æ–≤ –∫ —Å–∫–∞—á–∏–≤–∞–Ω–∏—é</p>
                    </div>
                  </div>
                  <div className="result-actions">
                    <button 
                      onClick={resetApp}
                      className="action-btn secondary"
                    >
                      <span className="btn-icon">üîÑ</span>
                      <span>–ù–æ–≤—ã–π –ø–ª–∞–Ω</span>
                    </button>
                  </div>
                </div>

                <div className="result-content">
                  <div className="plan-info">
                    <div className="info-card">
                      <div className="info-icon">üéØ</div>
                      <div className="info-content">
                        <h4>–¢–æ—á–Ω–æ—Å—Ç—å</h4>
                        <p>–°–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤—Å–µ –ø—Ä–æ–ø–æ—Ä—Ü–∏–∏ –∏ —Ä–∞–∑–º–µ—Ä—ã</p>
                      </div>
                    </div>
                    <div className="info-card">
                      <div className="info-icon">üé®</div>
                      <div className="info-content">
                        <h4>–ö–∞—á–µ—Å—Ç–≤–æ</h4>
                        <p>–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–π —Å—Ç–∞–Ω–¥–∞—Ä—Ç</p>
                      </div>
                    </div>
                    <div className="info-card">
                      <div className="info-icon">‚ö°</div>
                      <div className="info-content">
                        <h4>–°–∫–æ—Ä–æ—Å—Ç—å</h4>
                        <p>–†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥</p>
                      </div>
                    </div>
                  </div>

                  <div className="plan-container">
                    <div className="plan-wrapper">
                      <img 
                        src={generatedPlan} 
                        alt="–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –ø–ª–∞–Ω" 
                        className="generated-plan"
                      />
                      <div className="plan-overlay">
                        <a 
                          href={generatedPlan} 
                          download="technical-plan.png"
                          className="download-btn"
                        >
                          <span className="btn-icon">üíæ</span>
                          <span>–°–∫–∞—á–∞—Ç—å –ø–ª–∞–Ω</span>
                        </a>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            )}
          </div>
        </div>
      </div>
    </div>
  );
};

export default TexSchemePage;
