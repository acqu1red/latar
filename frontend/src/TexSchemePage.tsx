import React, { useState, useEffect } from 'react';
// import { useNavigate } from 'react-router-dom'; // –£–¥–∞–ª—è–µ–º import useNavigate
// import { useAuth } from './AuthContext'; // –ò–º–ø–æ—Ä—Ç AuthContext
// import { supabase } from './supabaseClient'; // –ò–º–ø–æ—Ä—Ç –∫–ª–∏–µ–Ω—Ç–∞ Supabase
import './TexSchemePage.css';
import { API_BASE_URL } from './config';

const TexSchemePage: React.FC = () => {
  const [selectedImage, setSelectedImage] = useState<File | null>(null);
  const [imagePreview, setImagePreview] = useState<string | null>(null);
  const [isGenerating, setIsGenerating] = useState(false);
  const [generatedPlan, setGeneratedPlan] = useState<string | null>(null);
  // const [planTitle, setPlanTitle] = useState(''); // –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –Ω–∞–∑–≤–∞–Ω–∏—è –ø–ª–∞–Ω–∞
  const [isLoaded, setIsLoaded] = useState(false);
  const [mousePosition, setMousePosition] = useState({ x: 0, y: 0 });
  // const navigate = useNavigate(); // –£–¥–∞–ª—è–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ navigate
  // const { user, loading } = useAuth(); // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ AuthContext

  useEffect(() => {
    // if (!loading && !user) {
    //   navigate('/login'); // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞, –µ—Å–ª–∏ –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∏ –∑–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞
    //   return;
    // }

    const timer = setTimeout(() => {
      setIsLoaded(true);
    }, 100);

    const handleMouseMove = (e: MouseEvent) => {
      setMousePosition({ x: e.clientX, y: e.clientY });
    };

    window.addEventListener('mousemove', handleMouseMove);

    return () => {
      clearTimeout(timer);
      window.removeEventListener('mousemove', handleMouseMove);
    };
  }, [/* user, loading, navigate */]); // –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã

  const handleImageUpload = (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (file) {
      setSelectedImage(file);
      const reader = new FileReader();
      reader.onload = (e) => {
        setImagePreview(e.target?.result as string);
      };
      reader.readAsDataURL(file);
    }
  };

  const handleGenerate = async () => {
    if (!selectedImage) return; // –ë–æ–ª—å—à–µ –Ω–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    setIsGenerating(true);
    setGeneratedPlan(null); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –ø–ª–∞–Ω

    try {
      // 1. –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ –±—ç–∫–µ–Ω–¥ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
      const formData = new FormData();
      formData.append('image', selectedImage);

      const response = await fetch(`${API_BASE_URL}/api/generate-floor-plan`, {
        method: 'POST',
        body: formData,
      });

      if (!response.ok) {
        const errorData = await response.json();
        console.error('–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:', errorData.error);
        alert(`–û—à–∏–±–∫–∞: ${errorData.error}`);
        return;
      }

      const planBlob = await response.blob();
      const imageUrl = URL.createObjectURL(planBlob); // –°–æ–∑–¥–∞–µ–º URL –¥–ª—è Blob

      console.log('–ü–ª–∞–Ω —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω!', { imageUrl });
      setGeneratedPlan(imageUrl); // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–ª–∞–Ω

    } catch (error) {
      console.error('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:', error);
      alert('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–ª–∞–Ω–∞');
    } finally {
      setIsGenerating(false);
    }
  };

  const resetApp = () => {
    setSelectedImage(null);
    setImagePreview(null);
    setGeneratedPlan(null);
    // setPlanTitle(''); // –ë–æ–ª—å—à–µ –Ω–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏—è –ø–ª–∞–Ω–∞
  };

  // const goToDashboard = () => {
  //   navigate('/dashboard'); // –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω–∞
  // };

  return (
    <div className="texscheme-page">
      {/* –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–æ–Ω */}
      <div className="background-animation">
        <div className="gradient-orb orb-1"></div>
        <div className="gradient-orb orb-2"></div>
        <div className="gradient-orb orb-3"></div>
        <div className="floating-shapes">
          <div className="shape shape-1"></div>
          <div className="shape shape-2"></div>
          <div className="shape shape-3"></div>
          <div className="shape shape-4"></div>
          <div className="shape shape-5"></div>
        </div>
      </div>

      {/* –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç (3D-—Å—Ü–µ–Ω–∞) */}
      <div className={`texscheme-content ${isLoaded ? 'loaded' : ''}`}>
        <div className="dashboard-3d-scene" style={{
          transform: `perspective(1000px) rotateY(${(mousePosition.x - window.innerWidth / 2) * 0.03}deg) rotateX(${(mousePosition.y - window.innerHeight / 2) * 0.015}deg)`
        }}>
          {/* –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —à–∞—Ä */}
          <div className="scene-center-orb"></div>

          {/* –ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ª–∏–Ω–∏–∏, —Å–æ–µ–¥–∏–Ω—è—é—â–∏–µ —à–∞—Ä —Å –ø–∞–Ω–µ–ª—è–º–∏ */}
          <div className="scene-line line-1"></div>
          <div className="scene-line line-2"></div>
          <div className="scene-line line-3"></div>

          {/* –û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞–Ω–µ–ª–∏ - —Ç–µ–ø–µ—Ä—å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–ª–∞–Ω–∞ */}
          <div className="dashboard-panel panel-left">
            <div className="panel-content">
              <h2 className="panel-title">–°–æ–∑–¥–∞–Ω–∏–µ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –ü–ª–∞–Ω–∞</h2>
              <p className="panel-description">–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ —Ç–æ—á–Ω—ã–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–π –ø–ª–∞–Ω.</p>

              {/* –°–µ–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ */}
              <div className="upload-section">
                <div className="upload-container">
                  <input
                    type="file"
                    accept="image/*"
                    onChange={handleImageUpload}
                    id="image-upload"
                    className="file-input"
                  />
                  <label htmlFor="image-upload" className="upload-label">
                    {imagePreview ? (
                      <div className="preview-container">
                        <img src={imagePreview} alt="–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä" className="preview-image" />
                        <div className="preview-overlay">
                          <div className="overlay-content">
                            <div className="overlay-icon">üîÑ</div>
                            <span className="overlay-text">–ù–∞–∂–º–∏—Ç–µ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è</span>
                          </div>
                        </div>
                      </div>
                    ) : (
                      <div className="upload-placeholder">
                        <div className="upload-icon">
                          <div className="icon-main">üì∑</div>
                          <div className="icon-particles">
                            <span className="particle">‚ú®</span>
                            <span className="particle">‚≠ê</span>
                            <span className="particle">üí´</span>
                          </div>
                        </div>
                        <h3 className="upload-title">–ó–∞–≥—Ä—É–∑–∏—Ç–µ –ø–ª–∞–Ω –ø–æ–º–µ—â–µ–Ω–∏—è</h3>
                        <p className="upload-description">
                          –ü–µ—Ä–µ—Ç–∞—â–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—é–¥–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞
                        </p>
                        <div className="upload-features">
                          <span className="feature-tag">JPG, PNG, WEBP</span>
                          <span className="feature-tag">–î–æ 10MB</span>
                          <span className="feature-tag">–í—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ</span>
                        </div>
                      </div>
                    )}
                  </label>
                </div>
              </div>

              {/* –ö–Ω–æ–ø–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ */}
              <div className="generate-section">
                <button
                  className={`generate-btn ${isGenerating ? 'generating' : ''}`}
                  onClick={handleGenerate}
                  disabled={!selectedImage || isGenerating}
                >
                  <div className="btn-content">
                    <span className="btn-icon">
                      {isGenerating ? 'üé®' : '‚ö°'}
                    </span>
                    <span className="btn-text">
                      {isGenerating ? '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è...' : '–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–ª–∞–Ω'}
                    </span>
                  </div>
                  {isGenerating && (
                    <div className="loading-animation">
                      <div className="loading-dot"></div>
                      <div className="loading-dot"></div>
                      <div className="loading-dot"></div>
                    </div>
                  )}
                  <div className="btn-glow"></div>
                  <div className="btn-ripple"></div>
                </button>
              </div>
            </div>
          </div>

          <div className="dashboard-panel panel-right">
            <div className="panel-content">
              <h2 className="panel-title">–†–µ–∑—É–ª—å—Ç–∞—Ç –ì–µ–Ω–µ—Ä–∞—Ü–∏–∏</h2>
              <p className="panel-description">–ó–¥–µ—Å—å –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—Å—è –≤–∞—à –≥–æ—Ç–æ–≤—ã–π —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –ø–ª–∞–Ω.</p>

              {generatedPlan ? (
                <div className="result-display-card">
                  <img src={generatedPlan} alt="–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–ª–∞–Ω" className="generated-plan-image" />
                  <a href={generatedPlan} download="technical-plan.png" className="download-button-3d">
                    <span>–°–∫–∞—á–∞—Ç—å –ü–ª–∞–Ω</span>
                    <span className="download-icon">‚Üì</span>
                  </a>
                  <button onClick={resetApp} className="reset-button-3d">
                    <span>–ù–æ–≤—ã–π –ü–ª–∞–Ω</span>
                    <span className="reset-icon">üîÑ</span>
                  </button>
                </div>
              ) : (
                <div className="no-plan-placeholder">
                  <span className="placeholder-icon">‚è≥</span>
                  <p>–û–∂–∏–¥–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–ª–∞–Ω–∞...</p>
                </div>
              )}
            </div>
          </div>

        </div>
      </div>
    </div>
  );
};

export default TexSchemePage;
