import React, { useState, useEffect, useRef } from 'react';
import './App.css';
import { API_BASE_URL } from './config.js';

interface MouseInput {
  left: boolean;
  middle: boolean;
  right: boolean;
  x: number;
  y: number;
}

interface InteractiveState {
  isDragging: boolean;
  dragStart: { x: number; y: number } | null;
  mousePosition: { x: number; y: number };
  clickCount: number;
}

const App: React.FC = () => {
  const [selectedImage, setSelectedImage] = useState<File | null>(null);
  const [imagePreview, setImagePreview] = useState<string | null>(null);
  const [isGenerating, setIsGenerating] = useState(false);
  const [generatedPhoto, setGeneratedPhoto] = useState<string | null>(null);
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
  const [mouseInput, setMouseInput] = useState<MouseInput>({
    left: false,
    middle: false,
    right: false,
    x: 0,
    y: 0
  });
  
  const [interactiveState, setInteractiveState] = useState<InteractiveState>({
    isDragging: false,
    dragStart: null,
    mousePosition: { x: 0, y: 0 },
    clickCount: 0
  });
  
  const containerRef = useRef<HTMLDivElement>(null);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –º—ã—à–∏
  const handleMouseDown = (event: React.MouseEvent) => {
    event.preventDefault();
    const rect = containerRef.current?.getBoundingClientRect();
    if (!rect) return;

    const x = event.clientX - rect.left;
    const y = event.clientY - rect.top;

    setMouseInput(prev => ({
      ...prev,
      left: event.button === 0,
      middle: event.button === 1,
      right: event.button === 2,
      x,
      y
    }));

    if (event.button === 0) {
      setInteractiveState(prev => ({
        ...prev,
        isDragging: true,
        dragStart: { x, y },
        clickCount: prev.clickCount + 1
      }));
    }
  };

  const handleMouseUp = () => {
    setMouseInput(prev => ({
      ...prev,
      left: false,
      middle: false,
      right: false
    }));

    setInteractiveState(prev => ({
      ...prev,
      isDragging: false,
      dragStart: null
    }));
  };

  const handleMouseMove = (event: React.MouseEvent) => {
    const rect = containerRef.current?.getBoundingClientRect();
    if (!rect) return;

    const x = event.clientX - rect.left;
    const y = event.clientY - rect.top;

    setMouseInput(prev => ({ ...prev, x, y }));
    setInteractiveState(prev => ({ ...prev, mousePosition: { x, y } }));
  };

  const handleContextMenu = (event: React.MouseEvent) => {
    event.preventDefault();
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –ø—Ä–∞–≤–æ–π –∫–Ω–æ–ø–∫–∏ –º—ã—à–∏
  };

  // –≠—Ñ—Ñ–µ–∫—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π –º—ã—à–∏
  useEffect(() => {
    const handleGlobalMouseUp = () => {
      setMouseInput(prev => ({
        ...prev,
        left: false,
        middle: false,
        right: false
      }));
      setInteractiveState(prev => ({
        ...prev,
        isDragging: false,
        dragStart: null
      }));
    };

    document.addEventListener('mouseup', handleGlobalMouseUp);
    return () => document.removeEventListener('mouseup', handleGlobalMouseUp);
  }, []);

  const handleImageUpload = (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (file) {
      setSelectedImage(file);
      const reader = new FileReader();
      reader.onload = (e) => {
        setImagePreview(e.target?.result as string);
      };
      reader.readAsDataURL(file);
    }
  };

  const handleGenerate = async () => {
    if (!selectedImage) return;

    setIsGenerating(true);
    try {
      const formData = new FormData();
      formData.append('image', selectedImage);

      const response = await fetch(`${API_BASE_URL}/api/generate-photo`, {
        method: 'POST',
        body: formData,
      });

      if (response.ok) {
        const photoBlob = await response.blob();
        const photoUrl = URL.createObjectURL(photoBlob);
        setGeneratedPhoto(photoUrl);
      } else {
        const errorData = await response.json();
        console.error('–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:', errorData.error);
        alert(`–û—à–∏–±–∫–∞: ${errorData.error}`);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞:', error);
      alert('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏');
    } finally {
      setIsGenerating(false);
    }
  };


  return (
    <div className="app">
      <div 
        ref={containerRef}
        className={`container ${interactiveState.isDragging ? 'dragging' : ''}`}
        onMouseDown={handleMouseDown}
        onMouseUp={handleMouseUp}
        onMouseMove={handleMouseMove}
        onContextMenu={handleContextMenu}
      >
        <h1>AI –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø–ª–∞–Ω–æ–≤ –∫–≤–∞—Ä—Ç–∏—Ä</h1>
        <p className="app-description">
          –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –ø–ª–∞–Ω–∞ –∫–≤–∞—Ä—Ç–∏—Ä—ã –∏ –ø–æ–ª—É—á–∏—Ç–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ –Ω–∞—Ä–∏—Å–æ–≤–∞–Ω–Ω—ã–π –ø–ª–∞–Ω —Å –ø–æ–º–æ—â—å—é –ò–ò
        </p>
        
        {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –º—ã—à–∏ */}
        <div className="mouse-indicator">
          <div className="mouse-info">
            <span>üñ±Ô∏è X: {Math.round(mouseInput.x)} Y: {Math.round(mouseInput.y)}</span>
            {mouseInput.left && <span className="mouse-button left">–õ–ö–ú</span>}
            {mouseInput.middle && <span className="mouse-button middle">–°–ö–ú</span>}
            {mouseInput.right && <span className="mouse-button right">–ü–ö–ú</span>}
            {interactiveState.isDragging && <span className="drag-indicator">–ü–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–µ</span>}
          </div>
          <div className="click-counter">
            –ö–ª–∏–∫–æ–≤: {interactiveState.clickCount}
          </div>
        </div>
        
        <div className="upload-section">
          <div className="upload-area">
            <input
              type="file"
              accept="image/*"
              onChange={handleImageUpload}
              id="image-upload"
              className="file-input"
            />
            <label htmlFor="image-upload" className="upload-label">
              {imagePreview ? (
                <img src={imagePreview} alt="–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä" className="preview-image" />
              ) : (
                <div className="upload-placeholder">
                  <div className="upload-icon">üì∑</div>
                  <p>–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –ø–ª–∞–Ω–∞ –∫–≤–∞—Ä—Ç–∏—Ä—ã</p>
                </div>
              )}
            </label>
          </div>
        </div>

        <div className="info-section">
          <div className="info-box">
            <h3>üéØ –ß—Ç–æ –¥–µ–ª–∞–µ—Ç –ò–ò:</h3>
            <ul>
              <li>–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤–∞—à –ø–ª–∞–Ω –∫–≤–∞—Ä—Ç–∏—Ä—ã</li>
              <li>–°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–π —á–µ—Ä—Ç–µ–∂</li>
              <li>–†–∞–∑–º–µ—â–∞–µ—Ç –ø–ª–∞–Ω —Å—Ç—Ä–æ–≥–æ –ø–æ —Ü–µ–Ω—Ç—Ä—É</li>
              <li>–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—Å–µ –¥–µ—Ç–∞–ª–∏ –∏ –ø—Ä–æ–ø–æ—Ä—Ü–∏–∏</li>
            </ul>
          </div>
        </div>

        <button 
          className="generate-btn" 
          onClick={handleGenerate}
          disabled={!selectedImage || isGenerating}
        >
          {isGenerating ? '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è...' : '–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å'}
        </button>

        {generatedPhoto && (
          <div className="result-section">
            <h2>–†–µ–∑—É–ª—å—Ç–∞—Ç</h2>
            <div className="photo-info">
              <p>üé® –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ –Ω–∞—Ä–∏—Å–æ–≤–∞–Ω–Ω—ã–π –ø–ª–∞–Ω –∫–≤–∞—Ä—Ç–∏—Ä—ã</p>
              <p>üìê –¢–æ—á–Ω–æ–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–µ—Ç–∞–ª–µ–π –∏ –ø—Ä–æ–ø–æ—Ä—Ü–∏–π</p>
              <p>üéØ –ü–ª–∞–Ω —Ä–∞–∑–º–µ—â–µ–Ω —Å—Ç—Ä–æ–≥–æ –ø–æ —Ü–µ–Ω—Ç—Ä—É</p>
            </div>
            <div className="photo-container">
              <img 
                src={generatedPhoto} 
                alt="–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–ª–∞–Ω –∫–≤–∞—Ä—Ç–∏—Ä—ã" 
                className="generated-photo"
              />
              <div className="photo-actions">
                <a 
                  href={generatedPhoto} 
                  download="floor-plan.png"
                  className="download-btn"
                >
                  üíæ –°–∫–∞—á–∞—Ç—å –ø–ª–∞–Ω
                </a>
              </div>
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

export default App;
