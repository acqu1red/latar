import React, { useState } from 'react';
import './App.css';
import { API_BASE_URL } from './config.js';

// interface FurnitureItem {
//   name: string;
//   icon: string;
//   width: number;
//   height: number;
//   color: string;
// }

const App: React.FC = () => {
  const [selectedImage, setSelectedImage] = useState<File | null>(null);
  const [imagePreview, setImagePreview] = useState<string | null>(null);
  const [isGenerating, setIsGenerating] = useState(false);
  const [generatedPhoto, setGeneratedPhoto] = useState<string | null>(null);
  const [generationType, setGenerationType] = useState<'photo' | 'furniture'>('photo');

  const handleImageUpload = (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (file) {
      setSelectedImage(file);
      const reader = new FileReader();
      reader.onload = (e) => {
        setImagePreview(e.target?.result as string);
      };
      reader.readAsDataURL(file);
    }
  };

  const handleGenerate = async () => {
    if (!selectedImage) return;

    setIsGenerating(true);
    try {
      const formData = new FormData();
      formData.append('image', selectedImage);

      let endpoint = '';
      if (generationType === 'furniture') {
        endpoint = '/api/generate-with-furniture';
      } else {
        endpoint = '/api/generate-photo';
      }

      const response = await fetch(`${API_BASE_URL}${endpoint}`, {
        method: 'POST',
        body: formData,
      });

      if (response.ok) {
        const photoBlob = await response.blob();
        const photoUrl = URL.createObjectURL(photoBlob);
        setGeneratedPhoto(photoUrl);
      } else {
        const errorData = await response.json();
        console.error('–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:', errorData.error);
        alert(`–û—à–∏–±–∫–∞: ${errorData.error}`);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞:', error);
      alert('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏');
    } finally {
      setIsGenerating(false);
    }
  };


  return (
    <div className="app">
      <div className="container">
        <h1>–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø–ª–∞–Ω–æ–≤ –∫–≤–∞—Ä—Ç–∏—Ä —Å AI</h1>
        <p className="app-description">
          –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –ø–ª–∞–Ω–∞ –∫–≤–∞—Ä—Ç–∏—Ä—ã –∏ –ø–æ–ª—É—á–∏—Ç–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω —Å –ø–æ–º–æ—â—å—é –Ω–µ–π—Ä–æ—Å–µ—Ç–∏
        </p>
        
        <div className="upload-section">
          <div className="upload-area">
            <input
              type="file"
              accept="image/*"
              onChange={handleImageUpload}
              id="image-upload"
              className="file-input"
            />
            <label htmlFor="image-upload" className="upload-label">
              {imagePreview ? (
                <img src={imagePreview} alt="–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä" className="preview-image" />
              ) : (
                <div className="upload-placeholder">
                  <div className="upload-icon">üì∑</div>
                  <p>–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –ø–ª–∞–Ω–∞ –∫–≤–∞—Ä—Ç–∏—Ä—ã</p>
                </div>
              )}
            </label>
          </div>
        </div>

        <div className="options-section">
          <div className="generation-type">
            <h3>–¢–∏–ø –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:</h3>
            <div className="option-group">
              <div className="option-item">
                <input 
                  type="radio" 
                  id="photo-generation" 
                  name="generation-type" 
                  value="photo"
                  checked={generationType === 'photo'}
                  onChange={(e) => setGenerationType(e.target.value as 'photo' | 'furniture')}
                />
                <label htmlFor="photo-generation">–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è (AI)</label>
              </div>
              <div className="option-item">
                <input 
                  type="radio" 
                  id="furniture-generation" 
                  name="generation-type" 
                  value="furniture"
                  checked={generationType === 'furniture'}
                  onChange={(e) => setGenerationType(e.target.value as 'photo' | 'furniture')}
                />
                <label htmlFor="furniture-generation">–ü–ª–∞–Ω —Å –º–µ–±–µ–ª—å—é (AI)</label>
              </div>
            </div>
          </div>
        </div>

        <button 
          className="generate-btn" 
          onClick={handleGenerate}
          disabled={!selectedImage || isGenerating}
        >
          {isGenerating ? '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è...' : '–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å'}
        </button>

        {generatedPhoto && (
          <div className="result-section">
            <h2>–†–µ–∑—É–ª—å—Ç–∞—Ç</h2>
            <div className="photo-container">
              <img 
                src={generatedPhoto} 
                alt="–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–ª–∞–Ω" 
                className="generated-photo"
              />
              <div className="photo-actions">
                <a 
                  href={generatedPhoto} 
                  download="generated-plan.png"
                  className="download-btn"
                >
                  üíæ –°–∫–∞—á–∞—Ç—å –ø–ª–∞–Ω
                </a>
              </div>
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

export default App;


