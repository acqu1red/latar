import React, { useState } from 'react';
import './App.css';
import { API_BASE_URL } from './config.js';

// interface FurnitureItem {
//   name: string;
//   icon: string;
//   width: number;
//   height: number;
//   color: string;
// }

const App: React.FC = () => {
  const [selectedImage, setSelectedImage] = useState<File | null>(null);
  const [imagePreview, setImagePreview] = useState<string | null>(null);
  const [isGenerating, setIsGenerating] = useState(false);
  const [generatedPhoto, setGeneratedPhoto] = useState<string | null>(null);
  const [generationType, setGenerationType] = useState<'plan' | 'furniture'>('plan');

  const handleImageUpload = (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (file) {
      setSelectedImage(file);
      const reader = new FileReader();
      reader.onload = (e) => {
        setImagePreview(e.target?.result as string);
      };
      reader.readAsDataURL(file);
    }
  };

  const handleGenerate = async () => {
    if (!selectedImage) return;

    setIsGenerating(true);
    try {
      const formData = new FormData();
      formData.append('image', selectedImage);

      const endpoint = generationType === 'furniture' 
        ? '/api/generate-with-furniture' 
        : '/api/generate-photo';

      const response = await fetch(`${API_BASE_URL}${endpoint}`, {
        method: 'POST',
        body: formData,
      });

      if (response.ok) {
        const photoBlob = await response.blob();
        const photoUrl = URL.createObjectURL(photoBlob);
        setGeneratedPhoto(photoUrl);
      } else {
        const errorData = await response.json();
        console.error('–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:', errorData.error);
        alert(`–û—à–∏–±–∫–∞: ${errorData.error}`);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞:', error);
      alert('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏');
    } finally {
      setIsGenerating(false);
    }
  };


  return (
    <div className="app">
      <div className="container">
        <h1>AI –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø–ª–∞–Ω–æ–≤ –∫–≤–∞—Ä—Ç–∏—Ä</h1>
        <p className="app-description">
          –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –ø–ª–∞–Ω–∞ –∫–≤–∞—Ä—Ç–∏—Ä—ã –∏ –ø–æ–ª—É—á–∏—Ç–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ –Ω–∞—Ä–∏—Å–æ–≤–∞–Ω–Ω—ã–π –ø–ª–∞–Ω —Å –ø–æ–º–æ—â—å—é –ò–ò
        </p>
        
        <div className="upload-section">
          <div className="upload-area">
            <input
              type="file"
              accept="image/*"
              onChange={handleImageUpload}
              id="image-upload"
              className="file-input"
            />
            <label htmlFor="image-upload" className="upload-label">
              {imagePreview ? (
                <img src={imagePreview} alt="–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä" className="preview-image" />
              ) : (
                <div className="upload-placeholder">
                  <div className="upload-icon">üì∑</div>
                  <p>–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –ø–ª–∞–Ω–∞ –∫–≤–∞—Ä—Ç–∏—Ä—ã</p>
                </div>
              )}
            </label>
          </div>
        </div>

        <div className="options-section">
          <div className="generation-type">
            <h3>–¢–∏–ø –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:</h3>
            <div className="option-group">
              <div className="option-item">
                <input 
                  type="radio" 
                  id="plan-generation" 
                  name="generation-type" 
                  value="plan" 
                  checked={generationType === 'plan'}
                  onChange={(e) => setGenerationType(e.target.value as 'plan' | 'furniture')}
                />
                <label htmlFor="plan-generation">–ü—Ä–æ—Å—Ç–æ–π –ø–ª–∞–Ω</label>
              </div>
              <div className="option-item">
                <input 
                  type="radio" 
                  id="furniture-generation" 
                  name="generation-type" 
                  value="furniture"
                  checked={generationType === 'furniture'}
                  onChange={(e) => setGenerationType(e.target.value as 'plan' | 'furniture')}
                />
                <label htmlFor="furniture-generation">–° –º–µ–±–µ–ª—å—é</label>
              </div>
            </div>
          </div>
        </div>

        <div className="info-section">
          <div className="info-box">
            <h3>üéØ –ß—Ç–æ –¥–µ–ª–∞–µ—Ç –ò–ò:</h3>
            <ul>
              <li>–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤–∞—à –ø–ª–∞–Ω –∫–≤–∞—Ä—Ç–∏—Ä—ã</li>
              <li>–°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–π —á–µ—Ä—Ç–µ–∂</li>
              <li>–†–∞–∑–º–µ—â–∞–µ—Ç –ø–ª–∞–Ω —Å—Ç—Ä–æ–≥–æ –ø–æ —Ü–µ–Ω—Ç—Ä—É</li>
              <li>–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—Å–µ –¥–µ—Ç–∞–ª–∏ –∏ –ø—Ä–æ–ø–æ—Ä—Ü–∏–∏</li>
              {generationType === 'furniture' && (
                <>
                  <li>–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø –ø–æ–º–µ—â–µ–Ω–∏—è (—Å–ø–∞–ª—å–Ω—è, –∫—É—Ö–Ω—è, –≤–∞–Ω–Ω–∞—è)</li>
                  <li>–î–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â—É—é –º–µ–±–µ–ª—å –≤ –Ω—É–∂–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö</li>
                  <li>–°–æ–∑–¥–∞–µ—Ç —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π –ø–ª–∞–Ω —Å –æ–±—Å—Ç–∞–Ω–æ–≤–∫–æ–π</li>
                </>
              )}
            </ul>
          </div>
        </div>

        <button 
          className="generate-btn" 
          onClick={handleGenerate}
          disabled={!selectedImage || isGenerating}
        >
          {isGenerating ? '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è...' : (generationType === 'furniture' ? '–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å –º–µ–±–µ–ª—å—é' : '–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–ª–∞–Ω')}
        </button>

        {generatedPhoto && (
          <div className="result-section">
            <h2>–†–µ–∑—É–ª—å—Ç–∞—Ç</h2>
            <div className="photo-info">
              <p>üé® –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ –Ω–∞—Ä–∏—Å–æ–≤–∞–Ω–Ω—ã–π –ø–ª–∞–Ω –∫–≤–∞—Ä—Ç–∏—Ä—ã</p>
              <p>üìê –¢–æ—á–Ω–æ–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–µ—Ç–∞–ª–µ–π –∏ –ø—Ä–æ–ø–æ—Ä—Ü–∏–π</p>
              <p>üéØ –ü–ª–∞–Ω —Ä–∞–∑–º–µ—â–µ–Ω —Å—Ç—Ä–æ–≥–æ –ø–æ —Ü–µ–Ω—Ç—Ä—É</p>
              {generationType === 'furniture' && (
                <p>ü™ë –î–æ–±–∞–≤–ª–µ–Ω–∞ –ø–æ–¥—Ö–æ–¥—è—â–∞—è –º–µ–±–µ–ª—å –≤ –ª–æ–≥–∏—á–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö</p>
              )}
            </div>
            <div className="photo-container">
              <img 
                src={generatedPhoto} 
                alt="–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–ª–∞–Ω –∫–≤–∞—Ä—Ç–∏—Ä—ã" 
                className="generated-photo"
              />
              <div className="photo-actions">
                <a 
                  href={generatedPhoto} 
                  download="floor-plan.png"
                  className="download-btn"
                >
                  üíæ –°–∫–∞—á–∞—Ç—å –ø–ª–∞–Ω
                </a>
              </div>
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

export default App;
