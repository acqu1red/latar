import React, { useState } from 'react';
import './App.css';
import { API_BASE_URL } from './config';

// interface FurnitureItem {
//   name: string;
//   icon: string;
//   width: number;
//   height: number;
//   color: string;
// }

const App: React.FC = () => {
  const [selectedImage, setSelectedImage] = useState<File | null>(null);
  const [imagePreview, setImagePreview] = useState<string | null>(null);
  const [isGenerating, setIsGenerating] = useState(false);
  const [generatedSvg, setGeneratedSvg] = useState<string | null>(null);

  const handleImageUpload = (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (file) {
      setSelectedImage(file);
      const reader = new FileReader();
      reader.onload = (e) => {
        setImagePreview(e.target?.result as string);
      };
      reader.readAsDataURL(file);
    }
  };

  const handleGenerate = async () => {
    if (!selectedImage) return;

    setIsGenerating(true);
    try {
      const formData = new FormData();
      formData.append('image', selectedImage);

      const response = await fetch(`${API_BASE_URL}/api/generate-plan`, {
        method: 'POST',
        body: formData,
      });

      if (response.ok) {
        const svgContent = await response.text();
        setGeneratedSvg(svgContent);
      } else {
        console.error('–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–ª–∞–Ω–∞');
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞:', error);
    } finally {
      setIsGenerating(false);
    }
  };

  const downloadSvg = (svgContent: string) => {
    const blob = new Blob([svgContent], { type: 'image/svg+xml' });
    const url = URL.createObjectURL(blob);
    const link = document.createElement('a');
    link.href = url;
    link.download = `plan-${Date.now()}.svg`;
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    URL.revokeObjectURL(url);
  };

  return (
    <div className="app">
      <div className="container">
        <h1>–ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –≤ SVG</h1>
        <p className="app-description">
          –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –ø–ª–∞–Ω–∞ –∫–≤–∞—Ä—Ç–∏—Ä—ã –∏ –ø–æ–ª—É—á–∏—Ç–µ —Ç–æ—á–Ω—É—é –∫–æ–ø–∏—é –≤ —Ñ–æ—Ä–º–∞—Ç–µ SVG
        </p>
        
        <div className="upload-section">
          <div className="upload-area">
            <input
              type="file"
              accept="image/*"
              onChange={handleImageUpload}
              id="image-upload"
              className="file-input"
            />
            <label htmlFor="image-upload" className="upload-label">
              {imagePreview ? (
                <img src={imagePreview} alt="–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä" className="preview-image" />
              ) : (
                <div className="upload-placeholder">
                  <div className="upload-icon">üì∑</div>
                  <p>–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –ø–ª–∞–Ω–∞ –∫–≤–∞—Ä—Ç–∏—Ä—ã</p>
                </div>
              )}
            </label>
          </div>
        </div>

        <div className="options-section">
          <div className="option-item">
            <input type="radio" id="no-furniture" name="furniture" value="no" defaultChecked />
            <label htmlFor="no-furniture">–ë–µ–∑ –º–µ–±–µ–ª–∏</label>
          </div>
        </div>

        <button 
          className="generate-btn" 
          onClick={handleGenerate}
          disabled={!selectedImage || isGenerating}
        >
          {isGenerating ? '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è...' : '–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å'}
        </button>

        {generatedSvg && (
          <div className="result-section">
            <h2>–†–µ–∑—É–ª—å—Ç–∞—Ç - SVG –ø–ª–∞–Ω –∫–≤–∞—Ä—Ç–∏—Ä—ã</h2>
            <div className="svg-info">
              <p>üìê –¢–æ—á–Ω–∞—è –∫–æ–ø–∏—è –≤–∞—à–µ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ SVG</p>
              <p>üîç –í—Å–µ –¥–µ—Ç–∞–ª–∏, –ª–∏–Ω–∏–∏ –∏ –ø–∏–∫—Å–µ–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã</p>
            </div>
            <div 
              className="svg-container"
              dangerouslySetInnerHTML={{ __html: generatedSvg }}
            />
            <div className="svg-actions">
              <button 
                className="download-btn"
                onClick={() => downloadSvg(generatedSvg)}
              >
                üíæ –°–∫–∞—á–∞—Ç—å SVG
              </button>
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

export default App;
