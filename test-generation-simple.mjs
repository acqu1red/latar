#!/usr/bin/env node

import fetch from 'node-fetch';
import fs from 'fs';
import sharp from 'sharp';

const API_BASE_URL = 'https://competitive-camellia-latar-a11ca532.koyeb.app';

async function testGenerationSimple() {
    console.log('üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Å –ø—Ä–æ—Å—Ç—ã–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º...');
    
    try {
        // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–µ —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é Sharp
        const testImagePath = '/tmp/test-simple.png';
        
        // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ 200x200 —Å —á–µ—Ä–Ω—ã–º–∏ –ª–∏–Ω–∏—è–º–∏ –Ω–∞ –±–µ–ª–æ–º —Ñ–æ–Ω–µ
        await sharp({
            create: {
                width: 200,
                height: 200,
                channels: 3,
                background: { r: 255, g: 255, b: 255 }
            }
        })
        .composite([
            {
                input: Buffer.from(`
                    <svg width="200" height="200" xmlns="http://www.w3.org/2000/svg">
                        <rect x="20" y="20" width="160" height="160" fill="none" stroke="black" stroke-width="2"/>
                        <line x1="20" y1="100" x2="180" y2="100" stroke="black" stroke-width="2"/>
                        <line x1="100" y1="20" x2="100" y2="180" stroke="black" stroke-width="2"/>
                    </svg>
                `),
                top: 0,
                left: 0
            }
        ])
        .png()
        .toFile(testImagePath);
        
        console.log('‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ');
        
        // –¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        console.log('\nüé® –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é...');
        const formData = new FormData();
        const imageBuffer = fs.readFileSync(testImagePath);
        const imageBlob = new Blob([imageBuffer], { type: 'image/png' });
        formData.append('image', imageBlob, 'test-simple.png');
        
        const response = await fetch(`${API_BASE_URL}/api/generate-photo`, {
            method: 'POST',
            body: formData,
            headers: {
                'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36'
            }
        });
        
        console.log('üì• –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞:', response.status);
        console.log('üì• –ó–∞–≥–æ–ª–æ–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞:');
        for (const [key, value] of response.headers.entries()) {
            if (key.toLowerCase().includes('access-control') || key.toLowerCase().includes('content-type')) {
                console.log(`  - ${key}: ${value}`);
            }
        }
        
        if (response.ok) {
            const buffer = await response.buffer();
            console.log('‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –†–∞–∑–º–µ—Ä:', buffer.length, '–±–∞–π—Ç');
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            fs.writeFileSync('/tmp/generated-simple.png', buffer);
            console.log('‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ /tmp/generated-simple.png');
        } else {
            const errorText = await response.text();
            console.log('‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:', errorText);
        }
        
        // –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        fs.unlinkSync(testImagePath);
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:', error.message);
    }
}

testGenerationSimple();
